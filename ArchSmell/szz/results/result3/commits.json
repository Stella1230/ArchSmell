{"bc4bf6df0176b513c9f1818ea5f15645ee528dd3":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/MutableLogEvent.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/MutableLogEventTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEvent.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/MutableLogEvent.java":[{"add":["501","        return message != null ? message : new MementoMessage(String.valueOf(messageText), messageFormat, getParameters());"],"delete":["501","        return message != null ? message : new SimpleMessage(String.valueOf(messageText));"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/MutableLogEventTest.java":[{"add":["144","","145","        Message eventMementoMessage = mutable.createMemento().getMessage();","146","        assertEquals(\"format\", \"msg in a {}\", eventMementoMessage.getFormat());","147","        assertEquals(\"formatted\", \"msg in a bottle\", eventMementoMessage.getFormattedMessage());","148","        assertEquals(\"parameters\", new String[] {\"bottle\"}, eventMementoMessage.getParameters());","149","","150","        Message log4JLogEventMessage = new Log4jLogEvent.Builder(mutable).build().getMessage();","151","        assertEquals(\"format\", \"msg in a {}\", log4JLogEventMessage.getFormat());","152","        assertEquals(\"formatted\", \"msg in a bottle\", log4JLogEventMessage.getFormattedMessage());","153","        assertEquals(\"parameters\", new String[] {\"bottle\"}, log4JLogEventMessage.getParameters());"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEvent.java":[{"add":["540","        message = new MementoMessage(message.getFormattedMessage(), message.getFormat(), message.getParameters());"],"delete":["540","        message = new SimpleMessage(message.getFormattedMessage());"]}]}},"05f0d952f050aaffc7c0174130d0764d53363022":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1007\" dev=\"ggregory\" type=\"fix\" due-to=\"Ralph Goers, Gary Gregory\">","27","        org.apache.logging.log4j.core.util#fileFromUri(URI uri) incorrectly converts '+' characters to spaces.","28","      <\/action>"],"delete":[]}]}},"fabc931f764728f61fda75b94fd8470afda9f4a9":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/Level.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2793\" dev=\"rgoers\" type=\"fix\" due-to=\"Renukaprasad C\">","33","        Allow trailing and leading spaces in log level.","34","      <\/action>"],"delete":[]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/Level.java":[{"add":["286","        final Level level = LEVELS.get(toUpperCase(name.trim()));","314","        final String levelName = toUpperCase(name.trim());"],"delete":["286","        final Level level = LEVELS.get(toUpperCase(name));","314","        final String levelName = toUpperCase(name);"]}]}},"dbe386b27a0067947f1d87d5b2017fa7861c8398":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/datetime\/FixedDateFormat.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/datetime\/FixedDateFormat.java":[{"add":["141","        ISO8601_PERIOD_MICROS(\"yyyy-MM-dd'T'HH:mm:ss.nnnnnn\", \"yyyy-MM-dd'T'\", 2, ':', 1, '.', 1, 6, null),","142","","143","        \/**","144","         * American date\/time format with 2-digit year: {@code \"dd\/MM\/yy HH:mm:ss.SSS\"}.","145","         *\/","146","        US_MONTH_DAY_YEAR2_TIME(\"dd\/MM\/yy HH:mm:ss.SSS\", \"dd\/MM\/yy \", 0, ':', 1, '.', 1, 3, null),","147","","148","        \/**","149","         * American date\/time format with 4-digit year: {@code \"dd\/MM\/yyyy HH:mm:ss.SSS\"}.","150","         *\/","151","        US_MONTH_DAY_YEAR4_TIME(\"dd\/MM\/yyyy HH:mm:ss.SSS\", \"dd\/MM\/yyyy \", 0, ':', 1, '.', 1, 3, null);"],"delete":["79","         * American date\/time format with 2-digit year: {@code \"dd\/MM\/yy HH:mm:ss.SSS\"}.","80","         *\/","81","        US_MONTH_DAY_YEAR2_TIME(\"dd\/MM\/yy HH:mm:ss.SSS\", \"dd\/MM\/yy \", 0, ':', 1, '.', 1, 3, null),","82","","83","        \/**","84","         * American date\/time format with 4-digit year: {@code \"dd\/MM\/yyyy HH:mm:ss.SSS\"}.","85","         *\/","86","        US_MONTH_DAY_YEAR4_TIME(\"dd\/MM\/yyyy HH:mm:ss.SSS\", \"dd\/MM\/yyyy \", 0, ':', 1, '.', 1, 3, null),","87","","88","        \/**","151","        ISO8601_PERIOD_MICROS(\"yyyy-MM-dd'T'HH:mm:ss.nnnnnn\", \"yyyy-MM-dd'T'\", 2, ':', 1, '.', 1, 6, null);"]}]}},"07787ec8459e03cefcb23c48b312d363ce8f6856":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/CronExpression.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/CronExpressionTest.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/CronExpression.java":[{"add":["1574","        \/\/ CronTrigger does not deal with milliseconds, so truncate target","1575","        cl.setTime(targetDate);","1576","        cl.set(Calendar.MILLISECOND, 0);","1577","        final Date targetDateNoMs = cl.getTime();","1578","","1580","        Date start = targetDateNoMs;","1590","        } while (prevFireTime.compareTo(targetDateNoMs) >= 0);"],"delete":["1575","        Date start = targetDate;","1585","        } while (prevFireTime.compareTo(targetDate) >= 0);"]}],"src\/changes\/changes.xml":[{"add":["65","      <action issue=\"LOG4J2-2575\" dev=\"rgoers\" type=\"fix\" due-to=\"Nathan Friess\">","66","        CronExpression.getBeforeTime() would sometimes return incorrect result.","67","      <\/action>"],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/CronExpressionTest.java":[{"add":["20","import java.text.SimpleDateFormat;","21","import java.util.Calendar;","157","    \/*","158","     * Input time with milliseconds will correctly return the next","159","     * scheduled time.","160","     *\/","161","    @Test","162","    public void testTimeBeforeMilliseconds() throws Exception {","163","        final CronExpression parser = new CronExpression(\"0 0 0 * * ?\");","164","        final GregorianCalendar cal = new GregorianCalendar(2015, 10, 2, 0, 0, 0);","165","        cal.set(Calendar.MILLISECOND, 100);","166","        final Date date = cal.getTime();","167","        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");","168","        System.err.println(sdf.format(date));","169","        final Date fireDate = parser.getTimeBefore(date);","170","        System.err.println(sdf.format(fireDate));","171","        final Date expected = new GregorianCalendar(2015, 10, 1, 0, 0, 0).getTime();","172","        assertEquals(\"Dates not equal.\", expected, fireDate);","173","    }","174",""],"delete":[]}]}},"9d817953372126b7d2697be3e62644763c05acd2":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-260\" dev=\"ggregory\" type=\"fix\">","25","        XML layout does not specify charset in content type.","26","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":[{"add":["241","        return \"text\/xml; charset=\" + this.getCharset();"],"delete":["241","        return \"text\/xml\";"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":[{"add":["61","    public void testContentType() {","62","        final XMLLayout layout = XMLLayout.createLayout(null, null, null, null);","63","        assertEquals(\"text\/xml; charset=UTF-8\", layout.getContentType());","64","    }","65","","66","    @Test"],"delete":[]}]}},"db56ea8c7000e031cd78bd1cff6308f78284afe2":{"changes":{"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/ThreadContextInheritanceTest.java":"ADD","src\/site\/xdoc\/manual\/thread-context.xml":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/DefaultThreadContextMap.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/ThreadContextTest.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/spi\/DefaultThreadContextMapTest.java":"MODIFY"},"diff":{"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/ThreadContextInheritanceTest.java":[{"add":[],"delete":[]}],"src\/site\/xdoc\/manual\/thread-context.xml":[{"add":["97","          <p>The Stack and the Map are managed per thread and are based on","98","            <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/lang\/ThreadLocal.html\">ThreadLocal<\/a>","99","            by default. The Map can be configured to use an","100","            <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/lang\/InheritableThreadLocal.html\">InheritableThreadLocal<\/a>","101","            by setting system property <tt>isThreadContextMapInheritable<\/tt> to <tt>\"true\"<\/tt>.","102","            When configured this way, the contents of the Map will be passed to child threads. However, as"],"delete":["97","          <p>The Stack and the Map are managed per thread and is based on","98","            <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/lang\/InheritableThreadLocal.html\">InheritableThreadLocal<\/a>.","99","            Thus, in many cases the contents of the Stack and Map will be passed to child threads. However, as"]}],"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-479\" dev=\"rpopma\" type=\"add\" due-to=\"MK\">","24","        ThreadContext now uses plain ThreadLocal by default, unless system property","25","        <tt>isThreadContextMapInheritable<\/tt> has value <tt>\"true\"<\/tt>.","26","      <\/action>","30","      <action issue=\"LOG4J2-481\" dev=\"rgoers\" type=\"add\" due-to=\"Matt Sicker\">"],"delete":["26","      <action issue=\"LOG4J2-481\" dev=\"rgoers\" type=\"update\" due-to=\"Matt Sicker\">"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/DefaultThreadContextMap.java":[{"add":["22","import org.apache.logging.log4j.util.PropertiesUtil;","23","","31","    \/** ","32","     * Property name ({@value}) for selecting {@code InheritableThreadLocal} (value \"true\")","33","     * or plain {@code ThreadLocal} (value is not \"true\") in the implementation.","34","     *\/","35","    public static final String INHERITABLE_MAP = \"isThreadContextMapInheritable\";","38","    private final ThreadLocal<Map<String, String>> localMap;","42","        this.localMap = createThreadLocalMap(useMap);","43","    }","44","    ","45","    \/\/ LOG4J2-479: by default, use a plain ThreadLocal, only use InheritableThreadLocal if configured.","46","    \/\/ (This method is package protected for JUnit tests.)","47","    static ThreadLocal<Map<String, String>> createThreadLocalMap(final boolean isMapEnabled) {","48","        final PropertiesUtil managerProps = PropertiesUtil.getProperties();","49","        final boolean inheritable = managerProps.getBooleanProperty(INHERITABLE_MAP);","50","        if (inheritable) {","51","            return new InheritableThreadLocal<Map<String, String>>() {","52","                @Override","53","                protected Map<String, String> childValue(final Map<String, String> parentValue) {","54","                    return (parentValue != null && isMapEnabled) \/\/","55","                            ? Collections.unmodifiableMap(new HashMap<String, String>(parentValue)) \/\/","56","                            : null;","57","                }","58","            };","59","        }","60","        \/\/ if not inheritable, return plain ThreadLocal with null as initial value","61","        return new ThreadLocal<Map<String, String>>();"],"delete":["31","","32","    private final ThreadLocal<Map<String, String>> localMap =","33","        new InheritableThreadLocal<Map<String, String>>() {","34","            @Override","35","            protected Map<String, String> childValue(final Map<String, String> parentValue) {","36","                return parentValue == null || !useMap ? null :","37","                    Collections.unmodifiableMap(new HashMap<String, String>(parentValue));","38","            }","39","        };"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/ThreadContextTest.java":[{"add":["18","import static org.junit.Assert.*;","22","import org.junit.Test;","41","    public void testInheritanceSwitchedOffByDefault() throws Exception {","49","        assertTrue(\"Unexpected ThreadContext value. Expected null. Actual \"","50","                + str, \"null\".equals(str));","56","        assertTrue(\"Unexpected ThreadContext value. Expected null. Actual \"","57","                + str, \"null\".equals(str));"],"delete":["18","import org.junit.Test;","22","import static org.junit.Assert.*;","41","    public void testInheritance() throws Exception {","49","        assertTrue(\"Unexpected ThreadContext value. Expected Hello. Actual \"","50","                + str, \"Hello\".equals(str));","56","        assertTrue(\"Unexpected ThreadContext value. Expected Hello. Actual \"","57","                + str, \"Hello\".equals(str));"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/spi\/DefaultThreadContextMapTest.java":[{"add":["170","","171","    @Test","172","    public void testThreadLocalNotInheritableByDefault() {","173","        System.clearProperty(DefaultThreadContextMap.INHERITABLE_MAP);","174","        ThreadLocal<Map<String, String>> threadLocal = DefaultThreadContextMap.createThreadLocalMap(true);","175","        assertFalse(threadLocal instanceof InheritableThreadLocal<?>);","176","    }","177","    ","178","    @Test","179","    public void testThreadLocalInheritableIfConfigured() {","180","        System.setProperty(DefaultThreadContextMap.INHERITABLE_MAP, \"true\");","181","        try {","182","            ThreadLocal<Map<String, String>> threadLocal = DefaultThreadContextMap.createThreadLocalMap(true);","183","            assertTrue(threadLocal instanceof InheritableThreadLocal<?>);","184","        } finally {","185","            System.clearProperty(DefaultThreadContextMap.INHERITABLE_MAP);","186","        }","187","    }"],"delete":[]}]}},"3ce0d01fa87e91427deefd0b91b1b2f13fb15f81":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/web\/WebLookupTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/Configurator.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jContextFactory.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/LoggerContextFactory.java":"MODIFY","log4j-core\/src\/test\/resources\/log4j-webvar.xml":"ADD","src\/changes\/changes.xml":"MODIFY","log4j-to-slf4j\/src\/main\/java\/org\/apache\/logging\/slf4j\/SLF4JLoggerContextFactory.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/TestLoggerContextFactory.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/simple\/SimpleLoggerContextFactory.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/LogManager.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/web\/WebLookupTest.java":[{"add":["18","import org.apache.logging.log4j.core.Appender;","20","import org.apache.logging.log4j.core.appender.FileAppender;","33","import java.util.Map;","34","","41","        ContextAnchor.THREAD_CONTEXT.remove();","53","            assertNotNull(\"No ServletContext\", ctx.getExternalContext());","73","        initializer.deinitialize();","74","        ContextAnchor.THREAD_CONTEXT.remove();","75","    }","76","","77","    @Test","78","    public void testLookup2() throws Exception {","79","        ContextAnchor.THREAD_CONTEXT.remove();","80","        ServletContext servletContext = new MockServletContext();","81","        servletContext.setAttribute(\"TestAttr\", \"AttrValue\");","82","        servletContext.setInitParameter(\"myapp.logdir\", \"target\");","83","        servletContext.setAttribute(\"Name1\", \"Ben\");","84","        servletContext.setInitParameter(\"Name2\", \"Jerry\");","85","        servletContext.setInitParameter(\"log4jConfiguration\", \"log4j-webvar.xml\");","86","        Log4jWebInitializer initializer = Log4jWebInitializerImpl.getLog4jWebInitializer(servletContext);","87","        initializer.initialize();","88","        initializer.setLoggerContext();","89","        LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();","90","        assertNotNull(\"No LoggerContext\", ctx);","91","        assertNotNull(\"No ServletContext\", ctx.getExternalContext());","92","        Configuration config = ctx.getConfiguration();","93","        assertNotNull(\"No Configuration\", config);","94","        Map<String, Appender> appenders = config.getAppenders();","95","        for (Map.Entry<String, Appender> entry : appenders.entrySet()) {","96","            if (entry.getKey().equals(\"file\")) {","97","                FileAppender fa = (FileAppender) entry.getValue();","98","                assertTrue(\"target\/myapp.log\".equals(fa.getFileName()));","99","            }","100","        }","101","        initializer.deinitialize();","102","        ContextAnchor.THREAD_CONTEXT.remove();"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/Configurator.java":[{"add":["102","            final org.apache.logging.log4j.spi.LoggerContext context = LogManager.getContext(loader, false,","103","                externalContext, configLocation);","129","        return initialize(loader, source, null);","130","    }","131","","132","    \/**","133","     * Initializes the Logging Context.","134","     * @param loader The ClassLoader for the Context (or null).","135","     * @param source The InputSource for the configuration.","136","     * @param externalContext The external context to be attached to the LoggerContext.","137","     * @return The LoggerContext.","138","     *\/","139","","140","    public static LoggerContext initialize(final ClassLoader loader,","141","                                           final ConfigurationFactory.ConfigurationSource source,","142","                                           final Object externalContext)","143","    {","152","            final org.apache.logging.log4j.spi.LoggerContext context = LogManager.getContext(loader, false,","153","                externalContext, configLocation);"],"delete":["102","            final org.apache.logging.log4j.spi.LoggerContext context = LogManager.getContext(loader, false, configLocation);","106","                if (externalContext != null) {","107","                    ctx.setExternalContext(externalContext);","108","                }","139","            final org.apache.logging.log4j.spi.LoggerContext context = LogManager.getContext(loader, false, configLocation);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jContextFactory.java":[{"add":["78","     * @param externalContext An external context (such as a ServletContext) to be associated with the LoggerContext.","82","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","83","                                    final boolean currentContext) {","85","        ctx.setExternalContext(externalContext);","96","     * @param externalContext An external context (such as a ServletContext) to be associated with the LoggerContext.","103","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","104","                                    final boolean currentContext, final URI configLocation) {","106","        if (externalContext != null && ctx.getExternalContext() == null) {","107","            ctx.setExternalContext(externalContext);","108","        }"],"delete":["81","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {","99","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,","100","            final URI configLocation) {"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/LoggerContextFactory.java":[{"add":["32","     * @param externalContext An external context (such as a ServletContext) to be associated with the LoggerContext.","35","    LoggerContext getContext(String fqcn, ClassLoader loader, Object externalContext, boolean currentContext);","45","     * @param externalContext An external context (such as a ServletContext) to be associated with the LoggerContext.","48","    LoggerContext getContext(String fqcn, ClassLoader loader, Object externalContext, boolean currentContext,","49","                             URI configLocation);"],"delete":["34","    LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext);","46","    LoggerContext getContext(String fqcn, ClassLoader loader, boolean currentContext, URI configLocation);"]}],"log4j-core\/src\/test\/resources\/log4j-webvar.xml":[{"add":[],"delete":[]}],"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-459\" dev=\"rgoers\" type=\"fix\">","24","        Set external context when constructing the LoggerContext.","25","      <\/action>"],"delete":[]}],"log4j-to-slf4j\/src\/main\/java\/org\/apache\/logging\/slf4j\/SLF4JLoggerContextFactory.java":[{"add":["45","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","46","                                    final boolean currentContext) {","51","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","52","                                    final boolean currentContext, final URI configLocation) {"],"delete":["45","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {","50","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,","51","                                    final URI configLocation) {"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/TestLoggerContextFactory.java":[{"add":["31","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","32","                                    final boolean currentContext) {","37","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","38","                                    final boolean currentContext, final URI configLocation) {"],"delete":["31","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {","36","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,","37","                                    final URI configLocation) {"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/simple\/SimpleLoggerContextFactory.java":[{"add":["31","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","32","                                    final boolean currentContext) {","37","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final Object externalContext,","38","                                    final boolean currentContext, final URI configLocation) {"],"delete":["31","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext) {","36","    public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,","37","                                    final URI configLocation) {"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/LogManager.java":[{"add":["141","        return factory.getContext(LogManager.class.getName(), null, null, true);","154","        return factory.getContext(LogManager.class.getName(), null, null, currentContext, null);","169","        return factory.getContext(LogManager.class.getName(), loader, null, currentContext);","170","    }","171","","172","    \/**","173","     * Returns a LoggerContext.","174","     *","175","     * @param loader The ClassLoader for the context. If null the context will attempt to determine the appropriate","176","     * ClassLoader.","177","     * @param currentContext if false the LoggerContext appropriate for the caller of this method is returned. For","178","     * example, in a web application if the caller is a class in WEB-INF\/lib then one LoggerContext may be","179","     * returned and if the caller is a class in the container's classpath then a different LoggerContext may be","180","     * returned. If true then only a single LoggerContext will be returned.","181","     * @param externalContext An external context (such as a ServletContext) to be associated with the LoggerContext.","182","     * @return a LoggerContext.","183","     *\/","184","    public static LoggerContext getContext(final ClassLoader loader, final boolean currentContext,","185","                                           final Object externalContext) {","186","        return factory.getContext(LogManager.class.getName(), loader, externalContext, currentContext);","203","        return factory.getContext(LogManager.class.getName(), loader, null, currentContext, configLocation);","204","    }","205","","206","","207","    \/**","208","     * Returns a LoggerContext.","209","     *","210","     * @param loader The ClassLoader for the context. If null the context will attempt to determine the appropriate","211","     * ClassLoader.","212","     * @param currentContext if false the LoggerContext appropriate for the caller of this method is returned. For","213","     * example, in a web application if the caller is a class in WEB-INF\/lib then one LoggerContext may be","214","     * returned and if the caller is a class in the container's classpath then a different LoggerContext may be","215","     * returned. If true then only a single LoggerContext will be returned.","216","     * @param configLocation The URI for the configuration to use.","217","     * @return a LoggerContext.","218","     *\/","219","    public static LoggerContext getContext(final ClassLoader loader, final boolean currentContext,","220","                                           final Object externalContext, final URI configLocation) {","221","        return factory.getContext(LogManager.class.getName(), loader, externalContext, currentContext, configLocation);","234","        return factory.getContext(fqcn, null, null, currentContext);","250","        return factory.getContext(fqcn, loader, null, currentContext);","421","        return factory.getContext(LogManager.class.getName(), null, null, false).getLogger(actualName);","434","        return factory.getContext(LogManager.class.getName(), null, null, false).getLogger(actualName, messageFactory);","445","        return factory.getContext(fqcn, null, null, false).getLogger(name);"],"delete":["141","        return factory.getContext(LogManager.class.getName(), null, true);","154","        return factory.getContext(LogManager.class.getName(), null, currentContext);","169","        return factory.getContext(LogManager.class.getName(), loader, currentContext);","186","        return factory.getContext(LogManager.class.getName(), loader, currentContext, configLocation);","199","        return factory.getContext(fqcn, null, currentContext);","215","        return factory.getContext(fqcn, loader, currentContext);","386","        return factory.getContext(LogManager.class.getName(), null, false).getLogger(actualName);","399","        return factory.getContext(LogManager.class.getName(), null, false).getLogger(actualName, messageFactory);","410","        return factory.getContext(fqcn, null, false).getLogger(name);"]}]}},"c85a63c095e86a165e733e5b07e813ec8788a803":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["98","      <action issue=\"LOG4J2-1235\" dev=\"ggregory\" type=\"fix\" due-to=\"Niranjan Rao, Sascha Scholz, Aleksey Zvolinsky\">","99","        org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy not working correctly.","100","      <\/action>"],"delete":[]}]}},"299d46aa0315f23e25c3e41f8473cc188281a2e9":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/LambdaUtil.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/LambdaUtil.java":[{"add":["52","     * Returns the result of evaluating the specified function. If the supplied value is of type Message, this method","53","     * returns the result of calling {@code #getFormattedMessage} on that Message.","79","    \/**","80","     * Returns a Message, either the value supplied by the specified function, or a new Message created by the specified","81","     * Factory.","82","     * @param supplier a lambda expression or {@code null}","83","     * @return the Message resulting from evaluating the lambda expression or the Message created by the factory for","84","     * supplied values that are not of type Message","85","     *\/"],"delete":["52","     * Returns the result of evaluating the specified function."]}]}},"e51ecbc230dbb56bce46f338b41dbf311783baa4":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CachedClock.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CoarseCachedClock.java":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CachedClock.java":[{"add":["18","import java.util.concurrent.locks.LockSupport;","39","                LockSupport.parkNanos(1000 * 1000);","40","                \/\/ Util.getUnsafe().park(true, time + 1); \/\/ abs (millis)"],"delete":["18","import com.lmax.disruptor.util.Util;","39","                Util.getUnsafe().park(true, time + 1); \/\/ abs (millis)"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CoarseCachedClock.java":[{"add":["18","import java.util.concurrent.locks.LockSupport;","34","                LockSupport.parkNanos(1000 * 1000);","35","                \/\/ Util.getUnsafe().park(true, time + 1); \/\/ abs (millis)"],"delete":["18","import com.lmax.disruptor.util.Util;","34","                Util.getUnsafe().park(true, time + 1); \/\/ abs (millis)"]}]}},"df2da303ed81e5440f790e2cd5081b43323cd536":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/UUIDUtil.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/UUIDUtil.java":[{"add":["142","                        break;"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["21","    <author email=\"ggregory@apache.org\">Gary Gregory<\/author>","24","    <release version=\"2.0-beta8\" date=\"2013-??-??\" description=\"Bug fixes and enhancements\">","25","      <action issue=\"LOG4J2-274\" dev=\"ggregory\" type=\"update\">","26","        Wasted work in UUIDUtil initialization.","27","      <\/action>","28","    <\/release>","29","  <body>"],"delete":[]}]}},"7b38965d69eca0868ce2d09e25f849a3d9fc4aea":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayout.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-258\" dev=\"ggregory\" type=\"fix\">","25","        HTML layout does not output meta element for charset.","26","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayout.java":[{"add":["260","        sbuf.append(\"<meta charset=\\\"\").append(getCharset()).append(\"\\\"\/>\").append(Constants.LINE_SEP);","320","        final Charset charset = Charsets.getSupportedCharset(charsetName, Charsets.UTF_8);"],"delete":["319","        final Charset charset = Charsets.getSupportedCharset(charsetName);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":[{"add":["98","        final String string = list.get(3);","99","        assertTrue(\"Incorrect header: \" + string, string.equals(\"<meta charset=\\\"UTF-8\\\"\/>\"));","100","        assertTrue(\"Incorrect title\", list.get(4).equals(\"<title>Log4J Log Messages<\/title>\"));","102","        assertTrue(\"Incorrect multiline\", list.get(50).equals(multiLine));","103","        assertTrue(\"Incorrect body\", list.get(71).equals(body));"],"delete":["98","        assertTrue(\"Incorrect header\", list.get(3).equals(\"<title>Log4J Log Messages<\/title>\"));","100","        assertTrue(\"Incorrect multiline\", list.get(49).equals(multiLine));","101","        assertTrue(\"Incorrect body\", list.get(70).equals(body));"]}]}},"a4258b6855471a3cd329c2654718777985a8f6c4":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/TcpSocketManager.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["53","      <action issue=\"LOG4J2-1042\" dev=\"ggregory\" type=\"fix\" due-to=\"Guillaume Turri\">","54","        Socket and Syslog appenders don't take timeout into account at startup.","55","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/TcpSocketManager.java":[{"add":["284","                \/\/ LOG4J2-1042","285","                final Socket socket = new Socket();","286","                socket.connect(new InetSocketAddress(data.host, data.port), data.connectTimeoutMillis);"],"delete":["284","                final Socket socket = new Socket(data.host, data.port);"]}]}},"06b31d2dea94c3b6c737b305842d5f46901cef0e":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-layout-template-json\/src\/test\/java\/org\/apache\/logging\/log4j\/layout\/template\/json\/util\/JsonWriterTest.java":"MODIFY","pom.xml":"MODIFY","log4j-layout-template-json\/src\/main\/java\/org\/apache\/logging\/log4j\/layout\/template\/json\/util\/JsonWriter.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2998\" dev=\"vy\" type=\"fix\">","33","        Fix truncation of excessive strings ending with a high surrogate in JsonWriter.","34","      <\/action>"],"delete":[]}],"log4j-layout-template-json\/src\/test\/java\/org\/apache\/logging\/log4j\/layout\/template\/json\/util\/JsonWriterTest.java":[{"add":["51","    private static final int SURROGATE_CODE_POINT = 65536;","52","","53","    private static final char[] SURROGATE_PAIR = new char[2];","54","    static {","55","        \/\/ noinspection ResultOfMethodCallIgnored","56","        Character.toChars(SURROGATE_CODE_POINT, SURROGATE_PAIR, 0);","57","    }","58","","59","    private static final char HI_SURROGATE = SURROGATE_PAIR[0];","60","","61","    private static final char LO_SURROGATE = SURROGATE_PAIR[1];","62","","78","    void test_surrogate_code_point() {","79","        Assertions","80","                .assertThat(HI_SURROGATE)","81","                .matches(Character::isHighSurrogate, \"is high surrogate\");","82","        Assertions","83","                .assertThat(LO_SURROGATE)","84","                .matches(Character::isLowSurrogate, \"is low surrogate\");","85","        Assertions","86","                .assertThat(Character.isSurrogatePair(HI_SURROGATE, LO_SURROGATE))","87","                .as(\"is surrogate pair\")","88","                .isTrue();","89","        Assertions","90","                .assertThat(SURROGATE_CODE_POINT)","91","                .matches(Character::isDefined, \"is defined\");","92","    }","93","","94","    @Test","433","    void test_writeString_emitter_excessive_string_ending_with_high_surrogate() {","434","        withLockedWriter(writer -> {","435","            final int maxStringLength = writer.getMaxStringLength();","436","            @SuppressWarnings(\"StringBufferReplaceableByString\")","437","            final String excessiveString = new StringBuilder()","438","                    .append(Strings.repeat(\"x\", maxStringLength - 1))","439","                    .append(HI_SURROGATE)","440","                    .append(LO_SURROGATE)","441","                    .toString();","442","            final String expectedJson = \"\\\"\" +","443","                    Strings.repeat(\"x\", maxStringLength - 1) +","444","                    writer.getTruncatedStringSuffix() +","445","                    '\"';","446","            final BiConsumer<StringBuilder, String> emitter = StringBuilder::append;","447","            final String actualJson =","448","                    writer.use(() -> writer.writeString(emitter, excessiveString));","449","            Assertions.assertThat(actualJson).isEqualTo(expectedJson);","450","        });","451","    }","452","","453","    @Test","485","    void test_writeString_formattable_excessive_string_ending_with_high_surrogate() {","486","        withLockedWriter(writer -> {","487","            final int maxStringLength = writer.getMaxStringLength();","488","            @SuppressWarnings(\"StringBufferReplaceableByString\")","489","            final String excessiveString = new StringBuilder()","490","                    .append(Strings.repeat(\"x\", maxStringLength - 1))","491","                    .append(HI_SURROGATE)","492","                    .append(LO_SURROGATE)","493","                    .toString();","494","            final String expectedJson = \"\\\"\" +","495","                    Strings.repeat(\"x\", maxStringLength - 1) +","496","                    writer.getTruncatedStringSuffix() +","497","                    '\"';","498","            final String actualJson = writer.use(() ->","499","                    writer.writeString(stringBuilder ->","500","                            stringBuilder.append(excessiveString)));","501","            Assertions.assertThat(actualJson).isEqualTo(expectedJson);","502","        });","503","    }","504","","505","    @Test","547","    void test_writeString_excessive_seq_ending_with_high_surrogate() {","548","        withLockedWriter(writer -> {","549","            final int maxStringLength = writer.getMaxStringLength();","550","            @SuppressWarnings(\"StringBufferReplaceableByString\")","551","            final CharSequence seq = new StringBuilder()","552","                    .append(Strings.repeat(\"x\", maxStringLength - 1))","553","                    .append(HI_SURROGATE)","554","                    .append(LO_SURROGATE)","555","                    .toString();","556","            final String expectedJson = \"\\\"\" +","557","                    Strings.repeat(\"x\", maxStringLength - 1) +","558","                    writer.getTruncatedStringSuffix() +","559","                    '\"';","560","            final String actualJson = writer.use(() -> writer.writeString(seq));","561","            Assertions.assertThat(actualJson).isEqualTo(expectedJson);","562","        });","563","    }","564","","565","    @Test","567","        final char[] surrogates = new char[2];","568","        testQuoting((final Integer codePoint) -> {","569","            \/\/ noinspection ResultOfMethodCallIgnored","570","            Character.toChars(codePoint, surrogates, 0);","571","            final String s = new String(surrogates);","621","    void test_writerString_excessive_buffer_ending_with_high_surrogate() {","622","        withLockedWriter(writer -> {","623","            final int maxStringLength = writer.getMaxStringLength();","624","            @SuppressWarnings(\"StringBufferReplaceableByString\")","625","            final char[] buffer = new StringBuilder()","626","                    .append(Strings.repeat(\"x\", maxStringLength - 1))","627","                    .append(HI_SURROGATE)","628","                    .append(LO_SURROGATE)","629","                    .toString()","630","                    .toCharArray();","631","            final String expectedJson = \"\\\"\" +","632","                    Strings.repeat(\"x\", maxStringLength - 1) +","633","                    writer.getTruncatedStringSuffix() +","634","                    '\"';","635","            final String actualJson = writer.use(() -> writer.writeString(buffer));","636","            Assertions.assertThat(actualJson).isEqualTo(expectedJson);","637","        });","638","    }","639","","640","    @Test","642","        final char[] buffer = new char[2];","643","        testQuoting((final Integer codePoint) -> {","644","            \/\/ noinspection ResultOfMethodCallIgnored","645","            Character.toChars(codePoint, buffer, 0);","652","            final Function<Integer, String> quoter) throws IOException {","654","        final char[] surrogates = new char[2];","655","        for (int codePoint = Character.MIN_CODE_POINT;","656","             codePoint <= Character.MAX_CODE_POINT;","657","             codePoint++) {","658","            \/\/ noinspection ResultOfMethodCallIgnored","659","            Character.toChars(codePoint, surrogates, 0);","660","            final String s = new String(surrogates);","664","            final String actualJson = quoter.apply(codePoint);","667","                    .as(\"codePoint='%s' (%d)\", s, codePoint)"],"delete":["477","        testQuoting((final Character c) -> {","478","            final String s = \"\" + c;","529","        final char[] buffer = new char[1];","530","        testQuoting((final Character c) -> {","531","            buffer[0] = c;","538","            final Function<Character, String> quoter) throws IOException {","540","        for (char c = Character.MIN_VALUE;; c++) {","541","            final String s = \"\" + c;","545","            final String actualJson = quoter.apply(c);","548","                    .as(\"c='%c' (%d)\", c, (int) c)","550","            if (c == Character.MAX_VALUE) {","551","                break;","552","            }"]}],"pom.xml":[{"add":["245","    <mockitoVersion>3.7.0<\/mockitoVersion>","246","    <xmlunitVersion>2.8.2<\/xmlunitVersion>","848","        <version>2.22.0<\/version>"],"delete":["245","    <mockitoVersion>3.6.0<\/mockitoVersion>","246","    <xmlunitVersion>2.8.0<\/xmlunitVersion>","848","        <version>2.21.0<\/version>"]}],"log4j-layout-template-json\/src\/main\/java\/org\/apache\/logging\/log4j\/layout\/template\/json\/util\/JsonWriter.java":[{"add":["583","        final int surrogateCorrection =","584","                length > 0 && Character.isHighSurrogate(seq.charAt(offset + length - 1))","585","                        ? -1","586","                        : 0;","587","        final int limit = offset + length + surrogateCorrection;","660","        final int surrogateCorrection =","661","                length > 0 && Character.isHighSurrogate(buffer[offset + length - 1])","662","                        ? -1","663","                        : 0;","664","        final int limit = offset + length + surrogateCorrection;"],"delete":["583","        final int limit = offset + length;","656","        final int limit = offset + length;"]}]}},"ba16485b93cde4f05e0cbb2ca564a7b6cb6d4d77":{"changes":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/HtmlLayoutBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/TTCCLayoutBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/AppenderAdapter.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/DailyRollingFileAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/SyslogAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/FileAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/SocketAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/AppenderWrapper.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/XmlLayoutBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/LevelMatchFilterBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/AbstractBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/config\/PropertiesConfiguration.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/xml\/XmlConfiguration.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/StringMatchFilterBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/FilterAdapter.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/FilterWrapper.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/LayoutAdapter.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/ConsoleAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/builders\/Log4j2ListAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/LevelRangeFilterBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/RollingFileAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/Category.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/LayoutWrapper.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/NullAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/AsyncAppenderBuilder.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/RewriteAppenderBuilder.java":"MODIFY"},"diff":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/HtmlLayoutBuilder.java":[{"add":["77","        return LayoutWrapper.adapt(HtmlLayout.newBuilder()"],"delete":["77","        return new LayoutWrapper(HtmlLayout.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/TTCCLayoutBuilder.java":[{"add":["124","        return LayoutWrapper.adapt(PatternLayout.newBuilder()"],"delete":["124","        return new LayoutWrapper(PatternLayout.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilder.java":[{"add":["86","        return LayoutWrapper.adapt(PatternLayout.newBuilder()"],"delete":["86","        return new LayoutWrapper(PatternLayout.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/AppenderAdapter.java":[{"add":["36","     * Adapts a Log4j 1.x appender into a Log4j 2.x appender. Applying this method","37","     * on the result of","38","     * {@link AppenderWrapper#adapt(org.apache.logging.log4j.core.Appender)} should","39","     * return the original Log4j 2.x appender.","40","     * ","41","     * @param appender a Log4j 1.x appender","42","     * @return a Log4j 2.x appender or {@code null} if the parameter is {@code null}","43","     *\/","44","    public static org.apache.logging.log4j.core.Appender adapt(Appender appender) {","45","        if (appender instanceof org.apache.logging.log4j.core.Appender) {","46","            return (org.apache.logging.log4j.core.Appender) appender;","47","        }","48","        if (appender instanceof AppenderWrapper) {","49","            return ((AppenderWrapper) appender).getAppender();","50","        }","51","        if (appender != null) {","52","            return new AppenderAdapter(appender).getAdapter();","53","        }","54","        return null;","55","    }","56","","57","    \/**","61","    private AppenderAdapter(Appender appender) {","63","        final org.apache.logging.log4j.core.Filter appenderFilter = FilterAdapter.adapt(appender.getFilter());"],"delete":["39","    public AppenderAdapter(Appender appender) {","41","        final org.apache.logging.log4j.core.Filter appenderFilter = FilterAdapter.convertFilter(appender.getFilter());"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/DailyRollingFileAppenderBuilder.java":[{"add":["141","        org.apache.logging.log4j.core.Layout<?> fileLayout = LayoutAdapter.adapt(layout);","157","        return AppenderWrapper.adapt(RollingFileAppender.newBuilder()"],"delete":["141","        org.apache.logging.log4j.core.Layout<?> fileLayout = null;","145","        if (layout instanceof LayoutWrapper) {","146","            fileLayout = ((LayoutWrapper) layout).getLayout();","147","        } else if (layout != null) {","148","            fileLayout = new LayoutAdapter(layout);","149","        }","162","        return new AppenderWrapper(RollingFileAppender.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/SyslogAppenderBuilder.java":[{"add":["129","        org.apache.logging.log4j.core.Layout<? extends Serializable> appenderLayout = LayoutAdapter.adapt(layout);","130","        if (appenderLayout == null) {","138","        return AppenderWrapper.adapt(SyslogAppender.newSyslogAppenderBuilder()"],"delete":["129","        org.apache.logging.log4j.core.Layout<? extends Serializable> appenderLayout;","130","        if (layout instanceof LayoutWrapper) {","131","            appenderLayout = ((LayoutWrapper) layout).getLayout();","132","        } else if (layout != null) {","133","            appenderLayout = new LayoutAdapter(layout);","134","        } else {","142","        return new AppenderWrapper(SyslogAppender.newSyslogAppenderBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/FileAppenderBuilder.java":[{"add":["127","        org.apache.logging.log4j.core.Layout<?> fileLayout = LayoutAdapter.adapt(layout);","136","        return AppenderWrapper.adapt(FileAppender.newBuilder()"],"delete":["127","        org.apache.logging.log4j.core.Layout<?> fileLayout = null;","131","        if (layout instanceof LayoutWrapper) {","132","            fileLayout = ((LayoutWrapper) layout).getLayout();","133","        } else if (layout != null) {","134","            fileLayout = new LayoutAdapter(layout);","135","        }","141","        return new AppenderWrapper(FileAppender.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/SocketAppenderBuilder.java":[{"add":["73","        org.apache.logging.log4j.core.Layout<?> actualLayout = LayoutAdapter.adapt(layout);","76","        return AppenderWrapper.adapt(SocketAppender.newBuilder()"],"delete":["73","        org.apache.logging.log4j.core.Layout<?> actualLayout = null;","74","        if (layout instanceof LayoutWrapper) {","75","            actualLayout = ((LayoutWrapper) layout).getLayout();","76","        } else if (layout != null) {","77","            actualLayout = new LayoutAdapter(layout);","78","        }","81","        return new AppenderWrapper(SocketAppender.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/AppenderWrapper.java":[{"add":["20","import org.apache.log4j.bridge.AppenderAdapter.Adapter;","38","     * Adapts a Log4j 2.x appender into a Log4j 1.x appender. Applying this method","39","     * on the result of {@link AppenderAdapter#adapt(Appender)} should return the","40","     * original Log4j 1.x appender.","41","     * ","42","     * @param appender a Log4j 2.x appender","43","     * @return a Log4j 1.x appender or {@code null} if the parameter is {@code null}","44","     *\/","45","    public static Appender adapt(org.apache.logging.log4j.core.Appender appender) {","46","        if (appender instanceof Appender) {","47","            return (Appender) appender;","48","        }","49","        if (appender instanceof Adapter) {","50","            Adapter adapter = (Adapter) appender;","51","            \/\/ Don't unwrap an appender with filters","52","            if (!adapter.hasFilter()) {","53","                return adapter.getAppender();","54","            }","55","        }","56","        if (appender != null) {","57","            return new AppenderWrapper(appender);","58","        }","59","        return null;","60","    }","61","","62","    \/**","83","            ((AbstractFilterable) appender).addFilter(FilterAdapter.adapt(newFilter));"],"delete":["57","            ((AbstractFilterable) appender).addFilter(FilterAdapter.convertFilter(newFilter));"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/XmlLayoutBuilder.java":[{"add":["73","        return LayoutWrapper.adapt(Log4j1XmlLayout.createLayout(locationInfo, properties));"],"delete":["73","        return new LayoutWrapper(Log4j1XmlLayout.createLayout(locationInfo, properties));"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/LevelMatchFilterBuilder.java":[{"add":["85","        return FilterWrapper.adapt(LevelMatchFilter.newBuilder()"],"delete":["85","        return new FilterWrapper(LevelMatchFilter.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/AbstractBuilder.java":[{"add":["85","        return FilterAdapter.adapt(head);"],"delete":["85","        return FilterAdapter.convertFilter(head);"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/config\/PropertiesConfiguration.java":[{"add":["459","            addAppender(AppenderAdapter.adapt(appender));","483","        addAppender(AppenderAdapter.adapt(appender));"],"delete":["459","            if (appender instanceof AppenderWrapper) {","460","                addAppender(((AppenderWrapper) appender).getAppender());","461","            } else {","462","                addAppender(new AppenderAdapter(appender).getAdapter());","463","            }","487","        if (appender instanceof AppenderWrapper) {","488","            addAppender(((AppenderWrapper) appender).getAppender());","489","        } else {","490","            addAppender(new AppenderAdapter(appender).getAdapter());","491","        }"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/xml\/XmlConfiguration.java":[{"add":["776","                    addAppender(AppenderAdapter.adapt(appender));"],"delete":["776","                    if (appender instanceof AppenderWrapper) {","777","                        addAppender(((AppenderWrapper) appender).getAppender());","778","                    } else {","779","                        addAppender(new AppenderAdapter(appender).getAdapter());","780","                    }"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/StringMatchFilterBuilder.java":[{"add":["89","        return FilterWrapper.adapt(StringMatchFilter.newBuilder()"],"delete":["89","        return new FilterWrapper(StringMatchFilter.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/FilterAdapter.java":[{"add":["32","     * Adapts a Log4j 1.x filter into a Log4j 2.x filter. Applying this method to","33","     * the result of","34","     * {@link FilterWrapper#adapt(org.apache.logging.log4j.core.Filter)} should","35","     * return the original Log4j 2.x filter.","37","     * @param filter a Log4j 1.x filter","38","     * @return a Log4j 2.x filter or {@code null} if the parameter is {@code null}","40","    public static org.apache.logging.log4j.core.Filter adapt(Filter filter) {","41","        if (filter instanceof org.apache.logging.log4j.core.Filter) {","42","            return (org.apache.logging.log4j.core.Filter) filter;","43","        }","44","        \/\/ Don't unwrap the head of a filter chain","47","        }","48","        if (filter != null) {","71","            composite = CompositeFilter.createFilters(new org.apache.logging.log4j.core.Filter[] {adapt(first)});","73","        return FilterWrapper.adapt(composite.addFilter(adapt(second)));","76","    private FilterAdapter(Filter filter) {"],"delete":["32","     * Converts a Log4j 1.x filter into a Log4j 2.x filter.","34","     * @param filter","35","     *            a Log4j 1.x filter","36","     * @return a Log4j 2.x filter","38","    public static org.apache.logging.log4j.core.Filter convertFilter(Filter filter) {","41","        } else if (filter != null) {","64","            composite = CompositeFilter.createFilters(new org.apache.logging.log4j.core.Filter[] {convertFilter(first)});","66","        return new FilterWrapper(composite.addFilter(convertFilter(second)));","69","    public FilterAdapter(Filter filter) {"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/FilterWrapper.java":[{"add":["29","    \/**","30","     * Adapts a Log4j 2.x filter into a Log4j 1.x filter. Applying this method to","31","     * the result of {@link FilterAdapter#adapt(Filter)} should return the original","32","     * Log4j 1.x filter.","33","     * ","34","     * @param filter a Log4j 2.x filter","35","     * @return a Log4j 1.x filter or {@code null} if the parameter is {@code null}","36","     *\/","37","    public static Filter adapt(org.apache.logging.log4j.core.Filter filter) {","38","        if (filter instanceof Filter) {","39","            return (Filter) filter;","40","        }","41","        if (filter instanceof FilterAdapter) {","42","            return ((FilterAdapter) filter).getFilter();","43","        }","44","        if (filter != null) {","45","            return new FilterWrapper(filter);","46","        }","47","        return null;","48","    }","49",""],"delete":[]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/LayoutAdapter.java":[{"add":["31","    \/**","32","     * Adapts a Log4j 1.x layout into a Log4j 2.x layout. Applying this method to","33","     * the result of","34","     * {@link LayoutWrapper#adapt(org.apache.logging.log4j.core.Layout)} should","35","     * return the original Log4j 2.x layout.","36","     * ","37","     * @param layout a Log4j 1.x layout","38","     * @return a Log4j 2.x layout or {@code null} if the parameter is {@code null}","39","     *\/","40","    public static org.apache.logging.log4j.core.Layout<?> adapt(Layout layout) {","41","        if (layout instanceof LayoutWrapper) {","42","            return ((LayoutWrapper) layout).getLayout();","43","        }","44","        if (layout != null) {","45","            return new LayoutAdapter(layout);","46","        }","47","        return null;","48","    }","49","","50","    private LayoutAdapter(Layout layout) {","54","    public Layout getLayout() {","55","        return layout;","56","    }"],"delete":["31","    public LayoutAdapter(Layout layout) {"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/ConsoleAppenderBuilder.java":[{"add":["132","        org.apache.logging.log4j.core.Layout<?> consoleLayout = LayoutAdapter.adapt(layout);","137","        return AppenderWrapper.adapt(ConsoleAppender.newBuilder()"],"delete":["132","        org.apache.logging.log4j.core.Layout<?> consoleLayout = null;","134","        if (layout instanceof LayoutWrapper) {","135","            consoleLayout = ((LayoutWrapper) layout).getLayout();","136","        } else if (layout != null) {","137","            consoleLayout = new LayoutAdapter(layout);","138","        }","142","        return new AppenderWrapper(ConsoleAppender.newBuilder()"]}],"log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/builders\/Log4j2ListAppenderBuilder.java":[{"add":["80","        final org.apache.logging.log4j.core.Layout<?> log4j2Layout = LayoutAdapter.adapt(layout);\r","81","        return AppenderWrapper.adapt(\r"],"delete":["80","        final org.apache.logging.log4j.core.Layout<?> log4j2Layout;\r","81","        if (layout instanceof LayoutWrapper) {\r","82","            log4j2Layout = ((LayoutWrapper) layout).getLayout();\r","83","        } else {\r","84","            log4j2Layout = layout != null ? new LayoutAdapter(layout) : null;\r","85","        }\r","86","        return new AppenderWrapper(\r"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/filter\/LevelRangeFilterBuilder.java":[{"add":["96","        return FilterWrapper.adapt(LevelRangeFilter.createFilter(min, max, onMatch,"],"delete":["96","        return new FilterWrapper(LevelRangeFilter.createFilter(min, max, onMatch,"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/RollingFileAppenderBuilder.java":[{"add":["143","        org.apache.logging.log4j.core.Layout<?> fileLayout = LayoutAdapter.adapt(layout);","159","        return AppenderWrapper.adapt(RollingFileAppender.newBuilder()"],"delete":["143","        org.apache.logging.log4j.core.Layout<?> fileLayout = null;","147","        if (layout instanceof LayoutWrapper) {","148","            fileLayout = ((LayoutWrapper) layout).getLayout();","149","        } else if (layout != null) {","150","            fileLayout = new LayoutAdapter(layout);","151","        }","164","        return new AppenderWrapper(RollingFileAppender.newBuilder()"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/Category.java":[{"add":["378","                addAppender(appender = AppenderWrapper.adapt(coreAppender));"],"delete":["378","                addAppender(appender = new AppenderWrapper(coreAppender));"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/bridge\/LayoutWrapper.java":[{"add":["29","     * Adapts a Log4j 2.x layout into a Log4j 1.x layout. Applying this method to","30","     * the result of {@link LayoutAdapter#adapt(Layout)} should return the original","31","     * Log4j 1.x layout.","32","     * ","33","     * @param layout a Log4j 2.x layout","34","     * @return a Log4j 1.x layout or {@code null} if the parameter is {@code null}","35","     *\/","36","    public static Layout adapt(org.apache.logging.log4j.core.Layout<?> layout) {","37","        if (layout instanceof LayoutAdapter) {","38","            return ((LayoutAdapter) layout).getLayout();","39","        }","40","        if (layout != null) {","41","            return new LayoutWrapper(layout);","42","        }","43","        return null;","44","    }","45","","46","    \/**"],"delete":[]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/NullAppenderBuilder.java":[{"add":["39","        return AppenderWrapper.adapt(NullAppender.createAppender(name));","46","        return AppenderWrapper.adapt(NullAppender.createAppender(name));"],"delete":["39","        return new AppenderWrapper(NullAppender.createAppender(name));","46","        return new AppenderWrapper(NullAppender.createAppender(name));"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/AsyncAppenderBuilder.java":[{"add":["148","        builder.setFilter(FilterAdapter.adapt(filter));","149","        return AppenderWrapper.adapt(builder.setName(name)"],"delete":["148","        builder.setFilter(FilterAdapter.convertFilter(filter));","149","        return new AppenderWrapper(builder.setName(name)"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/appender\/RewriteAppenderBuilder.java":[{"add":["144","        return AppenderWrapper.adapt(RewriteAppender.createAppender(name, \"true\", refs, configuration,"],"delete":["144","        return new AppenderWrapper(RewriteAppender.createAppender(name, \"true\", refs, configuration,"]}]}},"13d84dfa23bbc5960491acc935a97dd0fbf95fa0":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigDisruptor.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigDisruptor.java":[{"add":["216","        final ThreadFactory threadFactory = new Log4jThreadFactory(\"AsyncLoggerConfig\", true, Thread.NORM_PRIORITY) {"],"delete":["216","        final ThreadFactory threadFactory = new Log4jThreadFactory(\"AsyncLoggerConfig-\", true, Thread.NORM_PRIORITY) {"]}],"src\/changes\/changes.xml":[{"add":["98","      <action issue=\"LOG4J2-2336\" dev=\"ckozak\" type=\"fix\">","99","        Remove duplicate hypen from the AsyncLoggerConfig background thread name.","100","      <\/action>"],"delete":[]}]}},"f0123b1ddf236c2d1c0b23f005d0cf4f8e9dd6c5":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/MapMessageTest.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":[{"add":["202","        for (final Map.Entry<String, String> entry : map.entrySet()) {","213","        Object result = data.getValue(key);","214","        if (result == null) {","215","            return null;","216","        }","217","        return String.valueOf(result);","226","        final String result = get(key);","344","            sb.append(\"  <Entry key=\\\"\")","345","                    .append(data.getKeyAt(i))","346","                    .append(\"\\\">\")","347","                    .append(data.<Object>getValueAt(i))"],"delete":["202","        for (final Map.Entry<String, ?> entry : map.entrySet()) {","213","        return data.getValue(key);","222","        final String result = data.getValue(key);","340","            sb.append(\"  <Entry key=\\\"\").append(data.getKeyAt(i)).append(\"\\\">\").append((String)data.getValueAt(i))"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/MapMessageTest.java":[{"add":["20","import java.util.HashMap;","21","import java.util.Map;","22","","104","","105","    @Test","106","    public void testGetNonStringValue() {","107","        final String key = \"Key\";","108","        final MapMessage<?, Object> msg = new MapMessage<>()","109","                .with(key, 1L);","110","        assertEquals(\"1\", msg.get(key));","111","    }","112","","113","    @Test","114","    public void testRemoveNonStringValue() {","115","        final String key = \"Key\";","116","        final MapMessage<?, Object> msg = new MapMessage<>()","117","                .with(key, 1L);","118","        assertEquals(\"1\", msg.remove(key));","119","    }","120","","121","    @Test","122","    public void testJSONFormatNonStringValue() {","123","        final MapMessage<?, Object> msg = new MapMessage<>()","124","                .with(\"key\", 1L);","125","        final String result = msg.getFormattedMessage(new String[]{\"JSON\"});","126","        final String expected = \"{\\\"key\\\":\\\"1\\\"}\";","127","        assertEquals(expected, result);","128","    }","129","","130","    @Test","131","    public void testXMLFormatNonStringValue() {","132","        final MapMessage<?, Object> msg = new MapMessage<>()","133","                .with(\"key\", 1L);","134","        final String result = msg.getFormattedMessage(new String[]{\"XML\"});","135","        final String expected = \"<Map>\\n  <Entry key=\\\"key\\\">1<\/Entry>\\n<\/Map>\";","136","        assertEquals(expected, result);","137","    }"],"delete":[]}]}},"77f04501f73b5255e9993b1da8c57db54372a4aa":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["33","      <action issue=\"LOG4J2-3404\" dev=\"ckozak\" type=\"fix\" due-to=\"Piotr Karwasz\">","34","        Fix DefaultConfiguration leak in PatternLayout","35","      <\/action>"],"delete":[]}]}},"aebb1617cbf26154fe31faed0491766546f2271a":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AbstractAsyncExceptionHandler.java":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigErrorOnFormat.java":"ADD","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerDefaultExceptionHandler.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigDefaultExceptionHandler.java":"MODIFY","log4j-core\/src\/test\/resources\/AsyncLoggerConfigErrorOnFormat.xml":"ADD"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AbstractAsyncExceptionHandler.java":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigErrorOnFormat.java":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerDefaultExceptionHandler.java":[{"add":["21","public class AsyncLoggerDefaultExceptionHandler extends AbstractAsyncExceptionHandler<RingBufferLogEvent> {"],"delete":["18","import com.lmax.disruptor.ExceptionHandler;","19","","23","public class AsyncLoggerDefaultExceptionHandler implements ExceptionHandler<RingBufferLogEvent> {","24","","25","    @Override","26","    public void handleEventException(final Throwable throwable, final long sequence, final RingBufferLogEvent event) {","27","        final StringBuilder sb = new StringBuilder(512);","28","        sb.append(\"AsyncLogger error handling event seq=\").append(sequence).append(\", value='\");","29","        try {","30","            sb.append(event);","31","        } catch (final Exception ignored) {","32","            sb.append(\"[ERROR calling \").append(event.getClass()).append(\".toString(): \");","33","            sb.append(ignored).append(\"]\");","34","        }","35","        sb.append(\"':\");","36","        System.err.println(sb);","37","        throwable.printStackTrace();","38","    }","39","","40","    @Override","41","    public void handleOnStartException(final Throwable throwable) {","42","        System.err.println(\"AsyncLogger error starting:\");","43","        throwable.printStackTrace();","44","    }","45","","46","    @Override","47","    public void handleOnShutdownException(final Throwable throwable) {","48","        System.err.println(\"AsyncLogger error shutting down:\");","49","        throwable.printStackTrace();","50","    }"]}],"src\/changes\/changes.xml":[{"add":["92","      <action issue=\"LOG4J2-2333\" dev=\"ckozak\" type=\"fix\">","93","        Handle errors thrown in default disruptor ExceptionHandler implementations to avoid killing background threads.","94","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigDefaultExceptionHandler.java":[{"add":["22","        extends AbstractAsyncExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper> {"],"delete":["18","import com.lmax.disruptor.ExceptionHandler;","19","","24","        implements ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper> {","25","","26","    @Override","27","    public void handleEventException(final Throwable throwable, final long sequence,","28","            final AsyncLoggerConfigDisruptor.Log4jEventWrapper event) {","29","        final StringBuilder sb = new StringBuilder(512);","30","        sb.append(\"AsyncLogger error handling event seq=\").append(sequence).append(\", value='\");","31","        try {","32","            sb.append(event);","33","        } catch (final Exception ignored) {","34","            sb.append(\"[ERROR calling \").append(event.getClass()).append(\".toString(): \");","35","            sb.append(ignored).append(\"]\");","36","        }","37","        sb.append(\"':\");","38","        System.err.println(sb);","39","        throwable.printStackTrace();","40","    }","41","","42","    @Override","43","    public void handleOnStartException(final Throwable throwable) {","44","        System.err.println(\"AsyncLogger error starting:\");","45","        throwable.printStackTrace();","46","    }","47","","48","    @Override","49","    public void handleOnShutdownException(final Throwable throwable) {","50","        System.err.println(\"AsyncLogger error shutting down:\");","51","        throwable.printStackTrace();","52","    }"]}],"log4j-core\/src\/test\/resources\/AsyncLoggerConfigErrorOnFormat.xml":[{"add":[],"delete":[]}]}},"ee8fbff2a519bbfde79f3168b0001e7fe14ae828":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":[{"add":["276","","277","        @Override","278","        public String toString() {","279","            StringBuilder builder = new StringBuilder();","280","            builder.append(super.toString());","281","            builder.append(\"[action=\");","282","            builder.append(action);","283","            builder.append(\", manager=\");","284","            builder.append(manager);","285","            builder.append(\", isComplete()=\");","286","            builder.append(isComplete());","287","            builder.append(\", isInterrupted()=\");","288","            builder.append(isInterrupted());","289","            builder.append(\"]\");","290","            return builder.toString();","291","        }","338","","339","        @Override","340","        public String toString() {","341","            StringBuilder builder = new StringBuilder();","342","            builder.append(super.toString());","343","            builder.append(\"[pattern=\");","344","            builder.append(pattern);","345","            builder.append(\", append=\");","346","            builder.append(append);","347","            builder.append(\", bufferedIO=\");","348","            builder.append(bufferedIO);","349","            builder.append(\", bufferSize=\");","350","            builder.append(bufferSize);","351","            builder.append(\", policy=\");","352","            builder.append(policy);","353","            builder.append(\", strategy=\");","354","            builder.append(strategy);","355","            builder.append(\", advertiseURI=\");","356","            builder.append(advertiseURI);","357","            builder.append(\", layout=\");","358","            builder.append(layout);","359","            builder.append(\"]\");","360","            return builder.toString();","361","        }","413","                LOGGER.error(\"FileManager (\" + name + \") \" + ex, ex);"],"delete":["373","                LOGGER.error(\"FileManager (\" + name + \") \" + ex);"]}]}},"09175c8b6556fc1ffcfb9d51cfd12c5d7b21f419":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayout.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-259\" dev=\"ggregory\" type=\"fix\">","25","        HTML layout does not specify charset in content type.","26","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayout.java":[{"add":["210","        return \"text\/html; charset=\" + this.getCharset();"],"delete":["210","        return \"text\/html\";"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":[{"add":["26","import org.apache.logging.log4j.core.helpers.Charsets;","34","import static org.junit.Assert.assertEquals;","64","    @Test","65","    public void testContentType() throws Exception {","66","        final HTMLLayout layout = HTMLLayout.createLayout(\"true\", null, null, null, \"small\", null);","67","        assertEquals(\"text\/html; charset=UTF-8\", layout.getContentType());","68","    }","69","    ","70","    @Test","71","    public void testDefaultCharset() throws Exception {","72","        final HTMLLayout layout = HTMLLayout.createLayout(\"true\", null, null, null, \"small\", null);","73","        assertEquals(Charsets.UTF_8, layout.getCharset());","74","    }","75","    "],"delete":[]}]}},"b990e8f11fb395c41609a3df2e55fc879d3d66e4":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424LayoutTest.java":"MODIFY","api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessage.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424Layout.java":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAppender.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-263\" dev=\"rgoers\" type=\"fix\">","25","        Do not allow a charset on RFC5424Layout - use UTF-8.","26","      <\/action>"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424LayoutTest.java":[{"add":["83","            null, null, \"true\", null, \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", null, null);","147","            null, null, \"true\", \"#012\", \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", null, null);","210","            null, null, \"true\", null, \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", \"%xEx\", null);"],"delete":["83","            null, null, \"true\", null, \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", null, null, null);","147","            null, null, \"true\", \"#012\", \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", null, null, null);","210","            null, null, \"true\", null, \"ATM\", null, \"key1, key2, locale\", null, \"loginId\", null, \"%xEx\", null);"]}],"api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessage.java":[{"add":["23"," * Represents a Message that conforms to an RFC 5424 StructuredData element along with the syslog message.","24"," *","191","        validateKey(key);","192","    }","193","","194","    private void validateKey(final String key) {","196","            throw new IllegalArgumentException(\"Structured data keys are limited to 32 characters. key: \" + key);","197","        }","198","        char[] chars = key.toCharArray();","199","        for (char c : chars) {","200","            if (c < 33 || c > 126 || c == '=' || c == ']' || c == '\"') {","201","                throw new IllegalArgumentException(\"Structured data keys must contain printable US ASCII characters and may not contain a space, =, ], or \\\"\");","202","            }"],"delete":["23"," * Represents a Message that conforms to RFC 5424.","24"," * ","192","            throw new IllegalArgumentException(\"Structured data keys are limited to 32 characters. key: \" + key +","193","                \" value: \" + value);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":[{"add":["125","                escapeNL, appName, msgId, excludes, includes, required, exceptionPattern, config) :"],"delete":["125","                escapeNL, appName, msgId, excludes, includes, required, charsetName, exceptionPattern, config) :"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424Layout.java":[{"add":["52"," *","520","        final Charset charset = Charsets.UTF_8;"],"delete":["52"," * ","499","     * @param charsetName The character set.","519","                                             @PluginAttr(\"charset\") final String charsetName,","522","        final Charset charset = Charsets.getSupportedCharset(charsetName);"]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAppender.java":[{"add":["200","                    null, null, null, excludes, includes, required, null, null, null);"],"delete":["200","                    null, null, null, excludes, includes, required, null, null, null, null);"]}]}},"de4e5dd1a902469cd6b3e5a5975af0d7eb4647e8":{"changes":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/PropertyConfigurator.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/UrlConnectionFactoryTest.java":"MODIFY","log4j-core\/src\/test\/resources\/jarfile.jar":"ADD","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationFactory.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationSourceTest.java":"MODIFY","log4j-core\/src\/test\/resources\/jarfile\/config\/console.xml":"ADD","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/xml\/DOMConfigurator.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/NetUtilsTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationSource.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/HttpWatcher.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/UrlConnectionFactory.java":"MODIFY"},"diff":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/PropertyConfigurator.java":[{"add":["49","import org.apache.logging.log4j.core.net.UrlConnectionFactory;","384","            final URLConnection urlConnection = UrlConnectionFactory.createConnection(url);"],"delete":["383","            final URLConnection urlConnection = url.openConnection();","384","            \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","385","            urlConnection.setUseCaches(false);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/UrlConnectionFactoryTest.java":[{"add":["18","import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;","19","import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;","20","import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;","21","import static javax.servlet.http.HttpServletResponse.SC_NOT_MODIFIED;","22","import static javax.servlet.http.HttpServletResponse.SC_OK;","23","import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;","24","import static org.junit.jupiter.api.Assertions.assertEquals;","25","import static org.junit.jupiter.api.Assertions.assertNotNull;","26","import static org.junit.jupiter.api.Assertions.assertNull;","27","import static org.junit.jupiter.api.Assertions.assertTrue;","28","import static org.junit.jupiter.api.Assertions.fail;","29","","33","import java.lang.management.ManagementFactory;","34","import java.lang.management.OperatingSystemMXBean;","37","import java.net.URL;","41","","42","import javax.servlet.ServletException;","43","import javax.servlet.http.HttpServletRequest;","44","import javax.servlet.http.HttpServletResponse;","49","import org.apache.logging.log4j.core.util.FileUtils;","59","import org.junit.jupiter.api.condition.EnabledOnOs;","60","import org.junit.jupiter.api.condition.OS;","62","import com.sun.management.UnixOperatingSystemMXBean;","122","        is.close();","125","        assertEquals(SC_NOT_MODIFIED, result,\"File was modified\");","131","        assertEquals(SC_OK, result,\"File was not modified\");","143","            return SC_INTERNAL_SERVER_ERROR;","147","    @Test","148","    public void testNoJarFileLeak() throws Exception {","149","        final URL url = new File(\"target\/test-classes\/jarfile.jar\").toURI().toURL();","150","        \/\/ Retrieve using 'file:'","151","        URL jarUrl = new URL(\"jar:\" + url.toString() + \"!\/config\/console.xml\");","152","        long expected = getOpenFileDescriptorCount();","153","        UrlConnectionFactory.createConnection(jarUrl).getInputStream().close();","154","        assertEquals(expected, getOpenFileDescriptorCount());","155","        \/\/ Retrieve using 'http:'","156","        jarUrl = new URL(\"jar:http:\/\/localhost:\" + port + \"\/jarfile.jar!\/config\/console.xml\");","157","        final File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));","158","        expected = tmpDir.list().length;","159","        UrlConnectionFactory.createConnection(jarUrl).getInputStream().close();","160","        assertEquals(expected, tmpDir.list().length, \"File descriptor leak\");","161","    }","162","","163","    private long getOpenFileDescriptorCount() {","164","        final OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();","165","        if (os instanceof UnixOperatingSystemMXBean) {","166","            return ((UnixOperatingSystemMXBean) os).getOpenFileDescriptorCount();","167","        }","168","        return 0L;","169","    }","170","","180","                response.sendError(SC_UNAUTHORIZED, \"No Auth header\");","188","                    response.sendError(SC_UNAUTHORIZED, \"Invalid credentials\");","192","            final String servletPath = request.getServletPath();","193","            if (servletPath != null) {","194","                final File file = new File(\"target\/test-classes\" + servletPath);","195","                if (!file.exists()) {","196","                    response.sendError(SC_NOT_FOUND);","197","                    return;","198","                }","203","                    response.setStatus(SC_NOT_MODIFIED);","210","                response.setStatus(SC_OK);","212","                response.sendError(SC_BAD_REQUEST, \"Unsupported request\");"],"delete":["18","import javax.servlet.ServletException;","19","import javax.servlet.http.HttpServletRequest;","20","import javax.servlet.http.HttpServletResponse;","29","import java.util.Properties;","40","","45","import static org.junit.jupiter.api.Assertions.assertEquals;","46","import static org.junit.jupiter.api.Assertions.assertNotNull;","47","import static org.junit.jupiter.api.Assertions.assertNull;","48","import static org.junit.jupiter.api.Assertions.assertTrue;","49","import static org.junit.jupiter.api.Assertions.fail;","62","    private static final int NOT_MODIFIED = 304;","63","    private static final int NOT_AUTHORIZED = 401;","64","    private static final int OK = 200;","114","        assertEquals(NOT_MODIFIED, result,\"File was modified\");","120","        assertEquals(OK, result,\"File was not modified\");","132","            return 500;","145","                response.sendError(401, \"No Auth header\");","153","                    response.sendError(401, \"Invalid credentials\");","157","            if (request.getServletPath().equals(\"\/log4j2-config.xml\")) {","158","                File file = new File(\"target\/test-classes\/log4j2-config.xml\");","163","                    response.setStatus(304);","170","                response.setStatus(200);","172","                response.sendError(400, \"Unsupported request\");"]}],"log4j-core\/src\/test\/resources\/jarfile.jar":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationFactory.java":[{"add":["18","import java.io.UnsupportedEncodingException;","19","import java.net.URI;","20","import java.net.URISyntaxException;","21","import java.net.URLDecoder;","22","import java.util.ArrayList;","23","import java.util.Collection;","24","import java.util.Collections;","25","import java.util.List;","26","import java.util.Map;","27","import java.util.concurrent.locks.Lock;","28","import java.util.concurrent.locks.ReentrantLock;","29","","350","    @Deprecated","352","        return ConfigurationSource.fromUri(NetUtils.toURI(config));"],"delete":["28","import org.apache.logging.log4j.core.net.UrlConnectionFactory;","31","import org.apache.logging.log4j.core.util.FileUtils;","40","import java.io.File;","41","import java.io.FileInputStream;","42","import java.io.FileNotFoundException;","43","import java.io.UnsupportedEncodingException;","44","import java.net.URI;","45","import java.net.URISyntaxException;","46","import java.net.URL;","47","import java.net.URLConnection;","48","import java.net.URLDecoder;","49","import java.util.ArrayList;","50","import java.util.Collection;","51","import java.util.Collections;","52","import java.util.List;","53","import java.util.Map;","54","import java.util.concurrent.locks.Lock;","55","import java.util.concurrent.locks.ReentrantLock;","56","","358","        try {","359","            final URL url = new URL(config);","360","            URLConnection urlConnection = UrlConnectionFactory.createConnection(url);","361","            File file = FileUtils.fileFromUri(url.toURI());","362","            if (file != null) {","363","                return new ConfigurationSource(urlConnection.getInputStream(), FileUtils.fileFromUri(url.toURI()));","364","            }","365","            return new ConfigurationSource(urlConnection.getInputStream(), url, urlConnection.getLastModified());","366","        } catch (final Exception ex) {","367","            final ConfigurationSource source = ConfigurationSource.fromResource(config, loader);","368","            if (source == null) {","369","                try {","370","                    final File file = new File(config);","371","                    return new ConfigurationSource(new FileInputStream(file), file);","372","                } catch (final FileNotFoundException fnfe) {","373","                    \/\/ Ignore the exception","374","                    LOGGER.catching(Level.DEBUG, fnfe);","375","                }","376","            }","377","            return source;","378","        }"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationSourceTest.java":[{"add":["19","import static org.junit.jupiter.api.Assertions.assertEquals;","20","import static org.junit.jupiter.api.Assertions.assertNotNull;","21","import static org.junit.jupiter.api.Assertions.fail;","24","import java.io.File;","25","import java.io.IOException;","26","import java.lang.management.ManagementFactory;","27","import java.lang.management.OperatingSystemMXBean;","28","import java.net.URL;","29","import java.nio.file.Files;","30","import java.nio.file.Path;","31","import java.nio.file.Paths;","33","import org.apache.logging.log4j.core.net.UrlConnectionFactory;","34","import org.junit.jupiter.api.Test;","35","","36","import com.sun.management.UnixOperatingSystemMXBean;","45","","46","    \/**","47","     * Checks if the usage of 'jar:' URLs does not increase the file descriptor","48","     * count and the jar file can be deleted.","49","     * ","50","     * @throws Exception","51","     *\/","52","    @Test","53","    public void testNoJarFileLeak() throws Exception {","54","        final Path original = Paths.get(\"target\", \"test-classes\", \"jarfile.jar\");","55","        final Path copy = Paths.get(\"target\", \"test-classes\", \"jarfile-copy.jar\");","56","        Files.copy(original, copy);","57","        final URL jarUrl = new URL(\"jar:\" + copy.toUri().toURL() + \"!\/config\/console.xml\");","58","        final long expected = getOpenFileDescriptorCount();","59","        UrlConnectionFactory.createConnection(jarUrl).getInputStream().close();","60","        \/\/ This can only fail on UNIX","61","        assertEquals(expected, getOpenFileDescriptorCount());","62","        \/\/ This can only fail on Windows","63","        try {","64","            Files.delete(copy);","65","        } catch (IOException e) {","66","            fail(e);","67","        }","68","    }","69","","70","    private long getOpenFileDescriptorCount() {","71","        final OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();","72","        if (os instanceof UnixOperatingSystemMXBean) {","73","            return ((UnixOperatingSystemMXBean) os).getOpenFileDescriptorCount();","74","        }","75","        return 0L;","76","    }"],"delete":["19","import org.junit.jupiter.api.Test;","23","import static org.junit.jupiter.api.Assertions.assertNotNull;"]}],"log4j-core\/src\/test\/resources\/jarfile\/config\/console.xml":[{"add":[],"delete":[]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/xml\/DOMConfigurator.java":[{"add":["41","import org.apache.logging.log4j.core.net.UrlConnectionFactory;","147","            final URLConnection connection = UrlConnectionFactory.createConnection(url);"],"delete":["146","            final URLConnection connection = url.openConnection();","147","            \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","148","            connection.setUseCaches(false);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/NetUtilsTest.java":[{"add":["19","import static org.junit.jupiter.api.Assertions.assertEquals;\r","20","import static org.junit.jupiter.api.Assertions.assertNotNull;\r","21","\r","22","import java.io.File;\r","23","import java.net.URI;\r","24","\r","34","        URI uri = NetUtils.toURI(config);\r","38","\r","39","        final String properUriPath = \"\/path\/without\/spaces\";\r","40","        uri = NetUtils.toURI(properUriPath);\r","41","\r","42","        assertNotNull(uri, \"The URI should not be null.\");\r","43","        assertEquals(properUriPath, uri.toString(), \"The URI is not correct.\");\r","44","    }\r","45","\r","46","    @Test\r","47","    public void testToUriUnixWithSpaces() {\r","48","        final String pathWithSpaces = \"\/ path \/ with \/ spaces\";\r","49","        final URI uri = NetUtils.toURI(pathWithSpaces);\r","50","\r","51","        assertNotNull(uri, \"The URI should not be null.\");\r","52","        assertEquals(new File(pathWithSpaces).toURI().toString(), uri.toString(), \"The URI is not correct.\");\r"],"delete":["23","import java.net.URI;\r","24","\r","25","import static org.junit.jupiter.api.Assertions.assertEquals;\r","26","import static org.junit.jupiter.api.Assertions.assertNotNull;\r","27","\r","33","        final URI uri = NetUtils.toURI(config);\r"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationSource.java":[{"add":["341","            return getConfigurationSource(configLocation.toURL());","365","            URLConnection urlConnection = UrlConnectionFactory.createConnection(url);"],"delete":["341","            URL url = configLocation.toURL();","342","            URLConnection urlConnection = UrlConnectionFactory.createConnection(url);","343","            InputStream is = urlConnection.getInputStream();","344","            long lastModified = urlConnection.getLastModified();","345","            return new ConfigurationSource(is, configLocation.toURL(), lastModified);","346","        } catch (final FileNotFoundException ex) {","347","            ConfigurationFactory.LOGGER.warn(\"Could not locate file {}\", configLocation.toString());","350","        } catch (final Exception ex) {","351","            ConfigurationFactory.LOGGER.error(\"Unable to access {}\", configLocation.toString(), ex);","372","            URLConnection urlConnection = url.openConnection();","373","            \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","374","            urlConnection.setUseCaches(false);","375","            AuthorizationProvider provider = ConfigurationFactory.authorizationProvider(PropertiesUtil.getProperties());","376","            provider.addAuthorization(urlConnection);","377","            if (url.getProtocol().equals(HTTPS)) {","378","                SslConfiguration sslConfiguration = SslConfigurationFactory.getSslConfiguration();","379","                if (sslConfiguration != null) {","380","                    ((HttpsURLConnection) urlConnection).setSSLSocketFactory(sslConfiguration.getSslSocketFactory());","381","                    if (!sslConfiguration.isVerifyHostName()) {","382","                        ((HttpsURLConnection) urlConnection).setHostnameVerifier(LaxHostnameVerifier.INSTANCE);","383","                    }","384","                }","385","            }"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/HttpWatcher.java":[{"add":["137","            } finally {","138","                urlConnection.disconnect();"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/UrlConnectionFactory.java":[{"add":["20","import java.net.JarURLConnection;","108","            if (urlConnection instanceof JarURLConnection) {","109","                \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","110","                urlConnection.setUseCaches(false);","111","            }"],"delete":["79","        \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","80","        urlConnection.setUseCaches(false);","109","            \/\/ A \"jar:\" URL file remains open after the stream is closed, so do not cache it.","110","            urlConnection.setUseCaches(false);","115",""]}]}},"8faf7f77446f4d5169ed52d5509d4c8e0dd18654":{"changes":{"flume-ng\/src\/test\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentAppenderTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEvent.java":"MODIFY"},"diff":{"flume-ng\/src\/test\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentAppenderTest.java":[{"add":["31","import org.apache.logging.log4j.Marker;","32","import org.apache.logging.log4j.MarkerManager;","219","","220","    @Test","221","    public void testSingle() throws InterruptedException, IOException {","222","","223","        Logger logger = LogManager.getLogger(\"EventLogger\");","224","        Marker marker = MarkerManager.getMarker(\"EVENT\");","225","        logger.info(marker, \"This is a test message\");","226","","227","        final Event event = primary.poll();","228","        Assert.assertNotNull(event);","229","        final String body = getBody(event);","230","        Assert.assertTrue(\"Channel contained event, but not expected message. Received: \" + body,","231","            body.endsWith(\"This is a test message\"));","232","    }"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-268\" dev=\"rgoers\" type=\"fix\">","25","        Add guid to FlumeEvent headers for non-Map Messages.","26","      <\/action>"],"delete":[]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEvent.java":[{"add":["130","            \/\/ Add the guid to the Map so that it can be included in the Layout.","136","        } else {","137","            headers.put(GUID, guid);"],"delete":[]}]}},"d4df900cab07c0e1c370a3daaada1057720c2179":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/util\/ResolverUtil.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/util\/ResolverUtil.java":[{"add":["245","        return URLDecoder.decode(urlPath, Constants.UTF_8.name());"],"delete":["245","        urlPath = URLDecoder.decode(urlPath, Constants.UTF_8.name());","246","        return urlPath;"]}]}},"48ab5e97e52a35676a90742732b247d1efb2f374":{"changes":{"\/dev\/null":"DELETE","src\/site\/xdoc\/manual\/configuration.xml.vm":"MODIFY","log4j-spring-boot\/src\/main\/java\/org\/apache\/logging\/log4j\/spring\/boot\/Log4j2CloudConfigLoggingSystem.java":"MODIFY","log4j-spring-boot\/src\/test\/java\/org\/apache\/logging\/log4j\/spring\/boot\/Log4j2CloudConfigLoggingSystemTest.java":"MODIFY","log4j-spring-boot\/src\/main\/resources\/META-INF\/spring.factories":"ADD"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"src\/site\/xdoc\/manual\/configuration.xml.vm":[{"add":["2880","    <tr>","2881","    <td><a name=\"log4j2.disableCloudConfigLoggingSystem\"\/>log4j2.disableCloudConfigLoggingSystem<\/td>","2882","    <td><\/td>","2883","    <td><\/td>","2884","    <td>Disables the usage of the Spring Boot <tt>Log4j2CloudConfigLoggingSystem<\/tt>. Defaults to <tt>false<\/tt>.<\/td>","2885","  <\/tr>"],"delete":[]}],"log4j-spring-boot\/src\/main\/java\/org\/apache\/logging\/log4j\/spring\/boot\/Log4j2CloudConfigLoggingSystem.java":[{"add":["51","import org.springframework.boot.logging.LoggingSystem;","52","import org.springframework.boot.logging.LoggingSystemFactory;","54","import org.springframework.core.annotation.Order;","63","","64","    \/**","65","     * Property that disables the usage of this {@link LoggingSystem}.","66","     *\/","67","    public static final String LOG4J2_DISABLE_CLOUD_CONFIG_LOGGING_SYSTEM = \"log4j2.disableCloudConfigLoggingSystem\";","68","","70","    private static final String HTTPS = \"https\";","73","    private static final int PRECEDENCE = 0;","225","","226","    @Order(PRECEDENCE)","227","    public static class Factory implements LoggingSystemFactory {","228","","229","        @Override","230","        public LoggingSystem getLoggingSystem(ClassLoader classLoader) {","231","            if (PropertiesUtil.getProperties().getBooleanProperty(LOG4J2_DISABLE_CLOUD_CONFIG_LOGGING_SYSTEM)) {","232","                return null;","233","            }","234","            return new Log4j2CloudConfigLoggingSystem(classLoader);","235","        }","236","","237","    }","238",""],"delete":["60","    private static final String HTTPS = \"https\";"]}],"log4j-spring-boot\/src\/test\/java\/org\/apache\/logging\/log4j\/spring\/boot\/Log4j2CloudConfigLoggingSystemTest.java":[{"add":["21","import org.junit.jupiter.api.Test;","22","import org.junitpioneer.jupiter.SetSystemProperty;","23","import org.springframework.boot.logging.LoggingSystem;","24","import org.springframework.boot.logging.log4j2.Log4J2LoggingSystem;","25","","26","import static org.junit.jupiter.api.Assertions.assertTrue;","36","        LoggerContext lc = LogManager.getContext(); \/\/ Initialize LogManager to here to prevent a failure trying to","37","                                                    \/\/ initialize it from StatusLogger.","39","        Log4j2CloudConfigLoggingSystem cloudLoggingSystem = new Log4j2CloudConfigLoggingSystem(","40","                this.getClass().getClassLoader());","45","","46","    @Test","47","    @SetSystemProperty(key = Log4j2CloudConfigLoggingSystem.LOG4J2_DISABLE_CLOUD_CONFIG_LOGGING_SYSTEM, value = \"true\")","48","    public void testUseLog4j2LoggingSystem() {","49","        LoggingSystem loggingSystem = LoggingSystem.get(getClass().getClassLoader());","50","        assertTrue(loggingSystem.getClass().equals(Log4J2LoggingSystem.class));","51","    }","52","","53","    @Test","54","    public void testLoggingSystemEnabled() {","55","        LoggingSystem loggingSystem = LoggingSystem.get(getClass().getClassLoader());","56","        assertTrue(loggingSystem.getClass().equals(Log4j2CloudConfigLoggingSystem.class));","57","    }"],"delete":["21","import org.junit.Test;","26","import static org.junit.Assert.assertTrue;","27","","33","        LoggerContext lc = LogManager.getContext(); \/\/ Initialize LogManager to here to prevent a failure trying to initialize it from StatusLogger.","35","        Log4j2CloudConfigLoggingSystem cloudLoggingSystem = new Log4j2CloudConfigLoggingSystem(this.getClass().getClassLoader());"]}],"log4j-spring-boot\/src\/main\/resources\/META-INF\/spring.factories":[{"add":[],"delete":[]}]}},"c6f0af20b73b63fbbf1758b0338de154920922d7":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-485\" dev=\"rpopma\" type=\"fix\">","24","        Fixed issue where toString methods that perform logging could deadlock AsyncAppender.","25","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":[{"add":["64","    private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<Boolean>();","125","     * @param evt The LogEvent.","128","    public void append(final LogEvent evt) {","132","        if (!(evt instanceof Log4jLogEvent)) {","133","            return; \/\/ only know how to Serialize Log4jLogEvents","134","        }","135","        Log4jLogEvent event = (Log4jLogEvent) evt;","136","        boolean appendSuccessful = false;","137","        if (blocking) {","138","            if (isAppenderThread.get() == Boolean.TRUE && queue.remainingCapacity() == 0) {","139","                \/\/ LOG4J2-485: avoid deadlock that would result from trying","140","                \/\/ to add to a full queue from appender thread","141","                event.setEndOfBatch(false); \/\/ queue is definitely not empty!","142","                appendSuccessful = thread.callAppenders(event);","143","            } else {","146","                    queue.put(Log4jLogEvent.serialize(event, includeLocation));","153","        } else {","154","            appendSuccessful = queue.offer(Log4jLogEvent.serialize(event, includeLocation));","155","            if (!appendSuccessful) {","156","                error(\"Appender \" + getName() + \" is unable to write primary appenders. queue is full\");","159","        if ((!appendSuccessful) && (errorAppender != null)) {","160","            errorAppender.callAppender(event);","161","        }","223","            isAppenderThread.set(Boolean.TRUE); \/\/ LOG4J2-485","238","                boolean success = callAppenders(event);","254","                        callAppenders(event);","262","        \/**","263","         * Calls {@link AppenderControl#callAppender(LogEvent) callAppender} on","264","         * all registered {@code AppenderControl} objects, and returns {@code true}","265","         * if at least one appender call was successful, {@code false} otherwise.","266","         * Any exceptions are silently ignored.","267","         * ","268","         * @param event the event to forward to the registered appenders","269","         * @return {@code true} if at least one appender call succeeded, {@code false} otherwise","270","         *\/","271","        boolean callAppenders(final Log4jLogEvent event) {","272","            boolean success = false;","273","            for (final AppenderControl control : appenders) {","274","                try {","275","                    control.callAppender(event);","276","                    success = true;","277","                } catch (final Exception ex) {","278","                    \/\/ If no appender is successful the error appender will get it.","279","                }","280","            }","281","            return success;","282","        }","283",""],"delete":["124","     * @param event The LogEvent.","127","    public void append(final LogEvent event) {","131","        if (event instanceof Log4jLogEvent) {","132","            boolean appendSuccessful = false;","133","            if (blocking) {","136","                    queue.put(Log4jLogEvent.serialize((Log4jLogEvent) event, includeLocation));","142","            } else {","143","                appendSuccessful = queue.offer(Log4jLogEvent.serialize((Log4jLogEvent) event, includeLocation));","144","                if (!appendSuccessful) {","145","                    error(\"Appender \" + getName() + \" is unable to write primary appenders. queue is full\");","146","                }","148","            if ((!appendSuccessful) && (errorAppender != null)) {","149","                errorAppender.callAppender(event);","227","                boolean success = false;","228","                for (final AppenderControl control : appenders) {","229","                    try {","230","                        control.callAppender(event);","231","                        success = true;","232","                    } catch (final Exception ex) {","233","                        \/\/ If no appender is successful the error appender will get it.","234","                    }","235","                }","251","                        for (final AppenderControl control : appenders) {","252","                            control.callAppender(event);","253","                        }"]}]}},"303045d1602bd2bd73cf6a1e60026830369389ba":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/YamlLayout.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XmlLayout.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayoutTest.java":"MODIFY","log4j-core\/revapi.json":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayout.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractJacksonLayout.java":"MODIFY","src\/site\/xdoc\/manual\/layouts.xml.vm":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/YamlLayout.java":[{"add":["69","                    isCompact(), getEventEol(), getEndOfLine(), headerPattern, footerPattern, getCharset(),","83","                charset, compact, complete, eventEol, null,","90","                       final boolean complete, final boolean compact, final boolean eventEol, final String endOfLine,","96","                charset, compact, complete, eventEol, endOfLine,","187","        return new YamlLayout(config, locationInfo, properties, false, false, true, null, headerPattern, footerPattern,","202","        return new YamlLayout(new DefaultConfiguration(), false, false, false, false, false, null, DEFAULT_HEADER,"],"delete":["69","                    isCompact(), getEventEol(), headerPattern, footerPattern, getCharset(),","83","                charset, compact, complete, eventEol,","90","                       final boolean complete, final boolean compact, final boolean eventEol,","96","                charset, compact, complete, eventEol,","187","        return new YamlLayout(config, locationInfo, properties, false, false, true, headerPattern, footerPattern,","202","        return new YamlLayout(new DefaultConfiguration(), false, false, false, false, false, DEFAULT_HEADER,"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XmlLayout.java":[{"add":["77","                    isCompact(), getEndOfLine(), getCharset(), isIncludeStacktrace(), isStacktraceAsString(),","88","        this(null, locationInfo, properties, complete, compact, null, charset, includeStacktrace, false, false, null);","92","                      final boolean complete, final boolean compact, final String endOfLine, final Charset charset,","98","            charset, compact, complete, false, endOfLine, null, null, includeNullDelimiter,","190","        return new XmlLayout(null, locationInfo, properties, complete, compact, null, charset, includeStacktrace, false,","205","        return new XmlLayout(null, false, false, false, false, null, StandardCharsets.UTF_8, true, false, false, null);"],"delete":["77","                    isCompact(), getCharset(), isIncludeStacktrace(), isStacktraceAsString(),","88","        this(null, locationInfo, properties, complete, compact, charset, includeStacktrace, false, false, null);","92","                      final boolean complete, final boolean compact, final Charset charset,","98","            charset, compact, complete, false, null, null, includeNullDelimiter,","190","        return new XmlLayout(null, locationInfo, properties, complete, compact, charset, includeStacktrace, false,","205","        return new XmlLayout(null, false, false, false, false, StandardCharsets.UTF_8, true, false, false, null);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayoutTest.java":[{"add":["135","            final String endOfLine, final boolean includeContext, final boolean contextMapAslist, final boolean includeStacktrace)","146","                .setEndOfLine(endOfLine)","153","        if (endOfLine == null) {","154","            \/\/ Just check for \\n since \\r might or might not be there.","155","            assertEquals(str, !compact || eventEol, str.contains(\"\\n\"));","156","        }","157","        else {","158","            assertEquals(str, !compact || eventEol, str.contains(endOfLine));","159","            assertEquals(str, compact && eventEol, str.endsWith(endOfLine));","160","        }","163","","463","        this.testAllFeatures(false, false, false, null, false, false, true);","468","        this.testAllFeatures(true, true, false, null, true, false, true);","473","        this.testAllFeatures(true, true, true, null, true, false, true);","478","        this.testAllFeatures(true, true, true, null, true, true, true);","483","        this.testAllFeatures(false, false, false, null, false, false, false);","484","    }","485","","486","    @Test","487","    public void testLocationOnCustomEndOfLine() throws Exception {","488","        this.testAllFeatures(true, true, true, \"CUSTOM_END_OF_LINE\", true, false, true);"],"delete":["135","            final boolean includeContext, final boolean contextMapAslist, final boolean includeStacktrace)","152","        \/\/ Just check for \\n since \\r might or might not be there.","153","        assertEquals(str, !compact || eventEol, str.contains(\"\\n\"));","455","        this.testAllFeatures(false, false, false, false, false, true);","460","        this.testAllFeatures(true, true, false, true, false, true);","465","        this.testAllFeatures(true, true, true, true, false, true);","470","        this.testAllFeatures(true, true, true, true, true, true);","475","        this.testAllFeatures(false, false, false, false, false, false);"]}],"log4j-core\/revapi.json":[{"add":["79","      },","80","      {","81","        \"code\": \"java.method.numberOfParametersChanged\",","82","        \"old\": \"method void org.apache.logging.log4j.core.layout.JsonLayout::<init>(org.apache.logging.log4j.core.config.Configuration, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String, java.lang.String, java.nio.charset.Charset, boolean)\",","83","        \"new\": \"method void org.apache.logging.log4j.core.layout.JsonLayout::<init>(org.apache.logging.log4j.core.config.Configuration, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.Charset, boolean)\",","84","        \"justification\": \"LOG4J2-2337 - Allow to specify custom end-of-line for JSON layout\""],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayout.java":[{"add":["99","                    isComplete(), isCompact(), getEventEol(), getEndOfLine(), headerPattern, footerPattern, getCharset(),","140","            final boolean complete, final boolean compact, final boolean eventEol, final String endOfLine,final String headerPattern,","144","                charset, compact, complete, eventEol, endOfLine,","152","                       final boolean complete, final boolean compact, final boolean eventEol, final String endOfLine,","159","                charset, compact, complete, eventEol, endOfLine,","267","                null, headerPattern, footerPattern, charset, includeStacktrace, false, false, null, false);","281","        return new JsonLayout(new DefaultConfiguration(), false, false, false, false, false, false, null,"],"delete":["99","                    isComplete(), isCompact(), getEventEol(), headerPattern, footerPattern, getCharset(),","140","            final boolean complete, final boolean compact, final boolean eventEol, final String headerPattern,","144","                charset, compact, complete, eventEol,","152","                       final boolean complete, final boolean compact, final boolean eventEol,","159","                charset, compact, complete, eventEol,","267","                headerPattern, footerPattern, charset, includeStacktrace, false, false, null, false);","281","        return new JsonLayout(new DefaultConfiguration(), false, false, false, false, false, false,"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractJacksonLayout.java":[{"add":["54","        private String endOfLine;","55","","56","        @PluginBuilderAttribute","88","        public String getEndOfLine() {","89","            return endOfLine;","90","        }","91","","131","        public B setEndOfLine(final String endOfLine) {","132","            this.endOfLine = endOfLine;","133","            return asBuilder();","134","        }","135","","215","        this(config, objectWriter, charset, compact, complete, eventEol, null, headerSerializer, footerSerializer, includeNullDelimiter, null);","219","            final boolean compact, final boolean complete, final boolean eventEol, final String endOfLine, final Serializer headerSerializer,","226","        this.eol = endOfLine != null ? endOfLine : compact && !eventEol ? COMPACT_EOL : DEFAULT_EOL;"],"delete":["203","        this(config, objectWriter, charset, compact, complete, eventEol, headerSerializer, footerSerializer, includeNullDelimiter, null);","207","            final boolean compact, final boolean complete, final boolean eventEol, final Serializer headerSerializer,","214","        this.eol = compact && !eventEol ? COMPACT_EOL : DEFAULT_EOL;"]}],"src\/site\/xdoc\/manual\/layouts.xml.vm":[{"add":["431","              <td>endOfLine<\/td>","432","              <td>String<\/td>","433","              <td>","434","                If set, overrides the default end-of-line string. E.g. set it to \"\\n\" and use with eventEol=true and compact=true","435","                to have one record per line separated by \"\\n\" instead of \"\\r\\n\". Defaults to null (i.e. not set).","436","              <\/td>","437","            <\/tr>","438","            <tr>"],"delete":[]}]}},"a86ec05ce8f39c6591343e77f1ce154b4ea55935":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamManager.java":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamManager.java":[{"add":["98","        } else {","99","            this.os = os;"],"delete":[]}]}},"045bb97f53fc886f91866d4a0a62160c71aea48e":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2561\" dev=\"rgoers\" type=\"fix\" due-to=\"Ulrich Enslin\">\r","33","        JEP223 version detection fix for JDK 9 and up.\r","34","      <\/action>\r"],"delete":[]}]}},"456f71b61ea65a0481a86f484a85773862206347":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/AbstractKeyStoreConfiguration.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/KeyStoreConfiguration.java":"MODIFY","src\/site\/xdoc\/manual\/appenders.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationFactory.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationDefaults.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationFactoryTest.java":"ADD"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/AbstractKeyStoreConfiguration.java":[{"add":["35","    static final char[] DEFAULT_PASSWORD = \"changeit\".toCharArray();","36","","77","                    ks.load(fin, password != null ? password : DEFAULT_PASSWORD);"],"delete":["75","                    ks.load(fin, password);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/KeyStoreConfiguration.java":[{"add":["171","            kmFactory.init(this.getKeyStore(), password != null ? password : DEFAULT_PASSWORD);"],"delete":["171","            kmFactory.init(this.getKeyStore(), password);"]}],"src\/site\/xdoc\/manual\/appenders.xml":[{"add":["5005","            <td>The SSL protocol to use, <code>TLS<\/code> if omitted. A single value may enable multiple protocols,","5006","              see the <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/security\/StandardNames.html#SSLContext\">JVM documentation<\/a>","5007","              for details.","5008","            <\/td>"],"delete":["5005","            <td><code>SSL<\/code> if omitted.","5006","            See also <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/technotes\/guides\/security\/StandardNames.html#SSLContext\">Standard names<\/a>.<\/td>"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationFactory.java":[{"add":["28","    private static SslConfiguration sslConfiguration = createSslConfiguration(PropertiesUtil.getProperties());","44","    static SslConfiguration createSslConfiguration(PropertiesUtil props) {","81","            return SslConfiguration.createSSLConfiguration(null, keyStoreConfiguration,","84","        return null;"],"delete":["28","    private static SslConfiguration sslConfiguration = null;","44","    static {","45","        PropertiesUtil props = PropertiesUtil.getProperties();","82","            sslConfiguration = SslConfiguration.createSSLConfiguration(\"https\", keyStoreConfiguration,"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationDefaults.java":[{"add":["18","import java.security.KeyStore;","19","","25","    public static final String KEYSTORE_TYPE = KeyStore.getDefaultType();","26","    \/\/ \"TLS\" uses all protocols available except those excluded in \"jdk.tls.disabledAlgorithms\"","27","    public static final String PROTOCOL = \"TLS\";"],"delete":["23","    public static final String KEYSTORE_TYPE = \"JKS\";","24","    public static final String PROTOCOL = \"SSL\";"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/ssl\/SslConfigurationFactoryTest.java":[{"add":[],"delete":[]}]}},"67d241c2b42d96af092d446c1755b848a122b93a":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/GelfLayout.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/GelfLayout.java":[{"add":["109","            @PluginAttribute(value = \"compressionType\","],"delete":["109","            @PluginAttribute(value = \"compressionThreshold\","]}],"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1009\" dev=\"ggregory\" type=\"fix\" due-to=\"Mikael St?ldal\">","27","        Incorrectly defined compressionType parameter to GelfLayout.","28","      <\/action>"],"delete":[]}]}},"f8a96c056c85a178188f41b8fa44c7d167e1fdc3":{"changes":{"src\/changes\/changes.xml":"MODIFY","pom.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["77","      <action issue=\"LOG4J2-1487\" dev=\"ggregory\" type=\"update\" due-to=\"Gary Gregory\">","78","        Update JMS test from ActiveMQ 5.13.3 to 5.13.4.","79","      <\/action>"],"delete":[]}],"pom.xml":[{"add":["223","    <activemq.version>5.13.4<\/activemq.version>"],"delete":["223","    <activemq.version>5.13.3<\/activemq.version>"]}]}},"c35ac44456d56d54118881d46798fba6143390aa":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEventTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEvent.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEventTest.java":[{"add":["178","        final String base64 = \"rO0ABXNyAD5vcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouY29yZS5pbXBsLkxvZzRqTG9nRXZlbnQkTG9nRXZlbnRQcm94eYgtmn+yXsP9AwAQWgAMaXNFbmRPZkJhdGNoWgASaXNMb2NhdGlvblJlcXVpcmVkSgAIdGhyZWFkSWRJAA50aHJlYWRQcmlvcml0eUoACnRpbWVNaWxsaXNMAAtjb250ZXh0RGF0YXQAKUxvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovdXRpbC9TdHJpbmdNYXA7TAAMY29udGV4dFN0YWNrdAA1TG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9UaHJlYWRDb250ZXh0JENvbnRleHRTdGFjaztMAAVsZXZlbHQAIExvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovTGV2ZWw7TAAKbG9nZ2VyRlFDTnQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACmxvZ2dlck5hbWVxAH4ABEwABm1hcmtlcnQAIUxvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovTWFya2VyO0wAEW1hcnNoYWxsZWRNZXNzYWdldAAbTGphdmEvcm1pL01hcnNoYWxsZWRPYmplY3Q7TAANbWVzc2FnZVN0cmluZ3EAfgAETAAGc291cmNldAAdTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMAAp0aHJlYWROYW1lcQB+AARMAAt0aHJvd25Qcm94eXQAM0xvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovY29yZS9pbXBsL1Rocm93YWJsZVByb3h5O3hwAAAAAAAAAAAAAQAAAAUAAAAASZYC0nNyADJvcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGoudXRpbC5Tb3J0ZWRBcnJheVN0cmluZ01hcLA3yJFz7CvcAwACWgAJaW1tdXRhYmxlSQAJdGhyZXNob2xkeHABAAAAAXcIAAAAAQAAAAB4c3IAPm9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5UaHJlYWRDb250ZXh0JEVtcHR5VGhyZWFkQ29udGV4dFN0YWNrAAAAAAAAAAECAAB4cHNyAB5vcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouTGV2ZWwAAAAAABggGgIAA0kACGludExldmVsTAAEbmFtZXEAfgAETAANc3RhbmRhcmRMZXZlbHQALExvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovc3BpL1N0YW5kYXJkTGV2ZWw7eHAAAAGQdAAESU5GT35yACpvcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouc3BpLlN0YW5kYXJkTGV2ZWwAAAAAAAAAABIAAHhyAA5qYXZhLmxhbmcuRW51bQAAAAAAAAAAEgAAeHB0AARJTkZPdAAAdAAJc29tZS50ZXN0cHNyABlqYXZhLnJtaS5NYXJzaGFsbGVkT2JqZWN0fL0el+1j\/D4CAANJAARoYXNoWwAIbG9jQnl0ZXN0AAJbQlsACG9iakJ5dGVzcQB+ABl4cJNvO+xwdXIAAltCrPMX+AYIVOACAAB4cAAAAGms7QAFc3IALm9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5tZXNzYWdlLlNpbXBsZU1lc3NhZ2WLdE0wYLeiqAMAAUwAB21lc3NhZ2V0ABJMamF2YS9sYW5nL1N0cmluZzt4cHQAA2FiY3h0AANhYmNwdAAEbWFpbnNyADFvcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouY29yZS5pbXBsLlRocm93YWJsZVByb3h52cww1Zp7rPoCAAdJABJjb21tb25FbGVtZW50Q291bnRMAApjYXVzZVByb3h5cQB+AAhbABJleHRlbmRlZFN0YWNrVHJhY2V0AD9bTG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9jb3JlL2ltcGwvRXh0ZW5kZWRTdGFja1RyYWNlRWxlbWVudDtMABBsb2NhbGl6ZWRNZXNzYWdlcQB+AARMAAdtZXNzYWdlcQB+AARMAARuYW1lcQB+AARbABFzdXBwcmVzc2VkUHJveGllc3QANFtMb3JnL2FwYWNoZS9sb2dnaW5nL2xvZzRqL2NvcmUvaW1wbC9UaHJvd2FibGVQcm94eTt4cAAAAABwdXIAP1tMb3JnLmFwYWNoZS5sb2dnaW5nLmxvZzRqLmNvcmUuaW1wbC5FeHRlbmRlZFN0YWNrVHJhY2VFbGVtZW50O8rPiCOlx8+8AgAAeHAAAAAec3IAPG9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuRXh0ZW5kZWRTdGFja1RyYWNlRWxlbWVudOHez7rGtpAHAgACTAAOZXh0cmFDbGFzc0luZm90ADZMb3JnL2FwYWNoZS9sb2dnaW5nL2xvZzRqL2NvcmUvaW1wbC9FeHRlbmRlZENsYXNzSW5mbztMABFzdGFja1RyYWNlRWxlbWVudHEAfgAHeHBzcgA0b3JnLmFwYWNoZS5sb2dnaW5nLmxvZzRqLmNvcmUuaW1wbC5FeHRlbmRlZENsYXNzSW5mbwAAAAAAAAABAgADWgAFZXhhY3RMAAhsb2NhdGlvbnEAfgAETAAHdmVyc2lvbnEAfgAEeHABdAANdGVzdC1jbGFzc2VzL3QAAT9zcgAbamF2YS5sYW5nLlN0YWNrVHJhY2VFbGVtZW50YQnFmiY23YUCAARJAApsaW5lTnVtYmVyTAAOZGVjbGFyaW5nQ2xhc3NxAH4ABEwACGZpbGVOYW1lcQB+AARMAAptZXRob2ROYW1lcQB+AAR4cAAAAKx0ADRvcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouY29yZS5pbXBsLkxvZzRqTG9nRXZlbnRUZXN0dAAWTG9nNGpMb2dFdmVudFRlc3QuamF2YXQAKnRlc3RKYXZhSW9TZXJpYWxpemFibGVXaXRoVW5rbm93blRocm93YWJsZXNxAH4AJXNxAH4AKABxAH4AK3QACDEuNy4wXzU1c3EAfgAs\/\/\/\/\/nQAJHN1bi5yZWZsZWN0Lk5hdGl2ZU1ldGhvZEFjY2Vzc29ySW1wbHQAHU5hdGl2ZU1ldGhvZEFjY2Vzc29ySW1wbC5qYXZhdAAHaW52b2tlMHNxAH4AJXNxAH4AKABxAH4AK3EAfgAzc3EAfgAsAAAAOXEAfgA1cQB+ADZ0AAZpbnZva2VzcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALAAAACt0AChzdW4ucmVmbGVjdC5EZWxlZ2F0aW5nTWV0aG9kQWNjZXNzb3JJbXBsdAAhRGVsZWdhdGluZ01ldGhvZEFjY2Vzc29ySW1wbC5qYXZhcQB+ADtzcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALAAAAl50ABhqYXZhLmxhbmcucmVmbGVjdC5NZXRob2R0AAtNZXRob2QuamF2YXEAfgA7c3EAfgAlc3EAfgAoAXQADmp1bml0LTQuMTIuamFydAAENC4xMnNxAH4ALAAAADJ0AClvcmcuanVuaXQucnVubmVycy5tb2RlbC5GcmFtZXdvcmtNZXRob2QkMXQAFEZyYW1ld29ya01ldGhvZC5qYXZhdAARcnVuUmVmbGVjdGl2ZUNhbGxzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAAAx0ADNvcmcuanVuaXQuaW50ZXJuYWwucnVubmVycy5tb2RlbC5SZWZsZWN0aXZlQ2FsbGFibGV0ABdSZWZsZWN0aXZlQ2FsbGFibGUuamF2YXQAA3J1bnNxAH4AJXNxAH4AKAF0AA5qdW5pdC00LjEyLmphcnEAfgBJc3EAfgAsAAAAL3QAJ29yZy5qdW5pdC5ydW5uZXJzLm1vZGVsLkZyYW1ld29ya01ldGhvZHEAfgBMdAARaW52b2tlRXhwbG9zaXZlbHlzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAABF0ADJvcmcuanVuaXQuaW50ZXJuYWwucnVubmVycy5zdGF0ZW1lbnRzLkludm9rZU1ldGhvZHQAEUludm9rZU1ldGhvZC5qYXZhdAAIZXZhbHVhdGVzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAAUV0AB5vcmcuanVuaXQucnVubmVycy5QYXJlbnRSdW5uZXJ0ABFQYXJlbnRSdW5uZXIuamF2YXQAB3J1bkxlYWZzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAAE50AChvcmcuanVuaXQucnVubmVycy5CbG9ja0pVbml0NENsYXNzUnVubmVydAAbQmxvY2tKVW5pdDRDbGFzc1J1bm5lci5qYXZhdAAIcnVuQ2hpbGRzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAADlxAH4AbXEAfgBucQB+AG9zcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAASJ0ACBvcmcuanVuaXQucnVubmVycy5QYXJlbnRSdW5uZXIkM3EAfgBncQB+AFRzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAAEd0ACBvcmcuanVuaXQucnVubmVycy5QYXJlbnRSdW5uZXIkMXEAfgBndAAIc2NoZWR1bGVzcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAASBxAH4AZnEAfgBndAALcnVuQ2hpbGRyZW5zcQB+ACVzcQB+ACgBdAAOanVuaXQtNC4xMi5qYXJxAH4ASXNxAH4ALAAAADpxAH4AZnEAfgBndAAKYWNjZXNzJDAwMHNxAH4AJXNxAH4AKAF0AA5qdW5pdC00LjEyLmphcnEAfgBJc3EAfgAsAAABDHQAIG9yZy5qdW5pdC5ydW5uZXJzLlBhcmVudFJ1bm5lciQycQB+AGdxAH4AYXNxAH4AJXNxAH4AKAF0AA5qdW5pdC00LjEyLmphcnEAfgBJc3EAfgAsAAAAGnQAMG9yZy5qdW5pdC5pbnRlcm5hbC5ydW5uZXJzLnN0YXRlbWVudHMuUnVuQmVmb3Jlc3QAD1J1bkJlZm9yZXMuamF2YXEAfgBhc3EAfgAlc3EAfgAoAXQADmp1bml0LTQuMTIuamFycQB+AElzcQB+ACwAAAAbdAAvb3JnLmp1bml0LmludGVybmFsLnJ1bm5lcnMuc3RhdGVtZW50cy5SdW5BZnRlcnN0AA5SdW5BZnRlcnMuamF2YXEAfgBhc3EAfgAlc3EAfgAoAXQADmp1bml0LTQuMTIuamFycQB+AElzcQB+ACwAAAFrcQB+AGZxAH4AZ3EAfgBUc3EAfgAlc3EAfgAoAXQADmp1bml0LTQuMTIuamFycQB+AElzcQB+ACwAAACJdAAab3JnLmp1bml0LnJ1bm5lci5KVW5pdENvcmV0AA5KVW5pdENvcmUuamF2YXEAfgBUc3EAfgAlc3EAfgAoAXQADGp1bml0LXJ0LmphcnEAfgArc3EAfgAsAAAAdXQAKGNvbS5pbnRlbGxpai5qdW5pdDQuSlVuaXQ0SWRlYVRlc3RSdW5uZXJ0ABlKVW5pdDRJZGVhVGVzdFJ1bm5lci5qYXZhdAATc3RhcnRSdW5uZXJXaXRoQXJnc3NxAH4AJXNxAH4AKAF0AAxqdW5pdC1ydC5qYXJxAH4AK3NxAH4ALAAAACpxAH4AqHEAfgCpcQB+AKpzcQB+ACVzcQB+ACgBdAAManVuaXQtcnQuamFycQB+ACtzcQB+ACwAAAEGdAAsY29tLmludGVsbGlqLnJ0LmV4ZWN1dGlvbi5qdW5pdC5KVW5pdFN0YXJ0ZXJ0ABFKVW5pdFN0YXJ0ZXIuamF2YXQAFnByZXBhcmVTdHJlYW1zQW5kU3RhcnRzcQB+ACVzcQB+ACgBdAAManVuaXQtcnQuamFycQB+ACtzcQB+ACwAAABUcQB+ALNxAH4AtHQABG1haW5zcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALP\/\/\/\/5xAH4ANXEAfgA2cQB+ADdzcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALAAAADlxAH4ANXEAfgA2cQB+ADtzcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALAAAACtxAH4AP3EAfgBAcQB+ADtzcQB+ACVzcQB+ACgAcQB+ACtxAH4AM3NxAH4ALAAAAl5xAH4ARHEAfgBFcQB+ADtzcQB+ACVzcQB+ACgBdAALaWRlYV9ydC5qYXJxAH4AK3NxAH4ALAAAAJN0AC1jb20uaW50ZWxsaWoucnQuZXhlY3V0aW9uLmFwcGxpY2F0aW9uLkFwcE1haW50AAxBcHBNYWluLmphdmFxAH4AunQAFk9NRyBJJ3ZlIGJlZW4gZGVsZXRlZCFxAH4AzXQARW9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuTG9nNGpMb2dFdmVudFRlc3QkRGVsZXRlZEV4Y2VwdGlvbnVyADRbTG9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuVGhyb3dhYmxlUHJveHk7+u0B4IWi6zkCAAB4cAAAAAB4\";","523",""],"delete":["178","        final String base64 = \"rO0ABXNyAD5vcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouY29yZS5pbXBsLkxvZzRqTG9nRXZlbnQkTG9nRXZlbnRQcm94eYgtmn+yXsP9AgAPWgAMaXNFbmRPZkJhdGNoWgASaXNMb2NhdGlvblJlcXVpcmVkSgAIdGhyZWFkSWRJAA50aHJlYWRQcmlvcml0eUoACnRpbWVNaWxsaXNMAApjb250ZXh0TWFwdAAPTGphdmEvdXRpbC9NYXA7TAAMY29udGV4dFN0YWNrdAA1TG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9UaHJlYWRDb250ZXh0JENvbnRleHRTdGFjaztMAAVsZXZlbHQAIExvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovTGV2ZWw7TAAKbG9nZ2VyRlFDTnQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACmxvZ2dlck5hbWVxAH4ABEwABm1hcmtlcnQAIUxvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovTWFya2VyO0wAB21lc3NhZ2V0ACpMb3JnL2FwYWNoZS9sb2dnaW5nL2xvZzRqL21lc3NhZ2UvTWVzc2FnZTtMAAZzb3VyY2V0AB1MamF2YS9sYW5nL1N0YWNrVHJhY2VFbGVtZW50O0wACnRocmVhZE5hbWVxAH4ABEwAC3Rocm93blByb3h5dAAzTG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9jb3JlL2ltcGwvVGhyb3dhYmxlUHJveHk7eHAAAAAAAAAAAAABAAAABQAAAABJlgLSc3IAHmphdmEudXRpbC5Db2xsZWN0aW9ucyRFbXB0eU1hcFk2FIVa3OfQAgAAeHBzcgA+b3JnLmFwYWNoZS5sb2dnaW5nLmxvZzRqLlRocmVhZENvbnRleHQkRW1wdHlUaHJlYWRDb250ZXh0U3RhY2sAAAAAAAAAAQIAAHhwc3IAHm9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5MZXZlbAAAAAAAGCAaAgADSQAIaW50TGV2ZWxMAARuYW1lcQB+AARMAA1zdGFuZGFyZExldmVsdAAsTG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9zcGkvU3RhbmRhcmRMZXZlbDt4cAAAAZB0AARJTkZPfnIAKm9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5zcGkuU3RhbmRhcmRMZXZlbAAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4cHQABElORk90AAB0AAlzb21lLnRlc3Rwc3IALm9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5tZXNzYWdlLlNpbXBsZU1lc3NhZ2WLdE0wYLeiqAMAAUwAB21lc3NhZ2VxAH4ABHhwdAADYWJjcQB+ABp4cHQABG1haW5zcgAxb3JnLmFwYWNoZS5sb2dnaW5nLmxvZzRqLmNvcmUuaW1wbC5UaHJvd2FibGVQcm94ednMMNWae6z6AgAHSQASY29tbW9uRWxlbWVudENvdW50TAAKY2F1c2VQcm94eXEAfgAIWwASZXh0ZW5kZWRTdGFja1RyYWNldAA\/W0xvcmcvYXBhY2hlL2xvZ2dpbmcvbG9nNGovY29yZS9pbXBsL0V4dGVuZGVkU3RhY2tUcmFjZUVsZW1lbnQ7TAAQbG9jYWxpemVkTWVzc2FnZXEAfgAETAAHbWVzc2FnZXEAfgAETAAEbmFtZXEAfgAEWwARc3VwcHJlc3NlZFByb3hpZXN0ADRbTG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9jb3JlL2ltcGwvVGhyb3dhYmxlUHJveHk7eHAAAAAAcHVyAD9bTG9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuRXh0ZW5kZWRTdGFja1RyYWNlRWxlbWVudDvKz4gjpcfPvAIAAHhwAAAAHXNyADxvcmcuYXBhY2hlLmxvZ2dpbmcubG9nNGouY29yZS5pbXBsLkV4dGVuZGVkU3RhY2tUcmFjZUVsZW1lbnTh3s+6xraQBwIAAkwADmV4dHJhQ2xhc3NJbmZvdAA2TG9yZy9hcGFjaGUvbG9nZ2luZy9sb2c0ai9jb3JlL2ltcGwvRXh0ZW5kZWRDbGFzc0luZm87TAARc3RhY2tUcmFjZUVsZW1lbnRxAH4AB3hwc3IANG9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuRXh0ZW5kZWRDbGFzc0luZm8AAAAAAAAAAQIAA1oABWV4YWN0TAAIbG9jYXRpb25xAH4ABEwAB3ZlcnNpb25xAH4ABHhwAXQADXRlc3QtY2xhc3Nlcy90AAE\/c3IAG2phdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudGEJxZomNt2FAgAESQAKbGluZU51bWJlckwADmRlY2xhcmluZ0NsYXNzcQB+AARMAAhmaWxlTmFtZXEAfgAETAAKbWV0aG9kTmFtZXEAfgAEeHAAAACqdAA0b3JnLmFwYWNoZS5sb2dnaW5nLmxvZzRqLmNvcmUuaW1wbC5Mb2c0akxvZ0V2ZW50VGVzdHQAFkxvZzRqTG9nRXZlbnRUZXN0LmphdmF0ACp0ZXN0SmF2YUlvU2VyaWFsaXphYmxlV2l0aFVua25vd25UaHJvd2FibGVzcQB+ACJzcQB+ACUAcQB+ACh0AAgxLjcuMF81NXNxAH4AKf\/\/\/\/50ACRzdW4ucmVmbGVjdC5OYXRpdmVNZXRob2RBY2Nlc3NvckltcGx0AB1OYXRpdmVNZXRob2RBY2Nlc3NvckltcGwuamF2YXQAB2ludm9rZTBzcQB+ACJzcQB+ACUAcQB+AChxAH4AMHNxAH4AKQAAADlxAH4AMnEAfgAzdAAGaW52b2tlc3EAfgAic3EAfgAlAHEAfgAocQB+ADBzcQB+ACkAAAArdAAoc3VuLnJlZmxlY3QuRGVsZWdhdGluZ01ldGhvZEFjY2Vzc29ySW1wbHQAIURlbGVnYXRpbmdNZXRob2RBY2Nlc3NvckltcGwuamF2YXEAfgA4c3EAfgAic3EAfgAlAHEAfgAocQB+ADBzcQB+ACkAAAJedAAYamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kdAALTWV0aG9kLmphdmFxAH4AOHNxAH4AInNxAH4AJQF0AA5qdW5pdC00LjEyLmphcnQABDQuMTJzcQB+ACkAAAAydAApb3JnLmp1bml0LnJ1bm5lcnMubW9kZWwuRnJhbWV3b3JrTWV0aG9kJDF0ABRGcmFtZXdvcmtNZXRob2QuamF2YXQAEXJ1blJlZmxlY3RpdmVDYWxsc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAAMdAAzb3JnLmp1bml0LmludGVybmFsLnJ1bm5lcnMubW9kZWwuUmVmbGVjdGl2ZUNhbGxhYmxldAAXUmVmbGVjdGl2ZUNhbGxhYmxlLmphdmF0AANydW5zcQB+ACJzcQB+ACUBdAAOanVuaXQtNC4xMi5qYXJxAH4ARnNxAH4AKQAAAC90ACdvcmcuanVuaXQucnVubmVycy5tb2RlbC5GcmFtZXdvcmtNZXRob2RxAH4ASXQAEWludm9rZUV4cGxvc2l2ZWx5c3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAARdAAyb3JnLmp1bml0LmludGVybmFsLnJ1bm5lcnMuc3RhdGVtZW50cy5JbnZva2VNZXRob2R0ABFJbnZva2VNZXRob2QuamF2YXQACGV2YWx1YXRlc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAFFdAAeb3JnLmp1bml0LnJ1bm5lcnMuUGFyZW50UnVubmVydAARUGFyZW50UnVubmVyLmphdmF0AAdydW5MZWFmc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAABOdAAob3JnLmp1bml0LnJ1bm5lcnMuQmxvY2tKVW5pdDRDbGFzc1J1bm5lcnQAG0Jsb2NrSlVuaXQ0Q2xhc3NSdW5uZXIuamF2YXQACHJ1bkNoaWxkc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAA5cQB+AGpxAH4Aa3EAfgBsc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAEidAAgb3JnLmp1bml0LnJ1bm5lcnMuUGFyZW50UnVubmVyJDNxAH4AZHEAfgBRc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAABHdAAgb3JnLmp1bml0LnJ1bm5lcnMuUGFyZW50UnVubmVyJDFxAH4AZHQACHNjaGVkdWxlc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAEgcQB+AGNxAH4AZHQAC3J1bkNoaWxkcmVuc3EAfgAic3EAfgAlAXQADmp1bml0LTQuMTIuamFycQB+AEZzcQB+ACkAAAA6cQB+AGNxAH4AZHQACmFjY2VzcyQwMDBzcQB+ACJzcQB+ACUBdAAOanVuaXQtNC4xMi5qYXJxAH4ARnNxAH4AKQAAAQx0ACBvcmcuanVuaXQucnVubmVycy5QYXJlbnRSdW5uZXIkMnEAfgBkcQB+AF5zcQB+ACJzcQB+ACUBdAAOanVuaXQtNC4xMi5qYXJxAH4ARnNxAH4AKQAAABp0ADBvcmcuanVuaXQuaW50ZXJuYWwucnVubmVycy5zdGF0ZW1lbnRzLlJ1bkJlZm9yZXN0AA9SdW5CZWZvcmVzLmphdmFxAH4AXnNxAH4AInNxAH4AJQF0AA5qdW5pdC00LjEyLmphcnEAfgBGc3EAfgApAAAAG3QAL29yZy5qdW5pdC5pbnRlcm5hbC5ydW5uZXJzLnN0YXRlbWVudHMuUnVuQWZ0ZXJzdAAOUnVuQWZ0ZXJzLmphdmFxAH4AXnNxAH4AInNxAH4AJQF0AA5qdW5pdC00LjEyLmphcnEAfgBGc3EAfgApAAABa3EAfgBjcQB+AGRxAH4AUXNxAH4AInNxAH4AJQF0AA5qdW5pdC00LjEyLmphcnEAfgBGc3EAfgApAAAAiXQAGm9yZy5qdW5pdC5ydW5uZXIuSlVuaXRDb3JldAAOSlVuaXRDb3JlLmphdmFxAH4AUXNxAH4AInNxAH4AJQF0AAxqdW5pdC1ydC5qYXJxAH4AKHNxAH4AKQAAAEV0AChjb20uaW50ZWxsaWouanVuaXQ0LkpVbml0NElkZWFUZXN0UnVubmVydAAZSlVuaXQ0SWRlYVRlc3RSdW5uZXIuamF2YXQAE3N0YXJ0UnVubmVyV2l0aEFyZ3NzcQB+ACJzcQB+ACUBdAAManVuaXQtcnQuamFycQB+AChzcQB+ACkAAADqdAAsY29tLmludGVsbGlqLnJ0LmV4ZWN1dGlvbi5qdW5pdC5KVW5pdFN0YXJ0ZXJ0ABFKVW5pdFN0YXJ0ZXIuamF2YXQAFnByZXBhcmVTdHJlYW1zQW5kU3RhcnRzcQB+ACJzcQB+ACUBdAAManVuaXQtcnQuamFycQB+AChzcQB+ACkAAABKcQB+AKxxAH4ArXQABG1haW5zcQB+ACJzcQB+ACUAcQB+AChxAH4AMHNxAH4AKf\/\/\/\/5xAH4AMnEAfgAzcQB+ADRzcQB+ACJzcQB+ACUAcQB+AChxAH4AMHNxAH4AKQAAADlxAH4AMnEAfgAzcQB+ADhzcQB+ACJzcQB+ACUAcQB+AChxAH4AMHNxAH4AKQAAACtxAH4APHEAfgA9cQB+ADhzcQB+ACJzcQB+ACUAcQB+AChxAH4AMHNxAH4AKQAAAl5xAH4AQXEAfgBCcQB+ADhzcQB+ACJzcQB+ACUBdAALaWRlYV9ydC5qYXJxAH4AKHNxAH4AKQAAAJB0AC1jb20uaW50ZWxsaWoucnQuZXhlY3V0aW9uLmFwcGxpY2F0aW9uLkFwcE1haW50AAxBcHBNYWluLmphdmFxAH4As3QAFk9NRyBJJ3ZlIGJlZW4gZGVsZXRlZCFxAH4AxnQARW9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuTG9nNGpMb2dFdmVudFRlc3QkRGVsZXRlZEV4Y2VwdGlvbnVyADRbTG9yZy5hcGFjaGUubG9nZ2luZy5sb2c0ai5jb3JlLmltcGwuVGhyb3dhYmxlUHJveHk7+u0B4IWi6zkCAAB4cAAAAAA=\";","523","    "]}],"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1226\" dev=\"rpopma\" type=\"fix\">","27","        Improve LogEvent serialization to handle non-serializable Messages and deserializing when required classes are missing.","28","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/Log4jLogEvent.java":[{"add":["18","import java.io.IOException;","22","import java.rmi.MarshalledObject;","849","        \/\/ transient since 2.8","850","        private final transient Message message;","851","        \/** since 2.8 *\/","852","        private MarshalledObject<Message> marshalledMessage;","853","        \/** since 2.8 *\/","854","        private String messageString;","900","            final Message temp = event.getMessage();","901","            message = temp instanceof ReusableMessage","902","                    ? memento((ReusableMessage) temp)","903","                    : temp;","928","        private static MarshalledObject<Message> marshall(final Message msg) {","929","            try {","930","                return new MarshalledObject<>(msg);","931","            } catch (final Exception ex) {","932","                return null;","933","            }","934","        }","935","","936","        private void writeObject(final java.io.ObjectOutputStream s) throws IOException {","937","            this.messageString = message.getFormattedMessage();","938","            this.marshalledMessage = marshall(message);","939","            s.defaultWriteObject();","940","        }","941","","947","            final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message(), thrown,","954","","955","        private Message message() {","956","            if (marshalledMessage != null) {","957","                try {","958","                    return marshalledMessage.get();","959","                } catch (final Exception ex) {","960","                }","961","            }","962","            return new SimpleMessage(messageString);","963","        }"],"delete":["847","        private final Message message;","893","            final Message msg = event.getMessage();","894","            this.message = msg instanceof ReusableMessage","895","                    ? memento((ReusableMessage) msg)","896","                    : msg;","926","            final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message, thrown,"]}]}},"1d70d3197887847529b3f06261ed38d20af57240":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["33","      <action issue=\"LOG4J2-2104\" dev=\"rgoers\" type=\"fix\">","34","        LoaderUtil was not looping properly over classloaders.","35","      <\/action>"],"delete":[]}]}},"b3e40205c2b229940752e0abec5973d20b001c8b":{"changes":{"src\/site\/xdoc\/manual\/configuration.xml.vm":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/site\/xdoc\/manual\/configuration.xml.vm":[{"add":["90","import org.apache.logging.log4j.LogManager;","96","static final Logger logger = LogManager.getLogger(MyApp.class.getName());","104","if (!bar.doIt()) {","122","import org.apache.logging.log4j.LogManager;","125","  static final Logger logger = LogManager.getLogger(Bar.class.getName());","279","            are included in the advertisement.  Chainsaw and other external systems can discover these advertisements and","280","            use that information to intelligently process the log file.","283","            The mechanism by which an advertisement is exposed, as well as the advertisement format, is specific to each","285","            must understand how to locate the advertised configuration as well as the format of the advertisement.  For example,","286","            a 'database' Advertiser may store configuration details in a database table.  An external system can read","290","            Log4j provides one Advertiser implementation, a 'multicastdns' Advertiser, which advertises appender configuration","296","            a log file provided in an advertisement, just double-click the advertisement entry in Chainsaw's the Zeroconf tab.","309","            FileAppender-based configurations require an additional 'advertiseURI' attribute to be specified on the appender.","311","            For example, the file may be remotely accessible to Chainsaw via ssh\/sftp by specifying a Commons VFS","312","            (<a href=\"http:\/\/commons.apache.org\/proper\/commons-vfs\/\">http:\/\/commons.apache.org\/proper\/commons-vfs\/<\/a>) sftp:\/\/ URI,","313","            an http:\/\/ URI may be used if the file is accessible through a web server, or a file:\/\/ URI can be specified","317","            Here is an example advertisement-enabled appender configuration which can be used by a locally-running Chainsaw to","321","            <b>Please note, you must add the JmDns library from <a href=\"http:\/\/jmdns.sourceforge.net\">http:\/\/jmdns.sourceforge.net<\/a>","355","                <td>(Optional) The Advertiser plugin name which will be used to advertise individual","843","                  The bundle name follows package naming conventions, for example:"],"delete":["95","Logger logger = LogManager.getLogger(MyApp.class.getName());","103","if (!bar.doIt() {","123","  static Logger logger = LogManager.getLogger(Bar.class.getName());","277","            are included in the advertisement.  Chainsaw and other external systems can discover these advertisements and ","278","            use that information to intelligently process the log file.  ","281","            The mechanism by which an advertisement is exposed, as well as the advertisement format, is specific to each ","283","            must understand how to locate the advertised configuration as well as the format of the advertisement.  For example, ","284","            a 'database' Advertiser may store configuration details in a database table.  An external system can read ","288","            Log4j provides one Advertiser implementation, a 'multicastdns' Advertiser, which advertises appender configuration ","294","            a log file provided in an advertisement, just double-click the advertisement entry in Chainsaw's the Zeroconf tab.  ","307","            FileAppender-based configurations require an additional 'advertiseURI' attribute to be specified on the appender.  ","309","            For example, the file may be remotely accessible to Chainsaw via ssh\/sftp by specifying a Commons VFS ","310","            (<a href=\"http:\/\/commons.apache.org\/proper\/commons-vfs\/\">http:\/\/commons.apache.org\/proper\/commons-vfs\/<\/a>) sftp:\/\/ URI, ","311","            an http:\/\/ URI may be used if the file is accessible through a web server, or a file:\/\/ URI can be specified ","315","            Here is an example advertisement-enabled appender configuration which can be used by a locally-running Chainsaw to ","319","            <b>Please note, you must add the JmDns library from <a href=\"http:\/\/jmdns.sourceforge.net\">http:\/\/jmdns.sourceforge.net<\/a> ","353","                <td>(Optional) The Advertiser plugin name which will be used to advertise individual ","841","                  The bundle name follows package naming conventions, for example: "]}],"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-463\" dev=\"rpopma\" type=\"fix\" due-to=\"Michael Diamond, Matt Sicker\">","24","        Fixed documentation for MyApp example application in the Automatic Configuration section","25","      <\/action>"],"delete":[]}]}},"798f3026c2e086e732e6aac0744d0154da33bb39":{"changes":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/config\/Log4j1ConfigurationParser.java":"MODIFY","log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilder.java":"MODIFY","log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilderTest.java":"MODIFY"},"diff":{"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/config\/Log4j1ConfigurationParser.java":[{"add":["300","                            .replaceAll(\"%([-\\\\.\\\\d]*)p(?!\\\\w)\", \"%$1v1Level\")","306","                            .replaceAll(\"%([-\\\\.\\\\d]*)x(?!\\\\w)\", \"%$1ndc\")","313","                            .replaceAll(\"%([-\\\\.\\\\d]*)X(?!\\\\w)\", \"%$1properties\");"],"delete":["300","                            .replaceAll(\"%([-\\\\.\\\\d]*)p\", \"%$1v1Level\")","306","                            .replaceAll(\"%([-\\\\.\\\\d]*)x\", \"%$1ndc\")","313","                            .replaceAll(\"%([-\\\\.\\\\d]*)X\", \"%$1properties\");"]}],"log4j-1.2-api\/src\/main\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilder.java":[{"add":["89","                        .replaceAll(\"%([-\\\\.\\\\d]*)p(?!\\\\w)\", \"%$1v1Level\")","95","                        .replaceAll(\"%([-\\\\.\\\\d]*)x(?!\\\\w)\", \"%$1ndc\")","102","                        .replaceAll(\"%([-\\\\.\\\\d]*)X(?!\\\\w)\", \"%$1properties\"))"],"delete":["89","                        .replaceAll(\"%([-\\\\.\\\\d]*)p\", \"%$1v1Level\")","95","                        .replaceAll(\"%([-\\\\.\\\\d]*)x\", \"%$1ndc\")","102","                        .replaceAll(\"%([-\\\\.\\\\d]*)X\", \"%$1properties\"))"]}],"log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/builders\/layout\/PatternLayoutBuilderTest.java":[{"add":["39","                    Arguments.of(\"%.20x\", \"%.20ndc\"),","40","                    Arguments.of(\"%pid\", \"%pid\"),","41","                    Arguments.of(\"%xEx\", \"%xEx\"),","42","                    Arguments.of(\"%XX\", \"%XX\"),","43","                    Arguments.of(\"%p id\", \"%v1Level id\"),","44","                    Arguments.of(\"%x Ex\", \"%ndc Ex\"),","45","                    Arguments.of(\"%X X\", \"%properties X\"))"],"delete":["39","                    Arguments.of(\"%.20x\", \"%.20ndc\"))"]}]}},"b2927d2884010925129eb8dbc89f405277cf9f0e":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MainMapLookup.java":"ADD","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/Interpolator.java":"MODIFY","src\/site\/xdoc\/manual\/lookups.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookup.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookupTest.java":"MODIFY","log4j-core\/src\/test\/resources\/log4j-lookup-main.xml":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MainInputArgumentsLookupTest.java":"ADD"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MainMapLookup.java":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/Interpolator.java":[{"add":["86","        lookups.put(\"main\", MainMapLookup.MAIN_SINGLETON);"],"delete":["86","        lookups.put(\"main\", MapLookup.MAIN_SINGLETON);"]}],"src\/site\/xdoc\/manual\/lookups.xml":[{"add":["185","import org.apache.logging.log4j.core.lookup.MainMapLookup;","188","  MainMapLookup.setMainArguments(args);"],"delete":["185","import org.apache.logging.log4j.core.lookup.MapLookup;","188","  MapLookup.setMainArguments(args);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookup.java":[{"add":["42","    static HashMap<String, String> newMap(final int initialCapacity) {","70","     * @deprecated As of 2.4, use {@link MainMapLookup#setMainArguments(String[])}","72","    @Deprecated","74","        MainMapLookup.setMainArguments(args);","114","    protected Map<String, String> getMap() {","115","        return map;","116","    }","117",""],"delete":["32","    \/**","33","     * A singleton used by a main method to save its arguments.","34","     *\/","35","    static final MapLookup MAIN_SINGLETON = new MapLookup(newMap(0));","36","","47","    private static HashMap<String, String> newMap(final int initialCapacity) {","77","        if (args == null) {","78","            return;","79","        }","80","        initMap(args, MAIN_SINGLETON.map);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookupTest.java":[{"add":["57","        final MapLookup lookup = MainMapLookup.MAIN_SINGLETON;"],"delete":["57","        final MapLookup lookup = MapLookup.MAIN_SINGLETON;"]}],"log4j-core\/src\/test\/resources\/log4j-lookup-main.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MainInputArgumentsLookupTest.java":[{"add":[],"delete":[]}]}},"91190aa54bf3c0b07bf767c9bb2eaa4e904a460c":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessage.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessageTest.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessage.java":[{"add":["341","        if (Format.XML.equals(format)) {","342","            asXml(sdId, sb);","343","            return;","344","        }","358","    private void asXml(StructuredDataId structuredDataId, StringBuilder sb) {","359","        sb.append(\"<StructuredData>\\n\");","360","        sb.append(\"<type>\").append(type).append(\"<\/type>\\n\");","361","        sb.append(\"<id>\").append(structuredDataId).append(\"<\/id>\\n\");","362","        super.asXml(sb);","363","        sb.append(\"\\n<\/StructuredData>\\n\");","364","    }","365",""],"delete":["392","    private String asXml() {","393","        final StringBuilder sb = new StringBuilder();","394","        final StructuredDataId sdId = getId();","395","        if (sdId == null || sdId.getName() == null || type == null) {","396","            return sb.toString();","397","        }","398","        sb.append(\"<StructuredData>\\n\");","399","        sb.append(\"<type>\").append(type).append(\"<\/type>\\n\");","400","        sb.append(\"<id>\").append(sdId).append(\"<\/id>\\n\");","401","        super.asXml(sb);","402","        sb.append(\"<\/StructuredData>\\n\");","403","        return sb.toString();","404","    }","405",""]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/StructuredDataMessageTest.java":[{"add":["40","    public void testMsgNonFull() {","41","        final String testMsg = \"Test message {}\";","42","        final StructuredDataMessage msg = new StructuredDataMessage(\"MsgId@12345\", testMsg, \"Alert\");","43","        msg.put(\"message\", testMsg);","44","        msg.put(\"project\", \"Log4j\");","45","        msg.put(\"memo\", \"This is a very long test memo to prevent regression of LOG4J2-114\");","46","        final String result = msg.getFormattedMessage(new String[] { \"WHATEVER\" });","47","        final String expected = \"[MsgId@12345 memo=\\\"This is a very long test memo to prevent regression of LOG4J2-114\\\" message=\\\"Test message {}\\\" project=\\\"Log4j\\\"]\";","48","        assertEquals(expected, result);","49","    }","50","","51","    @Test","52","    public void testMsgXml() {","53","        final String testMsg = \"Test message {}\";","54","        final StructuredDataMessage msg = new StructuredDataMessage(\"MsgId@12345\", testMsg, \"Alert\");","55","        msg.put(\"message\", testMsg);","56","        msg.put(\"project\", \"Log4j\");","57","        msg.put(\"memo\", \"This is a very long test memo to prevent regression of LOG4J2-114\");","58","        final String result = msg.getFormattedMessage(new String[] { \"XML\" });","59","        final String expected =","60","                  \"<StructuredData>\\n\"","61","                + \"<type>Alert<\/type>\\n\"","62","                + \"<id>MsgId@12345<\/id>\\n\"","63","                + \"<Map>\\n\"","64","                + \"  <Entry key=\\\"memo\\\">This is a very long test memo to prevent regression of LOG4J2-114<\/Entry>\\n\"","65","                + \"  <Entry key=\\\"message\\\">Test message {}<\/Entry>\\n\"","66","                + \"  <Entry key=\\\"project\\\">Log4j<\/Entry>\\n\"","67","                + \"<\/Map>\\n\"","68","                + \"<\/StructuredData>\\n\";","69","        assertEquals(expected, result);","70","    }","71","","72","    @Test"],"delete":[]}]}},"173cda59736e3a5f9d01fa1e5999b9c588d4841d":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParserTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParserTest.java":[{"add":["408","    \/\/ LOG4J2-2564: Multiple newInstance methods.","409","    @Test","410","    public void testMapPatternConverter() {","411","        final List<PatternFormatter> formatters = parser.parse(\"%K\");","412","        assertNotNull(formatters);","413","        assertTrue(formatters.size() == 1);","414","        PatternFormatter formatter = formatters.get(0);","415","        assertTrue(\"Expected a MapPatternConverter\", formatter.getConverter() instanceof MapPatternConverter);","416","    }"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["74","      <action issue=\"LOG4J2-2564\" dev=\"ckozak\" type=\"fix\">\r","75","        MapPatternConverter is properly created from the '%K', '%map', and '%MAP' patterns.\r","76","        PatternConverter instanceOf methods with unknown parameter types no longer elide those with known parameters.\r","77","      <\/action>\r"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":[{"add":["542","            if (Modifier.isStatic(method.getModifiers())","543","                    && method.getDeclaringClass().equals(converterClass)","544","                    && method.getName().equals(\"newInstance\")","545","                    && areValidNewInstanceParameters(method.getParameterTypes())) {","599","    \/** LOG4J2-2564: Returns true if all method parameters are valid for injection. *\/","600","    private static boolean areValidNewInstanceParameters(Class<?>[] parameterTypes) {","601","        for (Class<?> clazz : parameterTypes) {","602","            if (!clazz.isAssignableFrom(Configuration.class)","603","                    && !(clazz.isArray() && \"[Ljava.lang.String;\".equals(clazz.getName()))) {","604","                return false;","605","            }","606","        }","607","        return true;","608","    }","609",""],"delete":["542","            if (Modifier.isStatic(method.getModifiers()) && method.getDeclaringClass().equals(converterClass)","543","                    && method.getName().equals(\"newInstance\")) {"]}]}},"51a81f96358e217815185170df19f9f5110be43e":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookupTest.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/lookup\/MapLookupTest.java":[{"add":["81","      assertEquals(\"B1\", lookup.lookup(event, \"A1\"));"],"delete":["81","      assertEquals(\"B1\", lookup.lookup(event, \"A\"));"]}]}},"659ce48d5c9eb6dae1def8eaae03338708d06e0c":{"changes":{"src\/changes\/changes.xml":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentManager.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-269\" dev=\"rgoers\" type=\"fix\">","25","        Use transaction when batch size is 1.","26","      <\/action>"],"delete":[]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentManager.java":[{"add":["426","                            Transaction txn = environment.beginTransaction(null, null);","427","                            Cursor cursor = database.openCursor(txn, null);","450","                                if (cursor != null) {","451","                                    cursor.close();","452","                                    cursor = null;","453","                                }","454","                                txn.commit();","455","                                txn = null;","457","                                LOGGER.error(\"Error reading or writing to database\", ex);","464","                                if (txn != null) {","465","                                    txn.abort();","466","                                }"],"delete":["426","                            Cursor cursor = database.openCursor(null, null);","450","                                LOGGER.error(\"Error reading database\", ex);"]}]}},"14baf294e93148cbbd627b6a8ddf7434f1fce69d":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/db\/jdbc\/JdbcDatabaseManager.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","    <release version=\"2.12.0\" date=\"2019-MM-DD\" description=\"GA Release 2.12.0\">","33","      <action issue=\"LOG4J2-2559\" dev=\"ggregory\" type=\"fix\" due-to=\"Li Lei, Gary Gregory\">","34","        NullPointerException in JdbcAppender.createAppender().","35","      <\/action>","36","    <\/release>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/db\/jdbc\/JdbcDatabaseManager.java":[{"add":["115","\t\t\tif (data.columnMappings != null) {","116","\t\t\t\tfor (final ColumnMapping mapping : data.columnMappings) {","117","\t\t\t\t\tfinal String mappingName = mapping.getName();","118","\t\t\t\t\tif (Strings.isNotEmpty(mapping.getLiteralValue())) {","119","\t\t\t\t\t\tlogger().trace(\"Adding INSERT VALUES literal for ColumnMapping[{}]: {}={} \", i, mappingName,","120","\t\t\t\t\t\t\t\tmapping.getLiteralValue());","121","\t\t\t\t\t\tsb.append(mapping.getLiteralValue());","122","\t\t\t\t\t} else if (Strings.isNotEmpty(mapping.getParameter())) {","123","\t\t\t\t\t\tlogger().trace(\"Adding INSERT VALUES parameter for ColumnMapping[{}]: {}={} \", i, mappingName,","124","\t\t\t\t\t\t\t\tmapping.getParameter());","125","\t\t\t\t\t\tsb.append(mapping.getParameter());","126","\t\t\t\t\t} else {","127","\t\t\t\t\t\tlogger().trace(\"Adding INSERT VALUES parameter marker for ColumnMapping[{}]: {}={} \", i,","128","\t\t\t\t\t\t\t\tmappingName, PARAMETER_MARKER);","129","\t\t\t\t\t\tsb.append(PARAMETER_MARKER);","130","\t\t\t\t\t}","131","\t\t\t\t\tsb.append(',');","132","\t\t\t\t\ti++;","133","\t\t\t\t}","134","\t\t\t}","135","\t\t\tfinal int columnConfigsLen = data.columnConfigs == null ? 0 : data.columnConfigs.length;","136","\t\t\tfinal List<ColumnConfig> columnConfigs = new ArrayList<>(columnConfigsLen);","137","\t\t\tif (data.columnConfigs != null) {","138","\t\t\t\tfor (final ColumnConfig config : data.columnConfigs) {","139","\t\t\t\t\tif (Strings.isNotEmpty(config.getLiteralValue())) {","140","\t\t\t\t\t\tsb.append(config.getLiteralValue());","141","\t\t\t\t\t} else {","142","\t\t\t\t\t\tsb.append(PARAMETER_MARKER);","143","\t\t\t\t\t\tcolumnConfigs.add(config);","144","\t\t\t\t\t}","145","\t\t\t\t\tsb.append(',');","146","\t\t\t\t}","147","\t\t\t}","341","\tprivate static void appendColumnNames(final String sqlVerb, final FactoryData data, final StringBuilder sb) {","342","\t\t\/\/ so this gets a little more complicated now that there are two ways to","343","\t\t\/\/ configure column mappings, but","344","\t\t\/\/ both mappings follow the same exact pattern for the prepared statement","345","\t\tint i = 1;","346","\t\tfinal String messagePattern = \"Appending {} {}[{}]: {}={} \";","347","\t\tif (data.columnMappings != null) {","348","\t\t\tfor (final ColumnMapping colMapping : data.columnMappings) {","349","\t\t\t\tfinal String columnName = colMapping.getName();","350","\t\t\t\tappendColumnName(i, columnName, sb);","351","\t\t\t\tlogger().trace(messagePattern, sqlVerb, colMapping.getClass().getSimpleName(), i, columnName,","352","\t\t\t\t\t\tcolMapping);","353","\t\t\t\ti++;","354","\t\t\t}","355","\t\t\tif (data.columnConfigs != null) {","356","\t\t\t\tfor (final ColumnConfig colConfig : data.columnConfigs) {","357","\t\t\t\t\tfinal String columnName = colConfig.getColumnName();","358","\t\t\t\t\tappendColumnName(i, columnName, sb);","359","\t\t\t\t\tlogger().trace(messagePattern, sqlVerb, colConfig.getClass().getSimpleName(), i, columnName,","360","\t\t\t\t\t\t\tcolConfig);","361","\t\t\t\t\ti++;","362","\t\t\t\t}","363","\t\t\t}","364","\t\t}","365","\t}","679","\tprivate void setFields(final MapMessage<?, ?> mapMessage) throws SQLException {","680","\t\tfinal IndexedReadOnlyStringMap map = mapMessage.getIndexedReadOnlyStringMap();","681","\t\tfinal String simpleName = statement.getClass().getName();","682","\t\tint j = 1; \/\/ JDBC indices start at 1","683","\t\tif (this.factoryData.columnMappings != null) {","684","\t\t\tfor (final ColumnMapping mapping : this.factoryData.columnMappings) {","685","\t\t\t\tif (mapping.getLiteralValue() == null) {","686","\t\t\t\t\tfinal String source = mapping.getSource();","687","\t\t\t\t\tfinal String key = Strings.isEmpty(source) ? mapping.getName() : source;","688","\t\t\t\t\tfinal Object value = map.getValue(key);","689","\t\t\t\t\tif (logger().isTraceEnabled()) {","690","\t\t\t\t\t\tfinal String valueStr = value instanceof String ? \"\\\"\" + value + \"\\\"\"","691","\t\t\t\t\t\t\t\t: Objects.toString(value, null);","692","\t\t\t\t\t\tlogger().trace(\"{} setObject({}, {}) for key '{}' and mapping '{}'\", simpleName, j, valueStr,","693","\t\t\t\t\t\t\t\tkey, mapping.getName());","694","\t\t\t\t\t}","695","\t\t\t\t\tsetStatementObject(j, mapping.getNameKey(), value);","696","\t\t\t\t\tj++;","697","\t\t\t\t}","698","\t\t\t}","699","\t\t}","700","\t}","756","\t\t\tif (this.factoryData.columnMappings != null) {","757","\t\t\t\tfor (final ColumnMapping mapping : this.factoryData.columnMappings) {","758","\t\t\t\t\tif (ThreadContextMap.class.isAssignableFrom(mapping.getType())","759","\t\t\t\t\t\t\t|| ReadOnlyStringMap.class.isAssignableFrom(mapping.getType())) {","760","\t\t\t\t\t\tthis.statement.setObject(j++, event.getContextData().toMap());","761","\t\t\t\t\t} else if (ThreadContextStack.class.isAssignableFrom(mapping.getType())) {","762","\t\t\t\t\t\tthis.statement.setObject(j++, event.getContextStack().asList());","763","\t\t\t\t\t} else if (Date.class.isAssignableFrom(mapping.getType())) {","764","\t\t\t\t\t\tthis.statement.setObject(j++, DateTypeConverter.fromMillis(event.getTimeMillis(),","765","\t\t\t\t\t\t\t\tmapping.getType().asSubclass(Date.class)));","766","\t\t\t\t\t} else {","767","\t\t\t\t\t\tfinal StringLayout layout = mapping.getLayout();","768","\t\t\t\t\t\tif (layout != null) {","769","\t\t\t\t\t\t\tif (Clob.class.isAssignableFrom(mapping.getType())) {","770","\t\t\t\t\t\t\t\tthis.statement.setClob(j++, new StringReader(layout.toSerializable(event)));","771","\t\t\t\t\t\t\t} else if (NClob.class.isAssignableFrom(mapping.getType())) {","772","\t\t\t\t\t\t\t\tthis.statement.setNClob(j++, new StringReader(layout.toSerializable(event)));","773","\t\t\t\t\t\t\t} else {","774","\t\t\t\t\t\t\t\tfinal Object value = TypeConverters.convert(layout.toSerializable(event),","775","\t\t\t\t\t\t\t\t\t\tmapping.getType(), null);","776","\t\t\t\t\t\t\t\tif (value == null) {","777","\t\t\t\t\t\t\t\t\t\/\/ TODO We might need to always initialize the columnMetaData to specify the","778","\t\t\t\t\t\t\t\t\t\/\/ type.","779","\t\t\t\t\t\t\t\t\tthis.statement.setNull(j++, Types.NULL);","780","\t\t\t\t\t\t\t\t} else {","781","\t\t\t\t\t\t\t\t\tsetStatementObject(j++, mapping.getNameKey(), value);","782","\t\t\t\t\t\t\t\t}","783","\t\t\t\t\t\t\t}","784","\t\t\t\t\t\t}","785","\t\t\t\t\t}","786","\t\t\t\t}","787","\t\t\t}"],"delete":["115","            for (final ColumnMapping mapping : data.columnMappings) {","116","                final String mappingName = mapping.getName();","117","                if (Strings.isNotEmpty(mapping.getLiteralValue())) {","118","                    logger().trace(\"Adding INSERT VALUES literal for ColumnMapping[{}]: {}={} \", i, mappingName,","119","                            mapping.getLiteralValue());","120","                    sb.append(mapping.getLiteralValue());","121","                } else if (Strings.isNotEmpty(mapping.getParameter())) {","122","                    logger().trace(\"Adding INSERT VALUES parameter for ColumnMapping[{}]: {}={} \", i, mappingName,","123","                            mapping.getParameter());","124","                    sb.append(mapping.getParameter());","125","                } else {","126","                    logger().trace(\"Adding INSERT VALUES parameter marker for ColumnMapping[{}]: {}={} \", i,","127","                            mappingName, PARAMETER_MARKER);","128","                    sb.append(PARAMETER_MARKER);","129","                }","130","                sb.append(',');","131","                i++;","132","            }","133","            final List<ColumnConfig> columnConfigs = new ArrayList<>(data.columnConfigs.length);","134","            for (final ColumnConfig config : data.columnConfigs) {","135","                if (Strings.isNotEmpty(config.getLiteralValue())) {","136","                    sb.append(config.getLiteralValue());","137","                } else {","138","                    sb.append(PARAMETER_MARKER);","139","                    columnConfigs.add(config);","140","                }","141","                sb.append(',');","142","            }","336","    private static void appendColumnNames(final String sqlVerb, final FactoryData data, final StringBuilder sb) {","337","        \/\/ so this gets a little more complicated now that there are two ways to configure column mappings, but","338","        \/\/ both mappings follow the same exact pattern for the prepared statement","339","        int i = 1;","340","        final String messagePattern = \"Appending {} {}[{}]: {}={} \";","341","        for (final ColumnMapping colMapping : data.columnMappings) {","342","            final String columnName = colMapping.getName();","343","            appendColumnName(i, columnName, sb);","344","            logger().trace(messagePattern, sqlVerb, colMapping.getClass().getSimpleName(), i, columnName, colMapping);","345","            i++;","346","        }","347","        for (final ColumnConfig colConfig : data.columnConfigs) {","348","            final String columnName = colConfig.getColumnName();","349","            appendColumnName(i, columnName, sb);","350","            logger().trace(messagePattern, sqlVerb, colConfig.getClass().getSimpleName(), i, columnName, colConfig);","351","            i++;","352","        }","353","    }","667","    private void setFields(final MapMessage<?, ?> mapMessage) throws SQLException {","668","        final IndexedReadOnlyStringMap map = mapMessage.getIndexedReadOnlyStringMap();","669","        final String simpleName = statement.getClass().getName();","670","        int j = 1; \/\/ JDBC indices start at 1","671","        for (final ColumnMapping mapping : this.factoryData.columnMappings) {","672","            if (mapping.getLiteralValue() == null) {","673","                final String source = mapping.getSource();","674","                final String key = Strings.isEmpty(source) ? mapping.getName() : source;","675","                final Object value = map.getValue(key);","676","                if (logger().isTraceEnabled()) {","677","                    final String valueStr = value instanceof String ? \"\\\"\" + value + \"\\\"\"","678","                            : Objects.toString(value, null);","679","                    logger().trace(\"{} setObject({}, {}) for key '{}' and mapping '{}'\", simpleName, j, valueStr, key,","680","                            mapping.getName());","681","                }","682","                setStatementObject(j, mapping.getNameKey(), value);","683","                j++;","684","            }","685","        }","686","    }","742","            for (final ColumnMapping mapping : this.factoryData.columnMappings) {","743","                if (ThreadContextMap.class.isAssignableFrom(mapping.getType())","744","                        || ReadOnlyStringMap.class.isAssignableFrom(mapping.getType())) {","745","                    this.statement.setObject(j++, event.getContextData().toMap());","746","                } else if (ThreadContextStack.class.isAssignableFrom(mapping.getType())) {","747","                    this.statement.setObject(j++, event.getContextStack().asList());","748","                } else if (Date.class.isAssignableFrom(mapping.getType())) {","749","                    this.statement.setObject(j++, DateTypeConverter.fromMillis(event.getTimeMillis(),","750","                            mapping.getType().asSubclass(Date.class)));","751","                } else {","752","                    final StringLayout layout = mapping.getLayout();","753","                    if (layout != null) {","754","                        if (Clob.class.isAssignableFrom(mapping.getType())) {","755","                            this.statement.setClob(j++, new StringReader(layout.toSerializable(event)));","756","                        } else if (NClob.class.isAssignableFrom(mapping.getType())) {","757","                            this.statement.setNClob(j++, new StringReader(layout.toSerializable(event)));","758","                        } else {","759","                            final Object value = TypeConverters.convert(layout.toSerializable(event), mapping.getType(),","760","                                    null);","761","                            if (value == null) {","762","                                \/\/ TODO We might need to always initialize the columnMetaData to specify the type.","763","                                this.statement.setNull(j++, Types.NULL);","764","                            } else {","765","                                setStatementObject(j++, mapping.getNameKey(), value);","766","                            }","767","                        }","768","                    }","769","                }","770","            }"]}]}},"6b6947540dc43dfa9829f219ef60222566586cc4":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/SizeBasedTriggeringPolicy.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/TimeBasedTriggeringPolicy.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/SizeBasedTriggeringPolicy.java":[{"add":["75","    public boolean isTriggeringEvent(final LogEvent event) {"],"delete":["75","    public synchronized boolean isTriggeringEvent(final LogEvent event) {"]}],"src\/changes\/changes.xml":[{"add":[],"delete":["48","      <action issue=\"LOG4J2-2106\" dev=\"rogers\" type=\"fix\">","49","        Reduce locking when checking for rollover.","50","      <\/action>"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/TimeBasedTriggeringPolicy.java":[{"add":["124","    public boolean isTriggeringEvent(final LogEvent event) {"],"delete":["124","    public synchronized boolean isTriggeringEvent(final LogEvent event) {"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":[{"add":["249","    public synchronized void checkRollover(final LogEvent event) {","250","        if (triggeringPolicy.isTriggeringEvent(event)) {","251","            rollover();","335","        triggeringPolicy.initialize(this);","336","        final TriggeringPolicy policy = this.triggeringPolicy;","337","        int count = 0;","338","        boolean policyUpdated = false;","339","        do {","340","            ++count;","341","        } while (!(policyUpdated = triggeringPolicyUpdater.compareAndSet(this, this.triggeringPolicy, triggeringPolicy))","342","                && count < MAX_TRIES);","343","        if (policyUpdated) {","344","            if (triggeringPolicy instanceof LifeCycle) {","345","                ((LifeCycle) triggeringPolicy).start();","347","            if (policy instanceof LifeCycle) {","348","                ((LifeCycle) policy).stop();","350","        } else {","351","            if (triggeringPolicy instanceof LifeCycle) {","352","                ((LifeCycle) triggeringPolicy).stop();","353","            }"],"delete":["31","import java.util.concurrent.locks.Lock;","32","import java.util.concurrent.locks.ReadWriteLock;","33","import java.util.concurrent.locks.ReentrantReadWriteLock;","70","    private final ReadWriteLock updateLock = new ReentrantReadWriteLock();","71","    private final Lock readLock = updateLock.readLock();","72","    private final Lock writeLock = updateLock.writeLock();","255","    public void checkRollover(final LogEvent event) {","256","        readLock.lock();","257","        try {","258","            if (triggeringPolicy.isTriggeringEvent(event)) {","259","                rollover();","260","            }","261","        } finally {","262","            readLock.unlock();","346","        writeLock.lock();","347","        try {","348","            triggeringPolicy.initialize(this);","349","            final TriggeringPolicy policy = this.triggeringPolicy;","350","            int count = 0;","351","            boolean policyUpdated = false;","352","            do {","353","                ++count;","355","            while (!(policyUpdated = triggeringPolicyUpdater.compareAndSet(this, this.triggeringPolicy, triggeringPolicy))","356","                    && count < MAX_TRIES);","357","            if (policyUpdated) {","358","                if (triggeringPolicy instanceof LifeCycle) {","359","                    ((LifeCycle) triggeringPolicy).start();","360","                }","361","                if (policy instanceof LifeCycle) {","362","                    ((LifeCycle) policy).stop();","363","                }","364","            } else {","365","                if (triggeringPolicy instanceof LifeCycle) {","366","                    ((LifeCycle) triggeringPolicy).stop();","367","                }","369","        } finally {","370","            writeLock.unlock();"]}]}},"5b1404b6b7ed4a3616111d507ebd819f8a07dd7d":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/MemoryMappedFileManager.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamManager.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingRandomAccessFileManager.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractOutputStreamAppender.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileManager.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingRandomAccessFileManagerTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/TcpSocketManager.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/RandomAccessFileManager.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/RandomAccessFileManagerTest.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/MemoryMappedFileManager.java":[{"add":["113","    protected synchronized void write(final byte[] bytes, int offset, int length, final boolean immediateFlush) {","114","        super.write(bytes, offset, length, immediateFlush); \/\/ writes to dummy output stream"],"delete":["113","    protected synchronized void write(final byte[] bytes, int offset, int length) {","114","        super.write(bytes, offset, length); \/\/ writes to dummy output stream"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamManager.java":[{"add":["119","    protected void write(final byte[] bytes, final int offset, final int length) {","120","        write(bytes, offset, length, false);","121","    }","122","    ","123","    \/**","124","     * Some output streams synchronize writes while others do not. Synchronizing here insures that","125","     * log events won't be intertwined.","126","     * @param bytes The serialized Log event.","127","     * @param offset The offset into the byte array.","128","     * @param length The number of bytes to write.","129","     * @param immediateFlush flushes immediately after writing.","130","     * @throws AppenderLoggingException if an error occurs.","131","     *\/","132","    protected synchronized void write(final byte[] bytes, final int offset, final int length, boolean immediateFlush) {","133","        \/\/ System.out.println(\"write \" + count);","136","            if (immediateFlush) {","137","                os.flush();","138","            }","151","        write(bytes, 0, bytes.length, false);","152","    }","153","","154","    \/**","155","     * Some output streams synchronize writes while others do not.","156","     * @param bytes The serialized Log event.","157","     * @param writeAndFlush If true, flushes after writing. ","158","     * @throws AppenderLoggingException if an error occurs.","159","     *\/","160","    protected void write(final byte[] bytes, boolean immediateFlush)  {","161","        write(bytes, 0, bytes.length, immediateFlush);"],"delete":["119","    protected synchronized void write(final byte[] bytes, final int offset, final int length)  {","120","        \/\/System.out.println(\"write \" + count);","135","        write(bytes, 0, bytes.length);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingRandomAccessFileManager.java":[{"add":["96","    protected synchronized void write(final byte[] bytes, int offset, int length, final boolean immediateFlush) {","97","        super.write(bytes, offset, length, immediateFlush); \/\/ writes to dummy output stream, needed to track file size","110","        if (immediateFlush || isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {"],"delete":["96","    protected synchronized void write(final byte[] bytes, int offset, int length) {","97","        super.write(bytes, offset, length); \/\/ writes to dummy output stream, needed to track file size","110","        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractOutputStreamAppender.java":[{"add":["108","            if (bytes != null && bytes.length > 0) {","109","                manager.write(bytes, this.immediateFlush || event.isEndOfBatch());"],"delete":["46","    private final ReadWriteLock rwLock = new ReentrantReadWriteLock();","47","    private final Lock readLock = rwLock.readLock();","48","","109","        readLock.lock();","112","            if (bytes.length > 0) {","113","                manager.write(bytes);","114","                if (this.immediateFlush || event.isEndOfBatch()) {","115","                    manager.flush();","116","                }","121","        } finally {","122","            readLock.unlock();"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileManager.java":[{"add":["78","    protected synchronized void write(final byte[] bytes, final int offset, final int length, final boolean immediateFlush)  {","92","                    super.write(bytes, offset, length, immediateFlush);","101","            super.write(bytes, offset, length, immediateFlush);"],"delete":["78","    protected synchronized void write(final byte[] bytes, final int offset, final int length)  {","92","                    super.write(bytes, offset, length);","101","            super.write(bytes, offset, length);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingRandomAccessFileManagerTest.java":[{"add":["68","        manager.write(data, 0, data.length, flushNow); \/\/ no buffer overflow exception","99","        manager.write(data, 0, data.length, flushNow); \/\/ no exception","148","        final boolean immediateFlush = true;","152","                        file.getAbsolutePath(), Strings.EMPTY, isAppend, immediateFlush, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE,","155","        manager.write(bytes, 0, bytes.length, immediateFlush);"],"delete":["68","        manager.write(data, 0, data.length); \/\/ no buffer overflow exception","99","        manager.write(data, 0, data.length); \/\/ no exception","151","                        file.getAbsolutePath(), Strings.EMPTY, isAppend, true, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE,","154","        manager.write(bytes, 0, bytes.length);"]}],"src\/changes\/changes.xml":[{"add":["39","      <action issue=\"LOG4J2-1230\" dev=\"ggregory\" type=\"fix\" due-to=\"Vladimir Hudec, Ralph Goers, Gary Gregory\">","40","        Don't concatenate SYSLOG Messages.","41","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/TcpSocketManager.java":[{"add":["118","    protected void write(final byte[] bytes, final int offset, final int length, boolean immediateFlush)  {","130","                final OutputStream outputStream = getOutputStream();","131","                outputStream.write(bytes, offset, length);","132","                if (immediateFlush) {","133","                    outputStream.flush();","134","                }"],"delete":["118","    protected void write(final byte[] bytes, final int offset, final int length)  {","130","                getOutputStream().write(bytes, offset, length);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":[{"add":["91","    protected synchronized void write(final byte[] bytes, final int offset, final int length, final boolean immediateFlush) {","93","        super.write(bytes, offset, length, immediateFlush);"],"delete":["91","    protected synchronized void write(final byte[] bytes, final int offset, final int length) {","93","        super.write(bytes, offset, length);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/RandomAccessFileManager.java":[{"add":["87","    protected synchronized void write(final byte[] bytes, int offset, int length, final boolean immediateFlush) {","88","        super.write(bytes, offset, length, immediateFlush); \/\/ writes to dummy output stream","101","        if (immediateFlush || isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {"],"delete":["87","    protected synchronized void write(final byte[] bytes, int offset, int length) {","88","        super.write(bytes, offset, length); \/\/ writes to dummy output stream","101","        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/RandomAccessFileManagerTest.java":[{"add":["132","        manager.write(bytes, 0, bytes.length, false);"],"delete":["132","        manager.write(bytes, 0, bytes.length);"]}]}},"dfdd4a58a05e4b3396a10935cfac3c23ff02f44f":{"changes":{"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxyTest.java":"ADD","src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxy.java":"MODIFY"},"diff":{"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxyTest.java":[{"add":[],"delete":[]}],"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-245\" dev=\"rgoers\" type=\"fix\">","25","        Avoid EmptyStack exception if getCallerClass and SecurityManager are not available.","26","      <\/action>","34","        Provide configuration information (location, content type, content if possible) via a registered Advertiser."],"delete":["31","        Provide configuration information (location, content type, content if possible) via a registered Advertiser. "]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxy.java":[{"add":["319","    StackTracePackageElement[] resolvePackageData(final Stack<Class<?>> stack, final Map<String,","338","        Class<?> clazz = stack.isEmpty() ? null : stack.peek();","345","            if (clazz != null && className.equals(clazz.getName())) {","350","                clazz = stack.isEmpty() ? null : stack.peek();","488","                if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier) &&","489","                    method.getParameterTypes().length == 1) {","538","    class CacheEntry {"],"delete":["319","    private StackTracePackageElement[] resolvePackageData(final Stack<Class<?>> stack, final Map<String,","338","        Class<?> clazz = stack.peek();","345","            if (className.equals(clazz.getName())) {","350","                clazz = stack.peek();","488","                if (method.getName().equals(\"getCallerClass\") && Modifier.isStatic(modifier)) {","537","    private class CacheEntry {"]}]}},"93a7235da78c562026993cdc4e3e5775c47e8099":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/MultiFormatStringBuilderFormattable.java":"ADD","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/MessagePatternConverter.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":[{"add":["27","import org.apache.logging.log4j.util.MultiFormatStringBuilderFormattable;","51","public class MapMessage<M extends MapMessage<M, V>, V> implements MultiFormatStringBuilderFormattable {","53","    private static final long serialVersionUID = -5031471831131487120L;","377","        return format(getFormat(formats), new StringBuilder()).toString();","378","    }","379","","380","    private MapFormat getFormat(final String[] formats) {","382","            return null;","387","                return mapFormat;","390","        return null;","454","    public void formatTo(String[] formats, StringBuilder buffer) {","455","        format(getFormat(formats), buffer);","456","    }","457","","458","    @Override"],"delete":["30","import org.apache.logging.log4j.util.StringBuilderFormattable;","51","public class MapMessage<M extends MapMessage<M, V>, V> implements MultiformatMessage, StringBuilderFormattable {","53","    private static final long serialVersionUID = -5031471831131487120L;    ","378","            return asString();","383","                return format(mapFormat, new StringBuilder()).toString();","386","        return asString();","387",""]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/MultiFormatStringBuilderFormattable.java":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/MessagePatternConverter.java":[{"add":["28","import org.apache.logging.log4j.util.MultiFormatStringBuilderFormattable;","118","            if (msg instanceof MultiFormatStringBuilderFormattable) {","119","                ((MultiFormatStringBuilderFormattable) msg).formatTo(formats, workingBuilder);","120","            } else {","121","                ((StringBuilderFormattable) msg).formatTo(workingBuilder);","122","            }"],"delete":["116","            final StringBuilderFormattable stringBuilderFormattable = (StringBuilderFormattable) msg;","118","            stringBuilderFormattable.formatTo(workingBuilder);"]}]}},"28fe5535fdc32ef7271981fc36407e4324d08e9e":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/DatePatternConverterTest.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/DatePatternConverterTest.java":[{"add":["213","    public void testFormatLogEventStringBuilderIso8601TimezoneOffsetHHCMM() {","227","    public void testFormatLogEventStringBuilderIso8601TimezoneOffsetHHMM() {"],"delete":["213","    public void testFormatLogEventStringBuilderIso8601TimezoneOffset() {","227","    public void testFormatLogEventStringBuilderIso8601TimezoneOffsetXX() {"]}]}},"0ae9948d75cb65538fb70aa0c4dbca48db45e5c7":{"changes":{"src\/changes\/changes.xml":"MODIFY","pom.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["69","      <action issue=\"LOG4J2-1249\" dev=\"ggregory\" type=\"update\">","70","        Update Jackson from 2.6.4 to 2.7.0.","71","      <\/action>"],"delete":[]}],"pom.xml":[{"add":["192","    <jackson2Version>2.7.0<\/jackson2Version>"],"delete":["192","    <jackson2Version>2.6.4<\/jackson2Version>"]}]}},"51da8e2a50a841bbe1aafe929e3ef29d2f3aa1f2":{"changes":{"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/util\/SortedArrayStringMapTest.java":"MODIFY","log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/config\/TestConfigurator.java":"MODIFY","log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/LoggerJira3410Test.java":"ADD","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/SortedArrayStringMap.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/util\/SortedArrayStringMapTest.java":[{"add":["62","    public void testConstructorNonStringKeys() {","63","        Map<Object, Integer> map = new HashMap<>(1);","64","        map.put(Long.MAX_VALUE, 1);","65","        map.put(null, null);","66","        SortedArrayStringMap sMap = new SortedArrayStringMap((Map) map);","67","        assertEquals(1, (int) sMap.getValue(Long.toString(Long.MAX_VALUE)));","68","        assertEquals((Integer) null, sMap.getValue(null));","69","    }","70","","71","    @Test"],"delete":[]}],"log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/config\/TestConfigurator.java":[{"add":["35","    public static LoggerContext configure(final String configLocation) throws IOException {"],"delete":["35","    static LoggerContext configure(final String configLocation) throws IOException {"]}],"log4j-1.2-api\/src\/test\/java\/org\/apache\/log4j\/LoggerJira3410Test.java":[{"add":[],"delete":[]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/SortedArrayStringMap.java":[{"add":["74","    private static final String[] EMPTY = Strings.EMPTY_ARRAY;","153","            \/\/ The key might not actually be a String.","154","            putValue(Objects.toString(entry.getKey(), null), entry.getValue());"],"delete":["74","    private static final String[] EMPTY = {};","153","            putValue(entry.getKey(), entry.getValue());"]}],"src\/changes\/changes.xml":[{"add":["234","      <action issue=\"LOG4J2-3410\" dev=\"ggregory\" type=\"fix\" due-to=\"Barry Sham, Gary Gregory\">","235","        Log4j 1.2 bridge throws a ClassCastException when logging a Map with non-String keys.","236","      <\/action>"],"delete":[]}]}},"6478f94c0851540372748f0af8b2bf83b07d7cb1":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/YamlLayout.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayout.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractStringLayout.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/YamlLayout.java":[{"add":["730","        final String str = serializeToString(getHeaderSerializer());","750","        final String str = serializeToString(getFooterSerializer());"],"delete":["34","import org.apache.logging.log4j.core.impl.DefaultLogEventFactory;","731","        final String str = serializeToString(getHeaderSerializer(), DefaultLogEventFactory.getInstance());","751","        final String str = serializeToString(getFooterSerializer(), DefaultLogEventFactory.getInstance());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayout.java":[{"add":["830","        final String str = serializeToString(getHeaderSerializer());","850","        final String str = serializeToString(getFooterSerializer());"],"delete":["34","import org.apache.logging.log4j.core.impl.DefaultLogEventFactory;","831","        final String str = serializeToString(getHeaderSerializer(), DefaultLogEventFactory.getInstance());","851","        final String str = serializeToString(getFooterSerializer(), DefaultLogEventFactory.getInstance());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractStringLayout.java":[{"add":["193","        return serializeToBytes(footerSerializer, super.getFooter());","207","        return serializeToBytes(headerSerializer, super.getHeader());","214","    protected DefaultLogEventFactory getLogEventFactory() {","215","        return DefaultLogEventFactory.getInstance();","216","    }","217","","230","    protected byte[] serializeToBytes(final Serializer serializer, final byte[] defaultValue) {","231","        final String serializable = serializeToString(serializer);","238","    protected String serializeToString(final Serializer serializer) {","244","        final LogEvent logEvent = getLogEventFactory().createEvent(rootLogger.getName(), null, Strings.EMPTY,"],"delete":["23","import org.apache.logging.log4j.core.impl.LogEventFactory;","194","        return serializeToBytes(footerSerializer, super.getFooter(), DefaultLogEventFactory.getInstance());","208","        return serializeToBytes(headerSerializer, super.getHeader(), DefaultLogEventFactory.getInstance());","227","    protected byte[] serializeToBytes(final Serializer serializer, final byte[] defaultValue, final LogEventFactory logEventFactory) {","228","        final String serializable = serializeToString(serializer, logEventFactory);","235","    protected String serializeToString(final Serializer serializer, final LogEventFactory logEventFactory) {","241","        final LogEvent logEvent = logEventFactory.createEvent(rootLogger.getName(), null, Strings.EMPTY,"]}]}},"20341b6b41ade4d35c4aa78d446b101e8b0b0a50":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Charsets.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-257\" dev=\"ggregory\" type=\"fix\">","25","        XML layout ignores charset for the XML processing intruction's encoding attribute.","26","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":[{"add":["200","        sbuf.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"\");","201","        sbuf.append(this.getCharset().name());","202","        sbuf.append(\"\\\"?>\\r\\n\");","204","        return sbuf.toString().getBytes(this.getCharset());","271","     * Creates an XML Layout.","272","     * ","276","     * @param charsetName The character set to use, if {@code null}, uses UTF-8.","284","        final Charset charset = Charsets.getSupportedCharset(charsetName, Charsets.UTF_8);"],"delete":["200","        sbuf.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\");","202","        return sbuf.toString().getBytes(getCharset());","269","     * Create an XML Layout.","273","     * @param charsetName The character set to use.","281","        final Charset charset = Charsets.getSupportedCharset(charsetName);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":[{"add":["94","        final String string = list.get(0);","95","        assertTrue(\"Incorrect header: \" + string, string.equals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"));"],"delete":["94","        assertTrue(\"Incorrect header\", list.get(0).equals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"));"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Charsets.java":[{"add":["28","     * UTF-8 Charset.","29","     *\/","30","    public static final Charset UTF_8 = Charset.forName(\"UTF-8\");","31","","32","    \/**","33","     * Returns a Charset, if possible the Charset for the specified {@code charsetName}, otherwise (if the specified","34","     * {@code charsetName} is {@code null} or not supported) this method returns the platform default Charset.","41","        return getSupportedCharset(charsetName, Charset.defaultCharset());","42","    }","43","","44","    \/**","45","     * Returns a Charset, if possible the Charset for the specified {@code charsetName}, otherwise (if the specified","46","     * {@code charsetName} is {@code null} or not supported) this method returns the platform default Charset.","47","     *","48","     * @param charsetName","49","     *            name of the preferred charset or {@code null}","50","     * @param defaultCharset","51","     *            returned if {@code charsetName} is null or is not supported.","52","     * @return a Charset, never null.","53","     *\/","54","    public static Charset getSupportedCharset(final String charsetName, final Charset defaultCharset) {","62","            charset = defaultCharset;","64","                StatusLogger.getLogger().error(","65","                        \"Charset \" + charsetName + \" is not supported for layout, using \" + charset.displayName());","71","    private Charsets() {","72","    }","73",""],"delete":["26","    ","27","    public static final Charset UTF_8 = Charset.forName(\"UTF-8\");","28","","29","    private Charsets() {","30","    }","33","     * Returns a Charset, if possible the Charset for the specified {@code charsetName},","34","     * otherwise (if the specified {@code charsetName} is {@code null} or not supported)","35","     * this method returns the platform default Charset.","49","            charset = Charset.defaultCharset();","51","                StatusLogger.getLogger().error(\"Charset \" + charsetName + \" is not supported for layout, using \" +","52","                    charset.displayName());"]}]}},"641014d17ac8296a6925d828f74c958c8f587725":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/DatePatternConverterTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/datetime\/FixedDateFormat.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/DatePatternConverterTest.java":[{"add":["204","    public void testFormatDateStringBuilderIso8601BasicWithPeriod() {","205","        final String[] pattern = {FixedDateFormat.FixedFormat.ISO8601_BASIC_PERIOD.name()};","206","        final DatePatternConverter converter = DatePatternConverter.newInstance(pattern);","207","        final StringBuilder sb = new StringBuilder();","208","        converter.format(date(2001, 1, 1), sb);","209","","210","        final String expected = \"20010201T141516.123\";","211","        assertEquals(expected, sb.toString());","212","    }","213","","214","    @Test"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/util\/datetime\/FixedDateFormat.java":[{"add":["78","         * ISO8601_BASIC time format: {@code \"yyyyMMdd'T'HHmmss.SSS\"}.","79","         *\/","80","        ISO8601_BASIC_PERIOD(\"yyyyMMdd'T'HHmmss.SSS\", \"yyyyMMdd'T'\", 2, ' ', 0, '.', 1),","81","","82","        \/**"],"delete":[]}]}},"e7e58a32492444b349b3f65f964239e5b8093920":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/CronTriggeringPolicyTest.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/CronTriggeringPolicyTest.java":[{"add":["28","    private static final String FILE_PATTERN = \"testcmd.log.%d{yyyy-MM-dd}\";\r","29","    private static final String FILE_NAME = \"testcmd.log\";\r","30","    private static final String CRON_EXPRESSION = \"0 0 0 * * ?\";\r","31","    \r","40","        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), CRON_EXPRESSION);\r","51","            .withFileName(FILE_NAME)\r","52","            .withFilePattern(FILE_PATTERN)\r","84","        try (RollingFileManager fileManager = RollingFileManager.getFileManager(FILE_NAME,\r","85","                FILE_PATTERN, true, true, triggerPolicy, rolloverStrategy, null,\r"],"delete":["36","        return CronTriggeringPolicy.createPolicy(configuration, Boolean.TRUE.toString(), \"0 0 0 * * ?\");\r","47","            .withFileName(\"testcmd.log\")\r","48","            .withFilePattern(\"testcmd.log.%d{yyyy-MM-dd}\")\r","80","        try (RollingFileManager fileManager = RollingFileManager.getFileManager(\"testcmd.log\",\r","81","                \"testcmd.log.%d{yyyy-MM-dd}\", true, true, triggerPolicy, rolloverStrategy, null,\r"]}]}},"432c4fbc2cd9a2ca0bd63a5335ae031d8a9721f8":{"changes":{"log4j-mongodb3\/pom.xml":"MODIFY","log4j-mongodb2\/pom.xml":"MODIFY"},"diff":{"log4j-mongodb3\/pom.xml":[{"add":["95","      <!-- workaround flaky \"Operation not permitted\" failures when running tests in parallel -->","96","      <plugin>","97","        <artifactId>maven-surefire-plugin<\/artifactId>","98","        <configuration>","99","          <forkCount>1<\/forkCount>","100","          <reuseForks>false<\/reuseForks>","101","        <\/configuration>","102","      <\/plugin>"],"delete":[]}],"log4j-mongodb2\/pom.xml":[{"add":["91","      <!-- workaround flaky \"Operation not permitted\" failures when running tests in parallel -->","92","      <plugin>","93","        <artifactId>maven-surefire-plugin<\/artifactId>","94","        <configuration>","95","          <forkCount>1<\/forkCount>","96","          <reuseForks>false<\/reuseForks>","97","        <\/configuration>","98","      <\/plugin>"],"delete":[]}]}},"b19e669917f4907d405ea8a56808766cd43618d0":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfiguration.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigHelper.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","samples\/flume-common\/src\/main\/java\/org\/apache\/logging\/log4j\/samples\/app\/LoggingController.java":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":[{"add":["82","     *","130","        \/* only stop disruptor if shutting down logging subsystem","135","        } *\/","142","     *"],"delete":["82","     * ","130","        \/\/ only stop disruptor if shutting down logging subsystem","135","        }","142","     * "]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":[{"add":["143","        for (final LoggerConfig logger : loggers.values()) {","144","            logger.clearAppenders();","145","            logger.stopFilter();","146","        }","147","        root.stopFilter();"],"delete":["138","        for (final LoggerConfig logger : loggers.values()) {","139","            logger.clearAppenders();","140","            logger.stopFilter();","141","        }"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfiguration.java":[{"add":["228","        if (rootElement == null) {","229","            LOGGER.error(\"No logging configuration\");","230","            return;","231","        }"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfigHelper.java":[{"add":["65","    private static ExecutorService executor = Executors.newSingleThreadExecutor();","66","","67","    private static volatile int count = 0;","100","        ++count;","217","    public synchronized void shutdown() {","218","        if (--count > 0) {","219","            return;","220","        }"],"delete":["65","    private static ExecutorService executor = Executors","66","            .newSingleThreadExecutor();","215","    public void shutdown() {"]}],"src\/changes\/changes.xml":[{"add":["25","      <action issue=\"LOG4J2-222\" dev=\"rgoers\" type=\"fix\">","26","        Disruptor will now shutdown during Tomcat shutdown.","27","      <\/action>"],"delete":[]}],"samples\/flume-common\/src\/main\/java\/org\/apache\/logging\/log4j\/samples\/app\/LoggingController.java":[{"add":["69","                ThreadContext.clear();","70","","71","                RequestContext.setSessionId(\"session1234\");","72","                RequestContext.setIpAddress(\"127.0.0.1\");","73","                RequestContext.setClientId(\"02121\");","74","                RequestContext.setProductName(\"IB\");","75","                RequestContext.setProductVersion(\"4.18.1\");","76","                RequestContext.setLocale(\"en_US\");","77","                RequestContext.setRegion(\"prod\");","108","                ThreadContext.cloneStack();"],"delete":["52","    public LoggingController() {","53","","54","        ThreadContext.clear();","55","","56","        RequestContext.setSessionId(\"session1234\");","57","        RequestContext.setIpAddress(\"127.0.0.1\");","58","        RequestContext.setClientId(\"02121\");","59","        RequestContext.setProductName(\"IB\");","60","        RequestContext.setProductVersion(\"4.18.1\");","61","        RequestContext.setLocale(\"en_US\");","62","        RequestContext.setRegion(\"prod\");","63","    }","64",""]}]}},"ab548ce56dfab2c8db9ecc97365e8f734949509a":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":[{"add":["270","        return level == null ? parent == null ? Level.ERROR : parent.getLevel() : level;"],"delete":["270","        return level == null ? parent.getLevel() : level;"]}],"src\/changes\/changes.xml":[{"add":["33","      <action issue=\"LOG4J2-2316\" dev=\"rgoers\" type=\"fix\">","34","        If root LoggerConfig does not have a Level return ERROR.","35","      <\/action>"],"delete":[]}]}},"c59170b527f59304dfcbf1d5fca5ea19b88776de":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/PropertiesUtil.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":[],"delete":["83","      <action issue=\"LOG4J2-2327\" dev=\"ggregory\" type=\"fix\" due-to=\"leor amikam\">","84","        java.util.ServiceConfigurationError: org.apache.logging.log4j.util.PropertySource: Provider org.apache.logging.log4j.util.EnvironmentPropertySource not a subtype.","85","      <\/action>"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/PropertiesUtil.java":[{"add":["318","            for (final PropertySource source : ServiceLoader.load(PropertySource.class)) {"],"delete":["318","            Class<PropertySource> serviceClass = PropertySource.class;","319","            for (final PropertySource source : ServiceLoader.load(serviceClass, serviceClass.getClassLoader())) {"]}]}},"1628072b24e0b5860a57992f3cc4ff956a1ea6e9":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["51","      <action issue=\"LOG4J2-2337\" dev=\"ggregory\" type=\"add\" due-to=\"Arvind Sahare, Patrice Ferrot\">\r","52","        Allow custom end-of-line with JsonLayout.\r","53","      <\/action>\r"],"delete":[]}]}},"7268c2d4464c5fb058d0fd520d11944105350193":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/LoggerContext.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/LogManager.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/LoggerContext.java":[{"add":["270","                    throw new IllegalStateException(","271","                            \"Unable to register Log4j shutdown hook because JVM is shutting down.\", e);"],"delete":["270","                    LOGGER.error(SHUTDOWN_HOOK_MARKER,","271","                            \"Unable to register shutdown hook because JVM is shutting down.\", e);"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/LogManager.java":[{"add":["153","        try {","154","            return factory.getContext(FQCN, null, null, true);","155","        } catch (IllegalStateException ex) {","156","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","157","            return new SimpleLoggerContextFactory().getContext(FQCN, null, null, true);","158","        }","172","        try {","173","            return factory.getContext(FQCN, null, null, currentContext, null, null);","174","        } catch (IllegalStateException ex) {","175","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","176","            return new SimpleLoggerContextFactory().getContext(FQCN, null, null, currentContext, null, null);","177","        }","192","        try {","193","            return factory.getContext(FQCN, loader, null, currentContext);","194","        } catch (IllegalStateException ex) {","195","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","196","            return new SimpleLoggerContextFactory().getContext(FQCN, loader, null, currentContext);","197","        }","214","        try {","215","            return factory.getContext(FQCN, loader, externalContext, currentContext);","216","        } catch (IllegalStateException ex) {","217","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","218","            return new SimpleLoggerContextFactory().getContext(FQCN, loader, externalContext, currentContext);","219","        }","236","        try {","237","            return factory.getContext(FQCN, loader, null, currentContext, configLocation, null);","238","        } catch (IllegalStateException ex) {","239","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","240","            return new SimpleLoggerContextFactory().getContext(FQCN, loader, null, currentContext, configLocation,","241","                    null);","242","        }","260","        try {","261","            return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, null);","262","        } catch (IllegalStateException ex) {","263","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","264","            return new SimpleLoggerContextFactory().getContext(FQCN, loader, externalContext, currentContext,","265","                    configLocation, null);","266","        }","285","        try {","286","            return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, name);","287","        } catch (IllegalStateException ex) {","288","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","289","            return new SimpleLoggerContextFactory().getContext(FQCN, loader, externalContext, currentContext,","290","                    configLocation, name);","291","        }","305","        try {","306","            return factory.getContext(fqcn, null, null, currentContext);","307","        } catch (IllegalStateException ex) {","308","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","309","            return new SimpleLoggerContextFactory().getContext(fqcn, null, null, currentContext);","310","        }","327","        try {","328","            return factory.getContext(fqcn, loader, null, currentContext);","329","        } catch (IllegalStateException ex) {","330","            LOGGER.warn(ex.getMessage() + \" Using SimpleLogger\");","331","            return new SimpleLoggerContextFactory().getContext(fqcn, loader, null, currentContext);","332","        }"],"delete":["153","        return factory.getContext(FQCN, null, null, true);","167","        return factory.getContext(FQCN, null, null, currentContext, null, null);","182","        return factory.getContext(FQCN, loader, null, currentContext);","199","        return factory.getContext(FQCN, loader, externalContext, currentContext);","216","        return factory.getContext(FQCN, loader, null, currentContext, configLocation, null);","234","        return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, null);","253","        return factory.getContext(FQCN, loader, externalContext, currentContext, configLocation, name);","267","        return factory.getContext(fqcn, null, null, currentContext);","284","        return factory.getContext(fqcn, loader, null, currentContext);"]}]}},"0c9679947dbd183700ef398c5d428dcf138b0176":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileManager.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/FastRollingFileManagerTest.java":"ADD","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/FastRollingFileManager.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileManagerTest.java":"ADD"},"diff":{"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-295\" dev=\"rpopma\" type=\"fix\">","24","        Fast(Rolling)FileAppender now correctly handles messages exceeding the buffer size.","25","      <\/action>","26","      <action issue=\"LOG4J2-271\" dev=\"rpopma\" type=\"fix\">","27","        FastRollingFileAppender with TimeBasedTriggeringPolicy now works correctly if append=false.","28","      <\/action>","29","      <action issue=\"LOG4J2-267\" dev=\"rpopma\" type=\"fix\">","30","        FastRollingFileAppender with TimeBasedTriggeringPolicy now works correctly if append=false.","31","      <\/action>","32","      <action issue=\"LOG4J2-292\" dev=\"rpopma\" type=\"fix\">","33","        Fast(Rolling)FileAppender now correctly appends to (does not overwrite) existing file.","34","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileManager.java":[{"add":["34","    static final int DEFAULT_BUFFER_SIZE = 256 * 1024;","44","    protected FastFileManager(final RandomAccessFile file,","45","            final String fileName, final OutputStream os,","46","            final boolean immediateFlush, final String advertiseURI,","60","     * ","62","     * @param append true if the file should be appended to, false if it should","63","     *            be overwritten.","64","     * @param isFlush true if the contents should be flushed to disk on every","65","     *            write","70","    public static FastFileManager getFileManager(final String fileName,","71","            final boolean append, final boolean isFlush,","72","            final String advertiseURI, final Layout layout) {","73","        return (FastFileManager) getManager(fileName, new FactoryData(append,","74","                isFlush, advertiseURI, layout), FACTORY);","89","        int chunk = 0;","90","        do {","91","            if (length > buffer.remaining()) {","92","                flush();","93","            }","94","            chunk = Math.min(length, buffer.remaining());","95","            buffer.put(bytes, offset, chunk);","96","            offset += chunk;","97","            length -= chunk;","98","        } while (length > 0);","99","","130","     * ","138","    static class DummyOutputStream extends OutputStream {","152","     * ","174","         * ","177","        public FactoryData(final boolean append, final boolean immediateFlush,","178","                final String advertiseURI, final Layout layout) {","189","    private static class FastFileManagerFactory implements","190","            ManagerFactory<FastFileManager, FactoryData> {","194","         * ","214","                if (data.append) {","215","                    raf.seek(raf.length());","216","                } else {","217","                    raf.setLength(0);","218","                }","219","                return new FastFileManager(raf, name, os, data.immediateFlush,","220","                        data.advertiseURI, data.layout);"],"delete":["34","    private static final int DEFAULT_BUFFER_SIZE = 256 * 1024;","44","    protected FastFileManager(final RandomAccessFile file, final String fileName,","45","            final OutputStream os, final boolean immediateFlush, final String advertiseURI,","59","     *","61","     * @param append true if the file should be appended to, false if it should be overwritten.","62","     * @param isFlush true if the contents should be flushed to disk on every write","67","    public static FastFileManager getFileManager(final String fileName, final boolean append,","68","                                                 final boolean isFlush, final String advertiseURI,","69","                                                 final Layout layout) {","70","        return (FastFileManager) getManager(fileName, new FactoryData(append, isFlush, advertiseURI, layout), FACTORY);","85","        if (length > buffer.remaining()) {","86","            flush();","87","        }","88","        buffer.put(bytes, offset, length);","119","     *","127","    private static class DummyOutputStream extends OutputStream {","141","     *","163","         *","166","        public FactoryData(final boolean append, final boolean immediateFlush, final String advertiseURI,","167","                           final Layout layout) {","178","    private static class FastFileManagerFactory implements ManagerFactory<FastFileManager, FactoryData> {","182","         *","202","                return new FastFileManager(raf, name, os, data.immediateFlush, data.advertiseURI, data.layout);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/FastRollingFileManagerTest.java":[{"add":[],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/FastRollingFileManager.java":[{"add":["34","    static final int DEFAULT_BUFFER_SIZE = 256 * 1024;","76","        int chunk = 0;","77","        do {","78","            if (length > buffer.remaining()) {","79","                flush();","80","            }","81","            chunk = Math.min(length, buffer.remaining());","82","            buffer.put(bytes, offset, chunk);","83","            offset += chunk;","84","            length -= chunk;","85","        } while (length > 0);","86","","142","","146","            final long size = data.append ? file.length() : 0;","147","            final long time = file.exists() ? file.lastModified() : System.currentTimeMillis();","152","                if (data.append) {","153","                    raf.seek(raf.length());","154","                } else {","155","                    raf.setLength(0);","156","                }","159","            } catch (IOException ex) {","167","    static class DummyOutputStream extends OutputStream {"],"delete":["19","import java.io.FileNotFoundException;","35","    private static final int DEFAULT_BUFFER_SIZE = 256 * 1024;","77","        if (length > buffer.remaining()) {","78","            flush();","79","        }","80","        buffer.put(bytes, offset, length);","139","            long size = data.append ? file.length() : 0;","140","            long time = file.lastModified();","147","            } catch (FileNotFoundException ex) {","155","    private static class DummyOutputStream extends OutputStream {"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileManagerTest.java":[{"add":[],"delete":[]}]}},"ee93748657228484ece309dc3f1c771a36fbe714":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["31","    <release version=\"2.18.0\" date=\"2022-TBD\" description=\"GA Release 2.18.0\">","32","      <action issue=\"LOG4J2-3413\" date=\"2022-02-26\" type=\"fix\" due-to=\"Piotr Karwasz\">","33","        Fix resolution of non-Log4j properties.","34","      <\/action>","35","    <\/release>"],"delete":[]}]}},"d6b7f4832a3562d615b7f251aff7c3d51107c0c2":{"changes":{"\/dev\/null":"DELETE","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/LoggerContext.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/AbstractConfiguration.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParserTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLogger.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerTestNanoTime.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/Configuration.java":"MODIFY"},"diff":{"\/dev\/null":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/LoggerContext.java":[{"add":["83","     *","92","     *","102","     *","151","     *","227","     *","319","","322","     *","328","","331","     *","341","     *","350","     *","360","     *","384","     *","392","        \/\/ Note: This is the only method where we add entries to the 'loggers' ivar.","410","     *","421","     *","432","     *","453","     *","462","     *","471","     *","507","            Log4jLogEvent.setNanoClock(configuration.getNanoClock());","508","","534","     *","543","     *","588","     *"],"delete":["41","import org.apache.logging.log4j.core.util.NanoClockFactory;","84","     * ","93","     * ","103","     * ","152","     * ","228","     * ","320","    ","323","     * ","329","    ","332","     * ","342","     * ","351","     * ","361","     * ","385","     * ","393","        \/\/ Note: This is the only method where we add entries to the 'loggers' ivar. ","411","     * ","422","     * ","433","     * ","454","     * ","463","     * ","472","     * ","508","            Log4jLogEvent.setNanoClock(NanoClockFactory.createNanoClock());","509","            ","535","     * ","544","     * ","589","     * "]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/AbstractConfiguration.java":[{"add":["42","import org.apache.logging.log4j.core.util.DummyNanoClock;","45","import org.apache.logging.log4j.core.util.NanoClock;","90","","121","    private NanoClock nanoClock = new DummyNanoClock();","272","","276","","292","","309","","343","","538","     *","547","     *","557","     *","567","     *","577","     *","589","     *","599","     *","638","     *","665","     *","690","     *","713","     *","729","     *","740","     *","762","     *","772","     *","782","     *","952","    @Override","953","    public NanoClock getNanoClock() {","954","        return nanoClock;","955","    }","956","","957","    @Override","958","    public void setNanoClock(final NanoClock nanoClock) {","959","        this.nanoClock = Objects.requireNonNull(nanoClock, \"nanoClock\");","960","    }"],"delete":["88","    ","119","","270","        ","274","        ","290","                ","307","        ","341","    ","536","     * ","545","     * ","555","     * ","565","     * ","575","     * ","587","     * ","597","     * ","636","     * ","663","     * ","688","     * ","711","     * ","727","     * ","738","     * ","760","     * ","770","     * ","780","     * "]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParserTest.java":[{"add":["28","import org.apache.logging.log4j.core.config.Configuration;","29","import org.apache.logging.log4j.core.config.NullConfiguration;","32","import org.apache.logging.log4j.core.util.DummyNanoClock;","33","import org.apache.logging.log4j.core.util.SystemNanoClock;","116","        final String expected = \"INFO  [PatternParserTest        :100 ] - Hello, world\" + Constants.LINE_SEPARATOR;","162","","169","","188","","228","","236","","244","","246","    public void testNanoPatternShortChangesConfigurationNanoClock() {","247","        Configuration config = new NullConfiguration();","248","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","249","","250","        PatternParser pp = new PatternParser(config, KEY, null);","251","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","252","","253","        pp.parse(\"%m\");","254","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","255","","256","        pp.parse(\"%nano\"); \/\/ this changes the config clock","257","        assertTrue(config.getNanoClock() instanceof SystemNanoClock);","259","","262","        Configuration config = new NullConfiguration();","263","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","264","","265","        PatternParser pp = new PatternParser(config, KEY, null);","266","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","267","","268","        pp.parse(\"%m\");","269","        assertTrue(config.getNanoClock() instanceof DummyNanoClock);","270","","271","        pp.parse(\"%N\");","272","        assertTrue(config.getNanoClock() instanceof SystemNanoClock);"],"delete":["30","import org.apache.logging.log4j.core.util.NanoClockFactory;","113","        final String expected = \"INFO  [PatternParserTest        :97  ] - Hello, world\" + Constants.LINE_SEPARATOR;","159","    ","166","        ","185","        ","225","    ","233","    ","241","    ","243","    public void testNanoPatternShortChangesNanoClockFactoryMode() {","244","        parser.parse(\"%m\");","245","        assertEquals(NanoClockFactory.Mode.Dummy, NanoClockFactory.getMode());","246","        parser.parse(\"%nano\");","247","        assertEquals(NanoClockFactory.Mode.System, NanoClockFactory.getMode());","249","    ","252","        parser.parse(\"%m\");","253","        assertEquals(NanoClockFactory.Mode.Dummy, NanoClockFactory.getMode());","254","        parser.parse(\"%N\");","255","        assertEquals(NanoClockFactory.Mode.System, NanoClockFactory.getMode());"]}],"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1248\" dev=\"rpopma\" type=\"fix\">","27","        Fixed broken nanotime in pattern layout.","28","      <\/action>","34","        Make PatternLayout header and footer accept a pattern.","37","        Make header and footer values customizable in JSONLayout.","40","        Make CSV Layout header and footers accept patterns.","41","      <\/action>","70","        Misleading Value In Properties Example."],"delete":["31","        Make PatternLayout header and footer accept a pattern. ","34","        Make header and footer values customizable in JSONLayout. ","37","        Make CSV Layout header and footers accept patterns. ","38","      <\/action>      ","67","        Misleading Value In Properties Example.        "]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLogger.java":[{"add":["90","        nanoClock = context.getConfiguration().getNanoClock();","101","        nanoClock = newConfig.getNanoClock();"],"delete":["34","import org.apache.logging.log4j.core.util.NanoClockFactory;","91","        nanoClock = NanoClockFactory.createNanoClock(); \/\/ based on initial configuration","102","        nanoClock = NanoClockFactory.createNanoClock();"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":[{"add":["31","import org.apache.logging.log4j.core.util.SystemNanoClock;","178","                \/\/ LOG4J2-1248 set config nanoclock","179","                if (config != null) {","180","                    config.setNanoClock(new SystemNanoClock());","181","                }","221","     * @param start","259","     * @param start","570","     * @param start"],"delete":["31","import org.apache.logging.log4j.core.util.NanoClockFactory;","175","        NanoClockFactory.setMode(NanoClockFactory.Mode.Dummy); \/\/ LOG4J2-1074 use dummy clock by default","179","                \/\/ LoggerContext will notify known NanoClockFactory users that the configuration has changed.","180","                NanoClockFactory.setMode(NanoClockFactory.Mode.System);","220","     * @param i","258","     * @param i","569","     * @param i"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerTestNanoTime.java":[{"add":["61","        final long DUMMYNANOTIME = -53;","62","        log.getContext().getConfiguration().setNanoClock(new DummyNanoClock(DUMMYNANOTIME));","63","        log.updateConfiguration(log.getContext().getConfiguration());","64","","67","","70","","88",""],"delete":["28","import org.apache.logging.log4j.core.util.NanoClockFactory;","29","import org.apache.logging.log4j.core.util.NanoClockFactory.Mode;","63","        NanoClockFactory.setMode(Mode.Dummy);","64","        final long DUMMYNANOTIME = 0;","65","        ","68","        ","71","        ","89","        "]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/Configuration.java":[{"add":["31","import org.apache.logging.log4j.core.util.NanoClock;","44","     *","52","     *","60","     *","69","     *","126","     *","144","     *","154","     *","175","    \/**","176","     * Returns the {@link NanoClock} instance for this configuration.","177","     *","178","     * @return the nano clock","179","     *\/","180","    NanoClock getNanoClock();","181","","182","    \/**","183","     * Sets the {@link NanoClock} instance for this configuration.","184","     *","185","     * @param nanoClock the new nano clock for this configuration. Must be non-null.","186","     *\/","187","    void setNanoClock(NanoClock nanoClock);"],"delete":["43","     * ","51","     * ","59","     * ","68","     * ","125","     * ","143","     * ","153","     * "]}]}},"ede615ce054d71ba3c2c252b416dada441ed42ea":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["89","      <action issue=\"LOG4J2-2331\" dev=\"ckozak\" type=\"fix\" due-to=\"Mike Baranski\">","90","        RollingFileManager debug logging avoids string concatenation and errant braces in favor of parameterized logging.","91","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingFileManager.java":[{"add":["257","        LOGGER.debug(\"Shutting down RollingFileManager {}\", getName());"],"delete":["257","        LOGGER.debug(\"Shutting down RollingFileManager {}\" + getName());"]}]}},"363984f1f78f738f1ef9c726dea2cb485fc6bb7b":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/StringBuilders.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/util\/StringBuildersTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/StringBuilders.java":[{"add":["171","        int escapeCount = 0;","172","        for (int i = start; i < toAppendTo.length(); i++) {","176","                case '\\t':","177","                case '\\f':","178","                case '\\n':","179","                case '\\r':","180","                case '\"':","181","                case '\\\\':","182","                    escapeCount++;","183","                    break;","184","                default:","185","                    if (Character.isISOControl(c)) {","186","                        escapeCount += 5;","187","                    }","188","            }","189","        }","190","","191","        int lastChar = toAppendTo.length() - 1;","192","        toAppendTo.setLength(toAppendTo.length() + escapeCount);","193","        int lastPos = toAppendTo.length() - 1;","194","","195","        for (int i = lastChar; lastPos > i; i--) {","196","            final char c = toAppendTo.charAt(i);","197","            switch (c) {","198","                case '\\b':","199","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, 'b');","203","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, 't');","207","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, 'f');","211","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, 'n');","215","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, 'r');","220","                    lastPos = escapeAndDecrement(toAppendTo, lastPos, c);","225","                        \/\/ all iso control characters are in U+00xx, JSON output format is \"\\\\u00XX\"","226","                        toAppendTo.setCharAt(lastPos--, Chars.getUpperCaseHex(c & 0xF));","227","                        toAppendTo.setCharAt(lastPos--, Chars.getUpperCaseHex((c & 0xF0) >> 4));","228","                        toAppendTo.setCharAt(lastPos--, '0');","229","                        toAppendTo.setCharAt(lastPos--, '0');","230","                        toAppendTo.setCharAt(lastPos--, 'u');","231","                        toAppendTo.setCharAt(lastPos--, '\\\\');","232","                    } else {","233","                        toAppendTo.setCharAt(lastPos, c);","234","                        lastPos--;","240","    private static int escapeAndDecrement(StringBuilder toAppendTo, int lastPos, char c) {","241","        toAppendTo.setCharAt(lastPos--, c);","242","        toAppendTo.setCharAt(lastPos--, '\\\\');","243","        return lastPos;","244","    }","245",""],"delete":["171","        for (int i = toAppendTo.length() - 1; i >= start; i--) { \/\/ backwards: length may change","175","                    toAppendTo.setCharAt(i, '\\\\');","176","                    toAppendTo.insert(i + 1, 'b');","180","                    toAppendTo.setCharAt(i, '\\\\');","181","                    toAppendTo.insert(i + 1, 't');","185","                    toAppendTo.setCharAt(i, '\\\\');","186","                    toAppendTo.insert(i + 1, 'f');","190","                    \/\/ Json string newline character must be encoded as literal \"\\n\"","191","                    toAppendTo.setCharAt(i, '\\\\');","192","                    toAppendTo.insert(i + 1, 'n');","196","                    toAppendTo.setCharAt(i, '\\\\');","197","                    toAppendTo.insert(i + 1, 'r');","202","                    \/\/ only \" and \\ need to be escaped; other escapes are optional","203","                    toAppendTo.insert(i, '\\\\');","208","                        \/\/ all iso control characters are in U+00xx","209","                        toAppendTo.setCharAt(i, '\\\\');","210","                        toAppendTo.insert(i + 1, \"u0000\");","211","                        toAppendTo.setCharAt(i + 4, Chars.getUpperCaseHex((c & 0xF0) >> 4));","212","                        toAppendTo.setCharAt(i + 5, Chars.getUpperCaseHex(c & 0xF));"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/util\/StringBuildersTest.java":[{"add":["49","    @Test","50","    public void escapeJsonCharactersCorrectly() {","51","        String jsonValueNotEscaped = \"{\\\"field\\n1\\\":\\\"value_1\\\"}\";","52","        String jsonValueEscaped = \"{\\\\\\\"field\\\\n1\\\\\\\":\\\\\\\"value_1\\\\\\\"}\";","54","        StringBuilder sb = new StringBuilder();","55","        sb.append(jsonValueNotEscaped);","56","        assertEquals(jsonValueNotEscaped, sb.toString());","57","        StringBuilders.escapeJson(sb, 0);","58","        assertEquals(jsonValueEscaped, sb.toString());","59","","60","        sb = new StringBuilder();","61","        String jsonValuePartiallyEscaped = \"{\\\"field\\n1\\\":\\\\\\\"value_1\\\\\\\"}\";","62","        sb.append(jsonValueNotEscaped);","63","        assertEquals(jsonValueNotEscaped, sb.toString());","64","        StringBuilders.escapeJson(sb, 10);","65","        assertEquals(jsonValuePartiallyEscaped, sb.toString());","66","    }","67","","68","    @Test","69","    public void escapeJsonCharactersISOControl() {","70","        String jsonValueNotEscaped = \"{\\\"field\\n1\\\":\\\"value\" + (char) 0x8F + \"_1\\\"}\";","71","        String jsonValueEscaped = \"{\\\\\\\"field\\\\n1\\\\\\\":\\\\\\\"value\\\\u008F_1\\\\\\\"}\";","72","","73","        StringBuilder sb = new StringBuilder();","74","        sb.append(jsonValueNotEscaped);","75","        assertEquals(jsonValueNotEscaped, sb.toString());","76","        StringBuilders.escapeJson(sb, 0);","77","        assertEquals(jsonValueEscaped, sb.toString());","78","    }"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["146","      <action issue=\"LOG4J2-2373\" dev=\"ckozak\" type=\"fix\" due-to=\"Kevin Meurer\">","147","        StringBuilders.escapeJson implementation runs in linear time. Escaping large JSON strings","148","        in EncodingPatternConverter and MapMessage will perform significantly better.","149","      <\/action>"],"delete":[]}]}},"4e4127f516ab7a8194273650dda0760ed480b7a6":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2794\" dev=\"rgoers\" type=\"fix\" due-to=\"Johan Karlberg\">","33","        Make YamlLayoutTest more resiliant to environmental differences.","34","      <\/action>"],"delete":[]}]}},"3c3366180577d18841538bd4fce6243e499ed994":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LogEventWithContextListMixIn.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LogEventJsonMixIn.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LogEventWithContextListMixIn.java":[{"add":["128","    @JsonProperty(value = JsonConstants.ELT_TIME_MILLIS, access = JsonProperty.Access.READ_ONLY)"],"delete":["128","    @JsonProperty(JsonConstants.ELT_TIME_MILLIS)"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LogEventJsonMixIn.java":[{"add":["129","    @JsonProperty(value = JsonConstants.ELT_TIME_MILLIS, access = JsonProperty.Access.READ_ONLY)"],"delete":["129","    @JsonProperty(JsonConstants.ELT_TIME_MILLIS)"]}]}},"e1664597a3e6721bf4a11027b1ee471191f3dacf":{"changes":{"log4j-core\/src\/test\/resources\/log4j2-1002.xml":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderJira1002ShortThrowableLayoutMain.java":"ADD"},"diff":{"log4j-core\/src\/test\/resources\/log4j2-1002.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderJira1002ShortThrowableLayoutMain.java":[{"add":[],"delete":[]}]}},"73a823dec0a54e75111c3778a4ef35862e189c26":{"changes":{"core\/src\/test\/resources\/log4j-rewrite.xml":"MODIFY","src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppenderTest.java":"MODIFY"},"diff":{"core\/src\/test\/resources\/log4j-rewrite.xml":[{"add":["44","    <Rewrite name=\"Rewrite3\">","45","      <MapFilter>","46","        <KeyValuePair key=\"Key1\" Value=\"Value1\"\/>","47","      <\/MapFilter>","48","      <MapRewritePolicy>","49","        <KeyValuePair key=\"Key1\" Value=\"Apache\"\/>","50","        <KeyValuePair key=\"Key3\" Value=\"Log4j\"\/>","51","      <\/MapRewritePolicy>","52","      <appender-ref ref=\"List\"\/>","53","    <\/Rewrite>","61","    <logger name=\"org.apache.logging.log4j.core.Logging\" level=\"trace\" additivity=\"false\">","62","      <appender-ref ref=\"Rewrite3\"\/>","63","    <\/logger>"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J-244\" dev=\"rgoers\" type=\"fix\">","25","        Rewrite Appender was ignoring filters on referenced appenders.","26","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppender.java":[{"add":["63","                Filter filter = appender instanceof AbstractAppender<?> ?","64","                    ((AbstractAppender<?>) appender).getFilter() : null;","65","                appenders.put(name, new AppenderControl(appender, ref.getLevel(), filter));"],"delete":["63","                appenders.put(name, new AppenderControl(appender, ref.getLevel(), null));"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppenderTest.java":[{"add":["39","import static org.junit.Assert.assertNull;","107","","108","","109","    @Test","110","    public void testFilter() {","111","        StructuredDataMessage msg = new StructuredDataMessage(\"Test\", \"This is a test\", \"Service\");","112","        msg.put(\"Key1\", \"Value2\");","113","        msg.put(\"Key2\", \"Value1\");","114","        Logger logger = LogManager.getLogger(\"org.apache.logging.log4j.core.Logging\");","115","        logger.debug(msg);","116","        msg = new StructuredDataMessage(\"Test\", \"This is a test\", \"Service\");","117","        msg.put(\"Key1\", \"Value1\");","118","        msg.put(\"Key2\", \"Value2\");","119","        logger.trace(msg);","120","","121","        final List<LogEvent> list = app.getEvents();","122","        assertTrue(\"Events were generated\", list == null || list.size() == 0);","123","        app.clear();","124","    }"],"delete":[]}]}},"673756bdf9d05b0b9af1c8a0680b2cbf7b6c6844":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["34","        org.apache.logging.log4j.core.net.TcpSocketManager and other classes does not report internal exceptions to the status logger."],"delete":["34","        org.apache.logging.log4j.core.net.TcpSocketManager does not display stack traces."]}]}},"bfd42249d22cfc0e770cf637607b96cde01f4a3e":{"changes":{"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEmbeddedManager.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEmbeddedManager.java":[{"add":["271","                            \"Specification of the agent name is not allowed in Flume Appender configuration: \" + key;"],"delete":["271","                            \"Specification of the agent name is allowed in Flume Appender configuration: \" + key;"]}],"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-261\" dev=\"rgoers\" type=\"fix\" due-to=\"Edward Sargisson\">","25","        Add missing \"not\" to error message.","26","      <\/action>"],"delete":[]}]}},"9c78e610ca65256032a0a69ac1204a549b79e3ab":{"changes":{"log4j-bom\/pom.xml":"MODIFY","log4j-distribution\/pom.xml":"MODIFY"},"diff":{"log4j-bom\/pom.xml":[{"add":["92","      <!-- Application Service Support -->","93","      <dependency>","94","        <groupId>org.apache.logging.log4j<\/groupId>","95","        <artifactId>log4j-appserver<\/artifactId>","96","        <version>${project.version}<\/version>","97","      <\/dependency>","152","      <!-- Docker support -->","153","      <dependency>","154","        <groupId>org.apache.logging.log4j<\/groupId>","155","        <artifactId>log4j-docker<\/artifactId>","156","        <version>${project.version}<\/version>","157","      <\/dependency>","158","      <!-- Spring Cloud Config Client -->","159","      <dependency>","160","        <groupId>org.apache.logging.log4j<\/groupId>","161","        <artifactId>log4j-spring-cloud-config-client<\/artifactId>","162","        <version>${project.version}<\/version>","163","      <\/dependency>"],"delete":[]}],"log4j-distribution\/pom.xml":[{"add":["393","    <dependency>","394","      <groupId>org.apache.logging.log4j<\/groupId>","395","      <artifactId>log4j-docker<\/artifactId>","396","      <version>${project.version}<\/version>","397","    <\/dependency>","398","    <dependency>","399","      <groupId>org.apache.logging.log4j<\/groupId>","400","      <artifactId>log4j-docker<\/artifactId>","401","      <version>${project.version}<\/version>","402","      <classifier>sources<\/classifier>","403","    <\/dependency>","404","    <dependency>","405","      <groupId>org.apache.logging.log4j<\/groupId>","406","      <artifactId>log4j-docker<\/artifactId>","407","      <version>${project.version}<\/version>","408","      <classifier>javadoc<\/classifier>","409","    <\/dependency>","410","    <dependency>","411","      <groupId>org.apache.logging.log4j<\/groupId>","412","      <artifactId>log4j-spring-cloud-config-client<\/artifactId>","413","      <version>${project.version}<\/version>","414","    <\/dependency>","415","    <dependency>","416","      <groupId>org.apache.logging.log4j<\/groupId>","417","      <artifactId>log4j-spring-cloud-config-client<\/artifactId>","418","      <version>${project.version}<\/version>","419","      <classifier>sources<\/classifier>","420","    <\/dependency>","421","    <dependency>","422","      <groupId>org.apache.logging.log4j<\/groupId>","423","      <artifactId>log4j-spring-cloud-config-client<\/artifactId>","424","      <version>${project.version}<\/version>","425","      <classifier>javadoc<\/classifier>","426","    <\/dependency>"],"delete":[]}]}},"bfb7a3d83922cb2be23acef76e6aefaa074aa6d4":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LevelMixIn.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jackson\/LevelMixIn.java":[{"add":["36","    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)","37","    public static Level getLevel(final String name) {"],"delete":["36","    @JsonCreator","37","    public static Level getLevel(@JsonProperty(\"name\") final String name) {"]}],"src\/changes\/changes.xml":[{"add":["42","      <action issue=\"LOG4J2-2100\" dev=\"ggregory\" type=\"fix\">","43","        LevelMixIn class for Jackson is coded incorrectly","44","      <\/action>"],"delete":[]}]}},"0cd0f23a702949864fe0ce3c5c89e7d33f60ea88":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":"MODIFY","log4j-core\/src\/test\/resources\/AsyncLoggerCustomSelectorLocationTest.xml":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerCustomSelectorLocationTest.java":"ADD"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":[{"add":["32","import org.apache.logging.log4j.core.LoggerContext;","33","import org.apache.logging.log4j.core.async.AsyncLoggerContext;","493","                includeLocation(includeLocation, config));","525","            includeLocation(includeLocation, config));","526","    }","527","","528","    \/**","529","     * @deprecated Please use {@link #includeLocation(String, Configuration)}","530","     *\/","531","    @Deprecated","532","    protected static boolean includeLocation(final String includeLocationConfigValue) {","533","        return includeLocation(includeLocationConfigValue, null);","538","    protected static boolean includeLocation(final String includeLocationConfigValue, final Configuration configuration) {","540","            LoggerContext context = null;","541","            if (configuration != null) {","542","                context = configuration.getLoggerContext();","543","            }","544","            if (context != null) {","545","                return !(context instanceof AsyncLoggerContext);","546","            } else {","547","                return !AsyncLoggerContextSelector.isSelected();","548","            }","575","                    properties, config, includeLocation(includeLocation, config));"],"delete":["491","                includeLocation(includeLocation));","523","            includeLocation(includeLocation));","528","    protected static boolean includeLocation(final String includeLocationConfigValue) {","530","            final boolean sync = !AsyncLoggerContextSelector.isSelected();","531","            return sync;","558","                    properties, config, includeLocation(includeLocation));"]}],"log4j-core\/src\/test\/resources\/AsyncLoggerCustomSelectorLocationTest.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerCustomSelectorLocationTest.java":[{"add":[],"delete":[]}]}},"c0dab8974091e95ce0bb8b87ca1ffc9b4c13db5b":{"changes":{"src\/site\/xdoc\/manual\/appenders.xml":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/site\/xdoc\/manual\/appenders.xml":[{"add":["5337","    <Syslog name=\"bsd\" host=\"localhost\" port=\"6514\" protocol=\"SSL\">","5342","    <\/Syslog>"],"delete":["5337","    <TLSSyslog name=\"bsd\" host=\"localhost\" port=\"6514\">","5342","    <\/TLSSyslog>"]}],"src\/changes\/changes.xml":[{"add":["118","      <action issue=\"LOG4J2-2553\" dev=\"rgoers\">","119","        Correct documentation for SyslogAppender when using TLS.","120","      <\/action>"],"delete":[]}]}},"d690ba28e83a07c0bb80904d54159b65800e5815":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/PluginManager.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/LoggerTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/JSONRoutingAppender2Test.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/SerializedLayoutTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/JSONRoutingAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/RootThrowableTest.java":"MODIFY","taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/ExitTagTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":"MODIFY","log4j-to-slf4j\/pom.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileAppender.java":"MODIFY","core\/pom.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketMessageLossTest.java":"MODIFY","log4j12-api\/src\/main\/java\/org\/apache\/log4j\/NDC.java":"MODIFY","src\/site\/xdoc\/manual\/thread-context.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractManager.java":"MODIFY","src\/site\/xdoc\/manual\/api.xml":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/SLF4JLogger.java":"MODIFY","taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/CatchingTagTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/ResolverUtil.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/ExtendedThrowableTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/JSONConfiguration.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppenderNoLocationTest.java":"MODIFY","web\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/web\/Log4jContextListener.java":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/StaticLoggerBinder.java":"MODIFY","slf4j-impl\/src\/test\/java\/org\/apache\/logging\/slf4j\/LoggerTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastRollingFileAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/JMSTopicAppender.java":"MODIFY","jcl-bridge\/src\/test\/java\/org\/apache\/logging\/log4j\/jcl\/LoggerTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractOutputStreamAppender.java":"MODIFY","samples\/flume-common\/src\/main\/java\/org\/apache\/logging\/log4j\/samples\/app\/LogEventFactory.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationFactory.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/FailOnceAppender.java":"MODIFY","log4j12-api\/src\/main\/java\/org\/apache\/log4j\/MDC.java":"MODIFY","taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/EntryTagTest.java":"MODIFY","log4j12-api\/src\/test\/java\/org\/apache\/log4j\/CategoryTest.java":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAvroManager.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/StrictXMLConfigTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/RollingFileAppender.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/Interpolator.java":"MODIFY","jcl-bridge\/pom.xml":"MODIFY","log4j12-api\/src\/test\/java\/org\/apache\/log4j\/LoggerTest.java":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/MarkerWrapper.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketReconnectTest.java":"MODIFY","log4j-to-slf4j\/src\/main\/java\/org\/apache\/logging\/slf4j\/MDCContextMap.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FailoverAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/SyslogLayoutTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/RoutingAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLLoggerPropsTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketServerTest.java":"MODIFY","log4j12-api\/src\/test\/java\/org\/apache\/log4j\/PriorityTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/AppenderRefLevelTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/StructuredDataFilterTest.java":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEmbeddedManager.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SMTPAppender.java":"MODIFY","taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/LoggingMessageTagSupportTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSQueueTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/ListAppender.java":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JMarkerFactory.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppenderTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FailoverAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTestResultFormatter.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/StyleConverterTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/InMemoryAppender.java":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JMDCAdapter.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/RoutingAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/BurstFilterTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":"MODIFY","web\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/web\/Log4jContextListenerTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSQueueFailoverTest.java":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAppender.java":"MODIFY","flume-ng\/pom.xml":"MODIFY","web\/pom.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/Profiler.java":"MODIFY","BUILDING.txt":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfigurationTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSTopicFailoverTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/dumbster\/smtp\/SimpleSmtpServer.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSTopicTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/TimeFilterTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppender.java":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/StaticMarkerBinder.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfiguration.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/TestRewritePolicy.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTestDriver.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/RegexReplacementTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424LayoutTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/AlwaysFailAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamAppenderTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/ThrowableTest.java":"MODIFY","api\/pom.xml":"MODIFY","slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JLoggerFactory.java":"MODIFY","taglib\/pom.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/MapFilterTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/JMSQueueAppender.java":"MODIFY","core\/build.xml":"MODIFY","log4j12-api\/pom.xml":"MODIFY","src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxy.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/dumbster\/smtp\/SmtpMessage.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":"MODIFY","slf4j-impl\/pom.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/DefaultConfiguration.java":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastFileAppender.java":[{"add":["30","import java.io.Serializable;","31","import java.util.HashMap;","32","import java.util.Map;","33","","38","public final class FastFileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","44","    private FastFileAppender(String name, Layout<T> layout, Filter filter,","119","    public static <S extends Serializable> FastFileAppender<S> createAppender(","125","            @PluginElement(\"layout\") Layout<S> layout,","156","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","157","            Layout<S> l = (Layout<S>)PatternLayout.createLayout(null, null, null, null);","158","            layout = l;","160","        return new FastFileAppender<S>(name, layout, filter, manager, fileName,"],"delete":["18","import java.util.HashMap;","19","import java.util.Map;","20","","37","public final class FastFileAppender extends AbstractOutputStreamAppender {","43","    private FastFileAppender(String name, Layout<?> layout, Filter filter,","118","    public static FastFileAppender createAppender(","124","            @PluginElement(\"layout\") Layout<?> layout,","155","            layout = PatternLayout.createLayout(null, null, null, null);","157","        return new FastFileAppender(name, layout, filter, manager, fileName,"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/PluginManager.java":[{"add":["137","    @SuppressWarnings(\"unchecked\")","198","    @SuppressWarnings(\"unchecked\")"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppenderTest.java":[{"add":["49","    private static ListAppender<LogEvent> app;","50","    private static ListAppender<String> app2;","54","    @SuppressWarnings(\"unchecked\")","61","                app = (ListAppender<LogEvent>) entry.getValue();","63","                app2 = (ListAppender<String>) entry.getValue();"],"delete":["49","    private static ListAppender app;","50","    private static ListAppender app2;","60","                app = (ListAppender) entry.getValue();","62","                app2 = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/LoggerTest.java":[{"add":["36","import java.io.File;","37","import java.util.Date;","38","import java.util.List;","39","import java.util.Locale;","40","import java.util.Map;","41","","42","import static org.junit.Assert.*;","43","","51","    private static ListAppender<LogEvent> app;","52","    private static ListAppender<String> host;","53","    private static ListAppender<String> noThrown;","70","    @SuppressWarnings(\"unchecked\")","75","                app = (ListAppender<LogEvent>) entry.getValue();","77","                host = (ListAppender<String>) entry.getValue();","79","                noThrown = (ListAppender<String>) entry.getValue();","217","        ThreadContext.put(\"TestYear\", \"2010\");"],"delete":["18","import static org.junit.Assert.assertEquals;","19","import static org.junit.Assert.assertNotNull;","20","import static org.junit.Assert.assertTrue;","21","","22","import java.io.File;","23","import java.util.Date;","24","import java.util.List;","25","import java.util.Locale;","26","import java.util.Map;","27","","53","    private static ListAppender app;","54","    private static ListAppender host;","55","    private static ListAppender noThrown;","76","                app = (ListAppender) entry.getValue();","78","                host = (ListAppender) entry.getValue();","80","                noThrown = (ListAppender) entry.getValue();","218","        ThreadContext.put(\"TestYear\", new Integer(2010).toString());"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/JSONRoutingAppender2Test.java":[{"add":["45","    private static ListAppender<LogEvent> app;","49","    @SuppressWarnings(\"unchecked\")","56","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["45","    private static ListAppender app;","55","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/SerializedLayoutTest.java":[{"add":["80","        final ListAppender<LogEvent> appender = new ListAppender<LogEvent>(\"List\", null, layout, false, true);"],"delete":["80","        final ListAppender appender = new ListAppender(\"List\", null, layout, false, true);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/JSONRoutingAppenderTest.java":[{"add":["45","    private static ListAppender<LogEvent> app;","49","    @SuppressWarnings(\"unchecked\")","56","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["45","    private static ListAppender app;","55","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/RootThrowableTest.java":[{"add":["41","    private static ListAppender<String> app;","45","    @SuppressWarnings(\"unchecked\")","52","                app = (ListAppender<String>) entry.getValue();"],"delete":["41","    private static ListAppender app;","51","                app = (ListAppender) entry.getValue();"]}],"taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/ExitTagTest.java":[{"add":["92","    @SuppressWarnings(\"unchecked\")","99","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["98","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/HTMLLayoutTest.java":[{"add":["70","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);"],"delete":["70","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);"]}],"log4j-to-slf4j\/pom.xml":[{"add":["168","              <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["25","  <groupId>org.apache.logging.log4j<\/groupId>","169","              <targetJdk>1.5<\/targetJdk>"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileAppender.java":[{"add":["29","import java.io.Serializable;","30","import java.util.HashMap;","31","import java.util.Map;","32","","37","public final class FileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","43","    private FileAppender(final String name, final Layout<T> layout, final Filter filter, final FileManager manager,","44","                         final String filename, final boolean handleException, final boolean immediateFlush,","45","                         Advertiser advertiser) {","96","    public static <S extends Serializable> FileAppender<S> createAppender(@PluginAttr(\"fileName\") final String fileName,","103","                                              @PluginElement(\"layout\") Layout<S> layout,","137","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","138","            Layout<S> l = (Layout<S>)PatternLayout.createLayout(null, null, null, null);","139","            layout = l;","142","        return new FileAppender<S>(name, layout, filter, manager, fileName, handleExceptions, isFlush,","143","                isAdvertise ? config.getAdvertiser() : null);"],"delete":["18","import java.util.HashMap;","19","import java.util.Map;","35","public final class FileAppender extends AbstractOutputStreamAppender {","41","    private FileAppender(final String name, final Layout layout, final Filter filter, final FileManager manager,","42","                         final String filename, final boolean handleException, final boolean immediateFlush, Advertiser advertiser) {","93","    public static FileAppender createAppender(@PluginAttr(\"fileName\") final String fileName,","100","                                              @PluginElement(\"layout\") Layout layout,","134","            layout = PatternLayout.createLayout(null, null, null, null);","137","        return new FileAppender(name, layout, filter, manager, fileName, handleExceptions, isFlush, isAdvertise ? config.getAdvertiser() : null);"]}],"core\/pom.xml":[{"add":["299","          <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["299","          <targetJdk>1.5<\/targetJdk>"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketMessageLossTest.java":[{"add":["18","import org.apache.logging.log4j.LogManager;","19","import org.apache.logging.log4j.Logger;","20","import org.apache.logging.log4j.core.appender.AppenderRuntimeException;","21","import org.apache.logging.log4j.core.config.XMLConfigurationFactory;","22","import org.junit.BeforeClass;","23","import org.junit.Test;","24","","36","import static org.junit.Assert.*;","105","        @Override"],"delete":["29","import org.apache.logging.log4j.LogManager;","30","import org.apache.logging.log4j.Logger;","31","import org.apache.logging.log4j.core.appender.AppenderRuntimeException;","32","import org.apache.logging.log4j.core.config.XMLConfigurationFactory;","33","import org.junit.BeforeClass;","34","import org.junit.Test;","35","","36","import static org.junit.Assert.assertEquals;","37","import static org.junit.Assert.assertTrue;","38","import static org.junit.Assert.fail;"]}],"log4j12-api\/src\/main\/java\/org\/apache\/log4j\/NDC.java":[{"add":["82","    public static void inherit(final Stack<String> stack) {","155","     * occasionally forget to call {@code remove} before exiting a"],"delete":["82","    public static void inherit(final Stack stack) {","155","     * occasionally forget to call {@link #remove} before exiting a"]}],"src\/site\/xdoc\/manual\/thread-context.xml":[{"add":["101","            <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/util\/concurrent\/Executors.html#privilegedThreadFactory()\">Executors<\/a>"],"delete":["101","            <a href=\"http:\/\/docs.oracle.com\/javase\/1.5.0\/docs\/api\/java\/util\/concurrent\/Executors.html#privilegedThreadFactory()\">Executors<\/a>"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/LoggerConfig.java":[{"add":["25","import org.apache.logging.log4j.core.LogEvent;","27","import org.apache.logging.log4j.core.config.plugins.Plugin;","28","import org.apache.logging.log4j.core.config.plugins.PluginAttr;","30","import org.apache.logging.log4j.core.config.plugins.PluginElement;","31","import org.apache.logging.log4j.core.config.plugins.PluginFactory;","38","import org.apache.logging.log4j.status.StatusLogger;","40","import java.io.Serializable;","166","    public <T extends Serializable> void addAppender(final Appender<T> appender, final Level level,","168","        appenders.put(appender.getName(), new AppenderControl<T>(appender, level,"],"delete":["30","import org.apache.logging.log4j.core.LogEvent;","33","import org.apache.logging.log4j.core.config.plugins.Plugin;","34","import org.apache.logging.log4j.core.config.plugins.PluginAttr;","35","import org.apache.logging.log4j.core.config.plugins.PluginFactory;","36","import org.apache.logging.log4j.core.config.plugins.PluginElement;","37","import org.apache.logging.log4j.status.StatusLogger;","165","    public void addAppender(final Appender appender, final Level level,","167","        appenders.put(appender.getName(), new AppenderControl(appender, level,"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractManager.java":[{"add":["67","            @SuppressWarnings(\"unchecked\")"],"delete":[]}],"src\/site\/xdoc\/manual\/api.xml":[{"add":["80","              <a href=\"http:\/\/docs.oracle.com\/javase\/6\/docs\/api\/java\/util\/Formatter.html#syntax\">Formatter<\/a>."],"delete":["80","              <a href=\"http:\/\/docs.oracle.com\/javase\/1.5.0\/docs\/api\/java\/util\/Formatter.html#syntax\">Formatter<\/a>.              "]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/SLF4JLogger.java":[{"add":["49","    @Override","56","    @Override","63","    @Override","71","    @Override","72","    public void trace(final String format, final Object... args) {","79","    @Override","86","    @Override","91","    @Override","96","    @Override","103","    @Override","111","    @Override","119","    @Override","120","    public void trace(final Marker marker, final String s, final Object... objects) {","127","    @Override","135","    @Override","142","    @Override","149","    @Override","157","    @Override","158","    public void debug(final String format, final Object... args) {","165","    @Override","172","    @Override","177","    @Override","182","    @Override","189","    @Override","197","    @Override","205","    @Override","206","    public void debug(final Marker marker, final String s, final Object... objects) {","213","    @Override","221","    @Override","228","    @Override","235","    @Override","243","    @Override","244","    public void info(final String format, final Object... args) {","251","    @Override","258","    @Override","263","    @Override","268","    @Override","275","    @Override","283","    @Override","291","    @Override","292","    public void info(final Marker marker, final String s, final Object... objects) {","299","    @Override","307","    @Override","314","    @Override","321","    @Override","329","    @Override","330","    public void warn(final String format, final Object... args) {","337","    @Override","344","    @Override","349","    @Override","354","    @Override","361","    @Override","369","    @Override","377","    @Override","378","    public void warn(final Marker marker, final String s, final Object... objects) {","385","    @Override","393","    @Override","400","    @Override","407","    @Override","415","    @Override","416","    public void error(final String format, final Object... args) {","423","    @Override","430","    @Override","435","    @Override","440","    @Override","447","    @Override","455","    @Override","463","    @Override","464","    public void error(final Marker marker, final String s, final Object... objects) {","471","    @Override","480","    @Override","509","                throwable = msg.getThrowable();","515","    @Override"],"delete":["19","import org.apache.logging.log4j.LogManager;","20","import org.apache.logging.log4j.Logger;","46","        final Logger l = LogManager.getLogger(name);","71","    public void trace(final String format, final Object[] args) {","112","    public void trace(final Marker marker, final String s, final Object[] objects) {","145","    public void debug(final String format, final Object[] args) {","186","    public void debug(final Marker marker, final String s, final Object[] objects) {","219","    public void info(final String format, final Object[] args) {","260","    public void info(final Marker marker, final String s, final Object[] objects) {","293","    public void warn(final String format, final Object[] args) {","334","    public void warn(final Marker marker, final String s, final Object[] objects) {","367","    public void error(final String format, final Object[] args) {","408","    public void error(final Marker marker, final String s, final Object[] objects) {","451","                throwable = ((ParameterizedMessage) msg).getThrowable();"]}],"taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/CatchingTagTest.java":[{"add":["97","    @SuppressWarnings(\"unchecked\")","104","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["103","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/plugins\/ResolverUtil.java":[{"add":["278","        final BundleWiring wiring = FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);","301","        if(files == null)","302","            return;","304","        StringBuilder builder;","437","        @Override","442","        @Override","447","        @Override","457","        @Override","462","        @Override","467","        @Override","491","        @Override","519","        @Override","550","        @Override","569","        @Override"],"delete":["278","        final BundleWiring wiring =","279","            (BundleWiring) FrameworkUtil.getBundle(ResolverUtil.class).adapt(BundleWiring.class);","302","        StringBuilder builder;"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/ExtendedThrowableTest.java":[{"add":["40","    private static ListAppender<String> app;","44","    @SuppressWarnings(\"unchecked\")","51","                app = (ListAppender<String>) entry.getValue();"],"delete":["40","    private static ListAppender app;","50","                app = (ListAppender) entry.getValue();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppender.java":[{"add":["34","import java.io.Serializable;","35","import java.util.HashMap;","36","import java.util.Map;","37","","42","public class SocketAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","46","    protected SocketAppender(final String name, final Layout<T> layout, final Filter filter,","87","    public static <S extends Serializable> SocketAppender<S> createAppender(@PluginAttr(\"host\") final String host,","95","                                                @PluginElement(\"layout\") Layout<S> layout,","107","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","108","            Layout<S> l = (Layout<S>) SerializedLayout.createLayout();","109","            layout = l;","124","        return new SocketAppender<S>(name, layout, filter, manager, handleExceptions, isFlush,","125","                isAdvertise ? config.getAdvertiser() : null);"],"delete":["18","import java.util.HashMap;","19","import java.util.Map;","40","public class SocketAppender extends AbstractOutputStreamAppender {","44","    protected SocketAppender(final String name, final Layout layout, final Filter filter,","85","    public static SocketAppender createAppender(@PluginAttr(\"host\") final String host,","93","                                                @PluginElement(\"layout\") Layout layout,","105","            layout = SerializedLayout.createLayout();","120","        return new SocketAppender(name, layout, filter, manager, handleExceptions, isFlush, isAdvertise ? config.getAdvertiser() : null);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/JSONConfiguration.java":[{"add":["122","                        @SuppressWarnings(\"unchecked\")","123","                        final PluginType<Advertiser> type = getPluginManager().getPluginType(advertiserString);"],"delete":["122","                        final PluginType type = getPluginManager().getPluginType(advertiserString);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppenderNoLocationTest.java":[{"add":["31","import java.util.List;","32","import java.util.Map;","33","","34","import static org.junit.Assert.assertNotNull;","35","import static org.junit.Assert.assertTrue;","36","","43","    private static ListAppender<String> app;","47","    @SuppressWarnings(\"unchecked\")","54","                app = (ListAppender<String>) entry.getValue();"],"delete":["18","import static org.junit.Assert.*;","19","","20","import java.util.List;","21","import java.util.Map;","22","","42","    private static ListAppender app;","52","                app = (ListAppender) entry.getValue();"]}],"web\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/web\/Log4jContextListener.java":[{"add":["19","import org.apache.logging.log4j.core.config.Configurator;","73","        try {","74","            \/\/ if container is Servlet 3.0, use its getClassLoader method","75","            return (ClassLoader)context.getClass().getMethod(\"getClassLoader\").invoke(context);","76","        } catch (Exception ignore) {","77","            \/\/ otherwise, use this class's class loader","78","            return Log4jContextListener.class.getClassLoader();"],"delete":["18","import org.apache.logging.log4j.core.config.Configurator;","24","import java.lang.reflect.Method;","74","        final Method[] methods = context.getClass().getMethods();","75","        Method getClassLoader = null;","76","        for (final Method method : methods) {","77","            if (method.getName().equals(\"getClassLoader\")) {","78","                getClassLoader = method;","79","                break;","80","            }","82","","83","        if (getClassLoader != null) {","84","            try {","85","                return (ClassLoader) getClassLoader.invoke(context, null);","86","            } catch (final Exception ex) {","87","                \/\/ Ignore the exception","88","            }","89","        }","90","","91","        return Log4jContextListener.class.getClassLoader();"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/StaticLoggerBinder.java":[{"add":["67","    @Override","76","    @Override"],"delete":[]}],"slf4j-impl\/src\/test\/java\/org\/apache\/logging\/slf4j\/LoggerTest.java":[{"add":["22","import org.apache.logging.log4j.core.helpers.Constants;","24","import org.apache.logging.log4j.test.appender.ListAppender;","43","import static org.junit.Assert.*;","57","        ctx.getConfiguration();","169","    @SuppressWarnings(\"unchecked\")","176","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["21","import org.apache.logging.log4j.core.helpers.Constants;","22","import org.apache.logging.log4j.test.appender.ListAppender;","23","import org.apache.logging.log4j.core.config.Configuration;","44","import static org.junit.Assert.assertEquals;","45","import static org.junit.Assert.assertNotNull;","46","import static org.junit.Assert.assertTrue;","60","        final Configuration config = ctx.getConfiguration();","178","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/RewriteAppender.java":[{"add":["31","import java.io.Serializable;","40","public final class RewriteAppender<T extends Serializable> extends AbstractAppender<T> {","56","    @SuppressWarnings(\"unchecked\")","80","    @Override","101","    public static <S extends Serializable> RewriteAppender<S> createAppender(@PluginAttr(\"name\") final String name,","118","        return new RewriteAppender<S>(name, filter, handleExceptions, appenderRefs, rewritePolicy, config);"],"delete":["39","public final class RewriteAppender extends AbstractAppender {","98","    public static RewriteAppender createAppender(@PluginAttr(\"name\") final String name,","115","        return new RewriteAppender(name, filter, handleExceptions, appenderRefs, rewritePolicy, config);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FastRollingFileAppender.java":[{"add":["35","import java.io.Serializable;","36","import java.util.HashMap;","37","import java.util.Map;","38","","44","public final class FastRollingFileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","51","    private FastRollingFileAppender(String name, Layout<T> layout,","141","    public static <S extends Serializable> FastRollingFileAppender<S> createAppender(","149","            @PluginElement(\"layout\") Layout<S> layout,","200","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","201","            Layout<S> l = (Layout<S>)PatternLayout.createLayout(null, null, null, null);","202","            layout = l;","205","        return new FastRollingFileAppender<S>(name, layout, filter, manager,"],"delete":["18","import java.util.HashMap;","19","import java.util.Map;","20","","43","public final class FastRollingFileAppender extends AbstractOutputStreamAppender {","50","    private FastRollingFileAppender(String name, Layout<?> layout,","140","    public static FastRollingFileAppender createAppender(","148","            @PluginElement(\"layout\") Layout<?> layout,","199","            layout = PatternLayout.createLayout(null, null, null, null);","202","        return new FastRollingFileAppender(name, layout, filter, manager,"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/JMSTopicAppender.java":[{"add":["28","import java.io.Serializable;","29","","34","public final class JMSTopicAppender<T extends Serializable> extends AbstractAppender<T> {","38","    private JMSTopicAppender(final String name, final Filter filter, final Layout<T> layout,","39","                             final JMSTopicManager manager, final boolean handleExceptions) {","49","    @Override","78","    public static <S extends Serializable> JMSTopicAppender<S> createAppender(","89","                                                @PluginElement(\"layout\") Layout<S> layout,","104","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","105","            Layout<S> l = (Layout<S>)SerializedLayout.createLayout();","106","            layout = l;","108","        return new JMSTopicAppender<S>(name, filter, layout, manager, handleExceptions);"],"delete":["32","public final class JMSTopicAppender extends AbstractAppender {","36","    private JMSTopicAppender(final String name, final Filter filter, final Layout layout, final JMSTopicManager manager,","37","                            final boolean handleExceptions) {","75","    public static JMSTopicAppender createAppender(","86","                                                @PluginElement(\"layout\") Layout layout,","101","            layout = SerializedLayout.createLayout();","103","        return new JMSTopicAppender(name, filter, layout, manager, handleExceptions);"]}],"jcl-bridge\/src\/test\/java\/org\/apache\/logging\/log4j\/jcl\/LoggerTest.java":[{"add":["24","import org.apache.logging.log4j.core.helpers.Constants;","26","import org.apache.logging.log4j.test.appender.ListAppender;","34","import static org.junit.Assert.*;","47","        ctx.getConfiguration();","72","    @SuppressWarnings(\"unchecked\")","79","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["23","import org.apache.logging.log4j.core.helpers.Constants;","24","import org.apache.logging.log4j.test.appender.ListAppender;","25","import org.apache.logging.log4j.core.config.Configuration;","35","import static org.junit.Assert.assertEquals;","36","import static org.junit.Assert.assertNotNull;","37","import static org.junit.Assert.assertTrue;","50","        final Configuration config = ctx.getConfiguration();","81","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractOutputStreamAppender.java":[{"add":["22","import java.io.Serializable;","30","public abstract class AbstractOutputStreamAppender<T extends Serializable> extends AbstractAppender<T> {","57","    protected AbstractOutputStreamAppender(final String name, final Layout<T> layout, final Filter filter,","110","    @Override"],"delete":["29","public abstract class AbstractOutputStreamAppender extends AbstractAppender {","56","    protected AbstractOutputStreamAppender(final String name, final Layout layout, final Filter filter,"]}],"samples\/flume-common\/src\/main\/java\/org\/apache\/logging\/log4j\/samples\/app\/LogEventFactory.java":[{"add":["34","    @SuppressWarnings(\"unchecked\")","35","    public static <T extends AuditEvent> T getEvent(final Class<T> intrface) {","39","        return (T)Proxy.newProxyInstance(intrface","40","            .getClassLoader(), new Class<?>[]{intrface}, new AuditProxy(msg, intrface));"],"delete":["34","    public static <T> T getEvent(final Class<T> intrface) {","35","","36","        final Class<?>[] interfaces = new Class<?>[]{intrface};","40","        final AuditEvent audit = (AuditEvent) Proxy.newProxyInstance(intrface","41","            .getClassLoader(), interfaces, new AuditProxy(msg, intrface));","42","","43","        return (T) audit;"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/ConfigurationFactory.java":[{"add":["113","                            @SuppressWarnings(\"unchecked\")","114","                            final Class<ConfigurationFactory> clazz = (Class<ConfigurationFactory>)type.getPluginClass();","117","                                final Integer weight = order.value();"],"delete":["113","                            final Class<ConfigurationFactory> clazz = type.getPluginClass();","115","                            final Integer weight = order.value();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/FailOnceAppender.java":[{"add":["25","import java.io.Serializable;","33","public class FailOnceAppender<T extends Serializable> extends AbstractAppender<T> {","43","    @Override","60","    public static <S extends Serializable> FailOnceAppender<S> createAppender(@PluginAttr(\"name\") final String name) {","66","        return new FailOnceAppender<S>(name);"],"delete":["32","public class FailOnceAppender extends AbstractAppender {","58","    public static FailOnceAppender createAppender(@PluginAttr(\"name\") final String name) {","64","        return new FailOnceAppender(name);"]}],"log4j12-api\/src\/main\/java\/org\/apache\/log4j\/MDC.java":[{"add":["73","    public static Hashtable<String, Object> getContext() {","74","        return new Hashtable<String, Object>(localMap.get());"],"delete":["73","    public static Hashtable getContext() {","74","        return new Hashtable(localMap.get());"]}],"taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/EntryTagTest.java":[{"add":["85","    @SuppressWarnings(\"unchecked\")","92","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["91","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"log4j12-api\/src\/test\/java\/org\/apache\/log4j\/CategoryTest.java":[{"add":["22","import org.apache.logging.log4j.core.config.ConfigurationFactory;","24","import org.apache.logging.log4j.core.layout.PatternLayout;","35","import static org.junit.Assert.*;","36","","45","    private static ListAppender<LogEvent> appender = new ListAppender<LogEvent>(\"List\");","65","    @SuppressWarnings(\"deprecation\")","163","        final Layout<String> layout = PatternLayout.createLayout(\"%d %p %C{1.} [%t] %m%n\", null, null, null);","164","        final ListAppender<String> appender = new ListAppender<String>(\"List2\", null, layout, false, false);"],"delete":["26","import org.apache.logging.log4j.core.config.ConfigurationFactory;","27","import org.apache.logging.log4j.core.layout.PatternLayout;","32","","33","import static org.junit.Assert.assertEquals;","34","import static org.junit.Assert.assertNotNull;","35","import static org.junit.Assert.assertTrue;","36","","48","    private static ListAppender appender = new ListAppender(\"List\");","165","        final Layout layout = PatternLayout.createLayout(\"%d %p %C{1.} [%t] %m%n\", null, null, null);","166","        final ListAppender appender = new ListAppender(\"List2\", null, layout, false, false);"]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAvroManager.java":[{"add":["33","    private static AvroManagerFactory factory = new AvroManagerFactory();","97","        return getManager(sb.toString(), factory,","98","                new FactoryData(name, agents, batchSize, retries, connectTimeout, requestTimeout));"],"delete":["33","    private static ManagerFactory factory = new AvroManagerFactory();","97","        return (FlumeAvroManager) getManager(sb.toString(), factory, new FactoryData(name, agents, batchSize, retries,","98","            connectTimeout, requestTimeout));"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/StrictXMLConfigTest.java":[{"add":["44","    private static ListAppender<LogEvent> app;","48","    @SuppressWarnings(\"unchecked\")","55","                app = (ListAppender<LogEvent>) entry.getValue();","135","        ThreadContext.put(\"TestYear\", \"2010\");"],"delete":["44","    private static ListAppender app;","54","                app = (ListAppender) entry.getValue();","134","        ThreadContext.put(\"TestYear\", new Integer(2010).toString());"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":[{"add":["32","import java.io.Serializable;","33","","38","public class SyslogAppender<T extends Serializable> extends SocketAppender<T> {","44","    protected SyslogAppender(final String name, final Layout<T> layout, final Filter filter,","45","                             final boolean handleException, final boolean immediateFlush,","46","                             final AbstractSocketManager manager, Advertiser advertiser) {","86","    public static <S extends Serializable> SyslogAppender<S> createAppender(@PluginAttr(\"host\") final String host,","121","        @SuppressWarnings(\"unchecked\")","122","        final Layout<S> layout = (Layout<S>)(RFC5424.equalsIgnoreCase(format) ?","125","            SyslogLayout.createLayout(facility, includeNL, escapeNL, charsetName));","137","        return new SyslogAppender<S>(name, layout, filter, handleExceptions, isFlush, manager,","138","                isAdvertise ? config.getAdvertiser() : null);"],"delete":["36","public class SyslogAppender extends SocketAppender {","42","    protected SyslogAppender(final String name, final Layout layout, final Filter filter, final boolean handleException,","43","                             final boolean immediateFlush, final AbstractSocketManager manager, Advertiser advertiser) {","83","    public static SyslogAppender createAppender(@PluginAttr(\"host\") final String host,","118","        final Layout<String> layout = RFC5424.equalsIgnoreCase(format) ?","121","            SyslogLayout.createLayout(facility, includeNL, escapeNL, charsetName);","133","        return new SyslogAppender(name, layout, filter, handleExceptions, isFlush, manager, isAdvertise ? config.getAdvertiser() : null);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/RollingFileAppender.java":[{"add":["34","import java.io.Serializable;","35","import java.util.HashMap;","36","import java.util.Map;","37","","42","public final class RollingFileAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","50","    private RollingFileAppender(final String name, final Layout<T> layout, final Filter filter,","123","    public static <S extends Serializable> RollingFileAppender<S> createAppender(","124","                                              @PluginAttr(\"fileName\") final String fileName,","132","                                              @PluginElement(\"layout\") Layout<S> layout,","175","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","176","            Layout<S> l = (Layout<S>)PatternLayout.createLayout(null, null, null, null);","177","            layout = l;","180","        return new RollingFileAppender<S>(name, layout, filter, manager, fileName, filePattern,"],"delete":["18","import java.util.HashMap;","19","import java.util.Map;","40","public final class RollingFileAppender extends AbstractOutputStreamAppender {","48","    private RollingFileAppender(final String name, final Layout layout, final Filter filter,","121","    public static RollingFileAppender createAppender(@PluginAttr(\"fileName\") final String fileName,","129","                                              @PluginElement(\"layout\") Layout layout,","172","            layout = PatternLayout.createLayout(null, null, null, null);","175","        return new RollingFileAppender(name, layout, filter, manager, fileName, filePattern,"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/Interpolator.java":[{"add":["48","            @SuppressWarnings(\"unchecked\")","75","    @Override","93","    @Override"],"delete":[]}],"jcl-bridge\/pom.xml":[{"add":["167","              <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["167","              <targetJdk>1.5<\/targetJdk>"]}],"log4j12-api\/src\/test\/java\/org\/apache\/log4j\/LoggerTest.java":[{"add":["23","import org.apache.logging.log4j.core.config.ConfigurationFactory;","31","import java.io.Serializable;","32","import java.util.List;","33","import java.util.Locale;","34","import java.util.ResourceBundle;","36","import static org.junit.Assert.*;","121","        final CountingAppender<LogEvent> ca = new CountingAppender<LogEvent>();","149","        final CountingAppender<LogEvent> ca1 = new CountingAppender<LogEvent>();","151","        final CountingAppender<LogEvent> ca2 = new CountingAppender<LogEvent>();","187","        Logger.getLogger(\"x\");","189","        final CountingAppender<LogEvent> caRoot = new CountingAppender<LogEvent>();","191","        final CountingAppender<LogEvent> caA = new CountingAppender<LogEvent>();","193","        final CountingAppender<LogEvent> caABC = new CountingAppender<LogEvent>();","386","        final ListAppender<LogEvent> appender = new ListAppender<LogEvent>(\"List\");","413","        final ListAppender<LogEvent> appender = new ListAppender<LogEvent>(\"List\");","441","        final ListAppender<LogEvent> appender = new ListAppender<LogEvent>(\"List\");","457","    @SuppressWarnings(\"deprecation\")","460","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, false, false);","485","        @SuppressWarnings(\"deprecation\")","491","    private static class CountingAppender<T extends Serializable> extends AbstractAppender<T> {","504","        @Override"],"delete":["20","","21","import java.util.List;","22","import java.util.Locale;","23","import java.util.ResourceBundle;","24","","30","import org.apache.logging.log4j.core.config.ConfigurationFactory;","37","import static org.junit.Assert.assertEquals;","38","import static org.junit.Assert.assertNotNull;","39","import static org.junit.Assert.assertNull;","40","import static org.junit.Assert.assertFalse;","41","import static org.junit.Assert.assertTrue;","42","import static org.junit.Assert.assertSame;","49","    Logger logger;","128","        final CountingAppender ca = new CountingAppender();","156","        final CountingAppender ca1 = new CountingAppender();","158","        final CountingAppender ca2 = new CountingAppender();","194","        final Logger x = Logger.getLogger(\"x\");","196","        final CountingAppender caRoot = new CountingAppender();","198","        final CountingAppender caA = new CountingAppender();","200","        final CountingAppender caABC = new CountingAppender();","393","        final ListAppender appender = new ListAppender(\"List\");","420","        final ListAppender appender = new ListAppender(\"List\");","448","        final ListAppender appender = new ListAppender(\"List\");","466","        final ListAppender appender = new ListAppender(\"List\", null, layout, false, false);","496","    private static class CountingAppender extends AbstractAppender {"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/MarkerWrapper.java":[{"add":["42","    @Override","47","    @Override","60","    @Override"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketReconnectTest.java":[{"add":["135","        @Override"],"delete":[]}],"log4j-to-slf4j\/src\/main\/java\/org\/apache\/logging\/slf4j\/MDCContextMap.java":[{"add":["27","    @Override","32","    @Override","37","    @Override","42","    @Override","47","    @Override","52","    @Override","53","    @SuppressWarnings(\"unchecked\") \/\/ nothing we can do about this, restricted by SLF4J API","58","    @Override","59","    @SuppressWarnings(\"unchecked\") \/\/ nothing we can do about this, restricted by SLF4J API","64","    @Override"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FailoverAppenderTest.java":[{"add":["43","    private static ListAppender<LogEvent> app;","44","    private static FailOnceAppender<LogEvent> foApp;","48","    @SuppressWarnings(\"unchecked\")","55","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["43","    private static ListAppender app;","44","    private static FailOnceAppender foApp;","54","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/SyslogLayoutTest.java":[{"add":["80","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);"],"delete":["80","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/RoutingAppender.java":[{"add":["32","import java.io.Serializable;","46","public final class RoutingAppender<T extends Serializable> extends AbstractAppender<T> {","51","    private final ConcurrentMap<String, AppenderControl<T>> appenders =","52","            new ConcurrentHashMap<String, AppenderControl<T>>();","75","    @SuppressWarnings(\"unchecked\")","81","                final Appender<?> appender = map.get(route.getAppenderRef());","97","        for (final Map.Entry<String, AppenderControl<T>> entry : appenders.entrySet()) {","105","    @Override","111","        final AppenderControl<T> control = getControl(key, event);","117","    private synchronized AppenderControl<T> getControl(final String key, final LogEvent event) {","118","        AppenderControl<T> control = appenders.get(key);","133","            final Appender<T> app = createAppender(route, event);","137","            control = new AppenderControl<T>(app, null, null);","144","    private Appender<T> createAppender(final Route route, final LogEvent event) {","151","                    @SuppressWarnings(\"unchecked\")","152","                    final Appender<T> app = (Appender<T>) appNode.getObject();","176","    public static <S extends Serializable> RoutingAppender<S> createAppender(@PluginAttr(\"name\") final String name,","193","        return new RoutingAppender<S>(name, filter, handleExceptions, routes, rewritePolicy, config);"],"delete":["45","public final class RoutingAppender extends AbstractAppender {","50","    private final ConcurrentMap<String, AppenderControl> appenders = new ConcurrentHashMap<String, AppenderControl>();","78","                final Appender appender = map.get(route.getAppenderRef());","94","        for (final Map.Entry<String, AppenderControl> entry : appenders.entrySet()) {","107","        final AppenderControl control = getControl(key, event);","113","    private synchronized AppenderControl getControl(final String key, final LogEvent event) {","114","        AppenderControl control = appenders.get(key);","129","            final Appender app = createAppender(route, event);","133","            control = new AppenderControl(app, null, null);","140","    private Appender createAppender(final Route route, final LogEvent event) {","147","                    final Appender app = (Appender) appNode.getObject();","171","    public static RoutingAppender createAppender(@PluginAttr(\"name\") final String name,","188","        return new RoutingAppender(name, filter, handleExceptions, routes, rewritePolicy, config);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLLoggerPropsTest.java":[{"add":["41","    private static ListAppender<String> app;","45","    @SuppressWarnings(\"unchecked\")","53","                app = (ListAppender<String>) entry.getValue();"],"delete":["41","    private static ListAppender app;","52","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketServerTest.java":[{"add":["29","import org.apache.logging.log4j.test.appender.ListAppender;","91","        final ListAppender<LogEvent> listApp = new ListAppender<LogEvent>(\"Events\", serverFilter, null, false, false);"],"delete":["26","import org.apache.logging.log4j.test.appender.ListAppender;","37","import java.util.concurrent.ArrayBlockingQueue;","38","import java.util.concurrent.BlockingQueue;","48","    private static final String HOST = \"localhost\";","52","    private static BlockingQueue<LogEvent> list = new ArrayBlockingQueue<LogEvent>(10);","53","","96","        final ListAppender listApp = new ListAppender(\"Events\", serverFilter, null, false, false);"]}],"log4j12-api\/src\/test\/java\/org\/apache\/log4j\/PriorityTest.java":[{"add":["21","import java.util.Locale;","22","","23","import static org.junit.Assert.*;","91","    @SuppressWarnings(\"deprecation\")","100","    @SuppressWarnings(\"deprecation\")","109","    @SuppressWarnings(\"deprecation\")","118","    @SuppressWarnings(\"deprecation\")","127","    @SuppressWarnings(\"deprecation\")","136","    @SuppressWarnings(\"deprecation\")","145","    @SuppressWarnings(\"deprecation\")","157","    @SuppressWarnings(\"deprecation\")","167","    @SuppressWarnings(\"deprecation\")","176","    @SuppressWarnings(\"deprecation\")","185","    @SuppressWarnings(\"deprecation\")","194","    @SuppressWarnings(\"deprecation\")","203","    @SuppressWarnings(\"deprecation\")","214","    @SuppressWarnings(\"deprecation\")"],"delete":["19","import java.util.Locale;","20","","23","import static org.junit.Assert.assertEquals;","24","import static org.junit.Assert.assertFalse;","25","import static org.junit.Assert.assertTrue;","91","     *","92","     * @deprecated","94","    @Deprecated","102","     *","103","     * @deprecated","105","    @Deprecated","113","     *","114","     * @deprecated","116","    @Deprecated","124","     *","125","     * @deprecated","127","    @Deprecated","135","     *","136","     * @deprecated","138","    @Deprecated","146","     *","147","     * @deprecated","149","    @Deprecated","157","     *","158","     * @deprecated","160","    @Deprecated","171","     *","172","     * @deprecated","174","    @Deprecated","183","     *","184","     * @deprecated","186","    @Deprecated","194","     *","195","     * @deprecated","197","    @Deprecated","205","     *","206","     * @deprecated","208","    @Deprecated","216","     *","217","     * @deprecated","219","    @Deprecated","227","     *","228","     * @deprecated","230","    @Deprecated","240","     *","241","     * @deprecated","243","    @Deprecated"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/AppenderRefLevelTest.java":[{"add":["42","    private static ListAppender<LogEvent> app1;","43","    private static ListAppender<LogEvent> app2;","47","    @SuppressWarnings(\"unchecked\")","54","                app1 = (ListAppender<LogEvent>) entry.getValue();","56","                app2 = (ListAppender<LogEvent>) entry.getValue();"],"delete":["42","    private static ListAppender app1;","43","    private static ListAppender app2;","53","                app1 = (ListAppender) entry.getValue();","55","                app2 = (ListAppender) entry.getValue();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AbstractAppender.java":[{"add":["18","import org.apache.logging.log4j.Logger;","22","import org.apache.logging.log4j.core.Layout;","27","","28","import java.io.Serializable;","86","    @Override","95","    @Override","118","    @Override","127","    @Override","137","    @Override","145","    @Override","154","    @Override","164","    @Override"],"delete":["18","import java.io.Serializable;","19","","25","import org.apache.logging.log4j.core.Layout;","28","import org.apache.logging.log4j.Logger;"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppenderTest.java":[{"add":[],"delete":["51","    private static final String HOST = \"localhost\";","274","                    final StringBuilder sb = new StringBuilder();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/StructuredDataFilterTest.java":[{"add":["51","        assertTrue(filter.filter(null, Level.DEBUG, null, msg, null) == Filter.Result.NEUTRAL);","53","        assertTrue(filter.filter(null, Level.ERROR, null, msg, null) == Filter.Result.DENY);","61","        assertTrue(filter.filter(null, Level.DEBUG, null, msg, null) == Filter.Result.NEUTRAL);","63","        assertTrue(filter.filter(null, Level.ERROR, null, msg, null) == Filter.Result.NEUTRAL);"],"delete":["51","        assertTrue(filter.filter(null, Level.DEBUG, null, msg, (Throwable)null) == Filter.Result.NEUTRAL);","53","        assertTrue(filter.filter(null, Level.ERROR, null, msg, (Throwable)null) == Filter.Result.DENY);","61","        assertTrue(filter.filter(null, Level.DEBUG, null, msg, (Throwable)null) == Filter.Result.NEUTRAL);","63","        assertTrue(filter.filter(null, Level.ERROR, null, msg, (Throwable)null) == Filter.Result.NEUTRAL);"]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeEmbeddedManager.java":[{"add":["39","    private static FlumeManagerFactory factory = new FlumeManagerFactory();","116","        return getManager(sb.toString(), factory,","117","                new FactoryData(name, agents, properties, batchSize, dataDir));"],"delete":["39","    private static ManagerFactory factory = new FlumeManagerFactory();","116","        return (FlumeEmbeddedManager) getManager(sb.toString(), factory,","117","            new FactoryData(name, agents, properties, batchSize, dataDir));"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SMTPAppender.java":[{"add":["30","import java.io.Serializable;","31","","51","public final class SMTPAppender<T extends Serializable> extends AbstractAppender<T> {","58","    private SMTPAppender(final String name, final Filter filter, final Layout<T> layout, final SMTPManager manager,","105","    public static <S extends Serializable> SMTPAppender<S> createAppender(@PluginAttr(\"name\") final String name,","119","                                              @PluginElement(\"layout\") Layout<S> layout,","133","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","134","            Layout<S> l = (Layout<S>)HTMLLayout.createLayout(null, null, null, null, null, null);","135","            layout = l;","147","        return new SMTPAppender<S>(name, filter, layout, manager, isHandleExceptions);","170","    @Override"],"delete":["49","public final class SMTPAppender extends AbstractAppender {","56","    private SMTPAppender(final String name, final Filter filter, final Layout<?> layout, final SMTPManager manager,","103","    public static SMTPAppender createAppender(@PluginAttr(\"name\") final String name,","117","                                              @PluginElement(\"layout\") Layout<?> layout,","131","            layout = HTMLLayout.createLayout(null, null, null, null, null, null);","143","        return new SMTPAppender(name, filter, layout, manager, isHandleExceptions);"]}],"taglib\/src\/test\/java\/org\/apache\/logging\/log4j\/taglib\/LoggingMessageTagSupportTest.java":[{"add":["295","    @SuppressWarnings(\"unchecked\")","302","        final List<String> events = ((ListAppender<String>) listApp).getMessages();"],"delete":["301","        final List<String> events = ((ListAppender) listApp).getMessages();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSQueueTest.java":[{"add":["102","        final ListAppender<LogEvent> listApp = new ListAppender<LogEvent>(\"Events\", serverFilters, null, false, false);"],"delete":["102","        final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/ListAppender.java":[{"add":["28","import java.io.Serializable;","38","public class ListAppender<T extends Serializable> extends AbstractAppender<T> {","58","    public ListAppender(final String name, final Filter filter, final Layout<T> layout, final boolean newline,","59","                        final boolean raw) {","71","    @Override","156","    public static <S extends Serializable> ListAppender<S> createAppender(@PluginAttr(\"name\") final String name,","159","                                              @PluginElement(\"layout\") final Layout<S> layout,","167","        final boolean nl = newLine != null && Boolean.parseBoolean(newLine);","168","        final boolean r = raw != null && Boolean.parseBoolean(raw);","170","        return new ListAppender<S>(name, filter, layout, nl, r);"],"delete":["37","public class ListAppender extends AbstractAppender {","57","    public ListAppender(final String name, final Filter filter, final Layout layout, final boolean newline, final boolean raw) {","153","    public static ListAppender createAppender(@PluginAttr(\"name\") final String name,","156","                                              @PluginElement(\"layout\") final Layout layout,","164","        final boolean nl = (newLine == null) ? false : Boolean.parseBoolean(newLine);","165","        final boolean r = (raw == null) ? false : Boolean.parseBoolean(raw);","167","        return new ListAppender(name, filter, layout, nl, r);"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JMarkerFactory.java":[{"add":["31","    @Override","37","        if (marker != null) {","38","            return marker;","40","        marker = new MarkerWrapper(name);","41","        Marker existing = markerMap.putIfAbsent(name, marker);","42","        return existing == null ? marker : existing;","45","    @Override","50","    @Override","55","    @Override"],"delete":["36","        if (marker == null) {","37","            marker = new MarkerWrapper(name);","39","        return marker;"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppenderTest.java":[{"add":[],"delete":["52","    private static final String HOST = \"localhost\";","111","        final Exception parent = new IllegalStateException(\"Test\");"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/FailoverAppender.java":[{"add":["31","import java.io.Serializable;","42","public final class FailoverAppender<T extends Serializable> extends AbstractAppender<T> {","52","    private AppenderControl<?> primary;","54","    private final List<AppenderControl<?>> failoverAppenders = new ArrayList<AppenderControl<?>>();","73","    @SuppressWarnings(\"unchecked\")","103","    @Override","184","    public static <S extends Serializable> FailoverAppender<S> createAppender(@PluginAttr(\"name\") final String name,","224","        return new FailoverAppender<S>(name, filter, primary, failovers, retryInterval, config, handleExceptions);"],"delete":["41","public final class FailoverAppender extends AbstractAppender {","51","    private AppenderControl primary;","53","    private final List<AppenderControl> failoverAppenders = new ArrayList<AppenderControl>();","102","        final RuntimeException re = null;","182","    public static FailoverAppender createAppender(@PluginAttr(\"name\") final String name,","222","        return new FailoverAppender(name, filter, primary, failovers, retryInterval, config, handleExceptions);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTestResultFormatter.java":[{"add":["73","\t\tsb.append(\"\\tAverage latency\").append(sep).append(\"99% less than\").append(sep).append(\"99.99% less than\");","119","\t\t\t\tsb.append(\"\\t\").append(stats.throughput);","173","\t\tString line;"],"delete":["73","\t\tsb.append(\"\\tAverage latency\" + sep + \"99% less than\" + sep","74","\t\t\t\t+ \"99.99% less than\");","120","\t\t\t\tsb.append(\"\\t\").append((long) stats.throughput);","174","\t\tString line = null;"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/StyleConverterTest.java":[{"add":["43","    private static ListAppender<String> app;","51","    @SuppressWarnings(\"unchecked\")","58","                app = (ListAppender<String>) entry.getValue();"],"delete":["43","    private static ListAppender app;","57","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderTest.java":[{"add":["53","        final Layout<String> layout = PatternLayout.createLayout(null, null, null, null);","54","        final ConsoleAppender<String> app = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"true\", \"false\");"],"delete":["53","        final Layout layout = PatternLayout.createLayout(null, null, null, null);","54","        final ConsoleAppender app = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"true\", \"false\");"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/InMemoryAppender.java":[{"add":["24","import java.io.Serializable;","29","public class InMemoryAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","31","    public InMemoryAppender(final String name, final Layout<T> layout, final CompositeFilter filters,","32","                            final boolean handleException) {"],"delete":["28","public class InMemoryAppender extends AbstractOutputStreamAppender {","30","    public InMemoryAppender(final String name, final Layout layout, final CompositeFilter filters, final boolean handleException) {"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JMDCAdapter.java":[{"add":["28","    @Override","33","    @Override","38","    @Override","43","    @Override","48","    @Override","53","    @Override","54","    @SuppressWarnings(\"unchecked\") \/\/ nothing we can do about this, restricted by SLF4J API"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/routing\/RoutingAppenderTest.java":[{"add":["45","    private static ListAppender<LogEvent> app;","49","    @SuppressWarnings(\"unchecked\")","56","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["45","    private static ListAppender app;","55","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/BurstFilterTest.java":[{"add":["42","    private static ListAppender<String> app;\r","47","    @SuppressWarnings(\"unchecked\")\r","54","                app = (ListAppender<String>) entry.getValue();\r"],"delete":["42","    private static ListAppender app;\r","53","                app = (ListAppender) entry.getValue();\r"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":[{"add":["44","import java.io.Serializable;","110","    @Override","111","    @SuppressWarnings(\"unchecked\")","119","    @Override","136","    @Override","153","    @Override","158","    @Override","163","    @SuppressWarnings(\"unchecked\")","230","        final Layout<? extends Serializable> layout =","231","                PatternLayout.createLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\",","232","                        null, null, null);","233","        final Appender<?> appender = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",","266","    @Override","275","    @Override","284","    @Override","294","    public Appender<?> getAppender(final String name) {","302","    @Override","315","    @Override","320","    @Override","325","    @Override","330","    @Override","335","    @Override","349","    @Override","351","                                               final Appender<?> appender) {","375","    @Override","400","    @Override","439","    @Override","465","    @Override","512","    @Override","553","                @SuppressWarnings(\"unchecked\")","567","                @SuppressWarnings(\"unchecked\")","649","                        final Class<?> parmClass = parmClasses[index].getComponentType();","695","                        final Class<?> parmClass = parmClasses[index];"],"delete":["222","        final Layout layout = PatternLayout.createLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\",","223","            null, null, null);","224","        final Appender appender = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",","282","    public Appender getAppender(final String name) {","332","                                               final Appender appender) {","623","                        final Class parmClass = parmClasses[index].getComponentType();","669","                        final Class parmClass = parmClasses[index];"]}],"web\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/web\/Log4jContextListenerTest.java":[{"add":["39","import static org.junit.Assert.assertTrue;","56","        LogManager.getLogger(\"org.apache.test.TestConfigurator\");","63","        assertTrue(\"No Appenders\", map != null && map.size() > 0);","79","        LogManager.getLogger(\"org.apache.test.TestConfigurator\");","86","        assertTrue(\"No Appenders\", map != null && map.size() > 0);","101","        LogManager.getLogger(\"org.apache.test.TestConfigurator\");","108","        assertTrue(\"No Appenders\", map != null && map.size() > 0);","122","        @Override","127","        @Override","132","        @Override","137","        @Override","142","        @Override","147","        @Override","152","        @Override","157","        @Override","162","        @Override","167","        @Override","168","        @Deprecated","169","        @SuppressWarnings(\"deprecation\")","174","        @Override","175","        @Deprecated","176","        @SuppressWarnings(\"deprecation\")","181","        @Override","182","        @Deprecated","183","        @SuppressWarnings(\"deprecation\")","188","        @Override","193","        @Override","194","        @Deprecated","195","        @SuppressWarnings(\"deprecation\")","201","        @Override","207","        @Override","212","        @Override","221","        @Override","226","        @Override","231","        @Override","236","        @Override","241","        @Override","246","        @Override","251","        @Override","256","        @Override"],"delete":["19","import org.apache.logging.log4j.Logger;","39","import static org.junit.Assert.assertTrue;","57","        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");","64","        assertNotNull(\"No Appenders\", map != null && map.size() > 0);","80","        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");","87","        assertNotNull(\"No Appenders\", map != null && map.size() > 0);","102","        final Logger logger = LogManager.getLogger(\"org.apache.test.TestConfigurator\");","109","        assertNotNull(\"No Appenders\", map != null && map.size() > 0);","119","        private String name;","120","","125",""]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSQueueFailoverTest.java":[{"add":["60","    private static ListAppender<LogEvent> app;","78","    @SuppressWarnings(\"unchecked\")","83","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["60","    private static ListAppender app;","82","                app = (ListAppender) entry.getValue();"]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAppender.java":[{"add":["29","import java.io.Serializable;","36","public final class FlumeAppender<T extends Serializable> extends AbstractAppender<T> implements FlumeEventFactory {","60","    private FlumeAppender(final String name, final Filter filter, final Layout<T> layout, final boolean handleException,","139","    public static <S extends Serializable> FlumeAppender<S> createAppender(@PluginElement(\"agents\") Agent[] agents,","158","                                                   @PluginElement(\"layout\") Layout<S> layout,","196","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","197","            Layout<S> l = (Layout<S>)RFC5424Layout.createLayout(null, null, null, \"True\", null, mdcPrefix, eventPrefix,","198","                    null, null, null, excludes, includes, required, null, null, null, null);","199","            layout = l;","241","        return new FlumeAppender<S>(name, filter, layout,  handleExceptions, includes,"],"delete":["35","public final class FlumeAppender extends AbstractAppender implements FlumeEventFactory {","59","    private FlumeAppender(final String name, final Filter filter, final Layout layout, final boolean handleException,","138","    public static FlumeAppender createAppender(@PluginElement(\"agents\") Agent[] agents,","157","                                                   @PluginElement(\"layout\") Layout layout,","194","","196","            layout = RFC5424Layout.createLayout(null, null, null, \"True\", null, mdcPrefix, eventPrefix, null, null,","197","                null, excludes, includes, required, null, null, null, null);","239","        return new FlumeAppender(name, filter, layout,  handleExceptions, includes,"]}],"flume-ng\/pom.xml":[{"add":["259","        <version>${pmd.plugin.version}<\/version>","261","          <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["260","          <targetJdk>1.5<\/targetJdk>"]}],"web\/pom.xml":[{"add":["173","              <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["173","              <targetJdk>1.5<\/targetJdk>"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/util\/Profiler.java":[{"add":["26","    private static Class<?> controllerClazz;"],"delete":["26","    private static Class controllerClazz;"]}],"BUILDING.txt":[{"add":["2","To build Log4J 2, you need a JDK implementation version 1.6 or greater, and Apache Maven."],"delete":["2","To build Log4J 2, you need a JDK implementation version 1.5 or greater, and Apache Maven."]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfigurationTest.java":[{"add":["30","import java.io.BufferedReader;","33","import java.io.InputStreamReader;","37","import static org.junit.Assert.*;","53","            final String name = config.getName();","104","        final BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(LOGFILE)));","108","            while (is.ready()) {"],"delete":["30","import java.io.BufferedInputStream;","31","import java.io.DataInputStream;","37","import static org.junit.Assert.assertTrue;","38","import static org.junit.Assert.assertNotNull;","39","import static org.junit.Assert.assertEquals;","55","            final String name = ((XMLConfiguration) config).getName();","106","        final DataInputStream is = new DataInputStream(new BufferedInputStream(new FileInputStream(LOGFILE)));","110","            while (is.available() != 0) {"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSTopicFailoverTest.java":[{"add":["59","    private static ListAppender<LogEvent> app;","77","    @SuppressWarnings(\"unchecked\")","82","                app = (ListAppender<LogEvent>) entry.getValue();"],"delete":["59","    private static ListAppender app;","81","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketTest.java":[{"add":["25","import java.io.IOException;","26","import java.io.InputStream;","27","import java.net.ServerSocket;","28","import java.net.Socket;","29","import java.util.concurrent.Callable;","30","import java.util.concurrent.ExecutorService;","31","","67","        @Override"],"delete":["18","import java.io.IOException;","19","import java.io.InputStream;","20","import java.net.ServerSocket;","21","import java.net.Socket;","22","import java.util.concurrent.Callable;","23","import java.util.concurrent.ExecutorService;"]}],"core\/src\/test\/java\/org\/apache\/logging\/dumbster\/smtp\/SimpleSmtpServer.java":[{"add":["37","    private final List<SmtpMessage> receivedMail;\r","70","        receivedMail = new ArrayList<SmtpMessage>();\r","77","    @Override\r","115","                    final List<SmtpMessage> msgs = handleTransaction(out, input);\r","166","    private List<SmtpMessage> handleTransaction(final PrintWriter out, final BufferedReader input) throws IOException {\r","178","        final List<SmtpMessage> msgList = new ArrayList<SmtpMessage>();\r"],"delete":["37","    private final List receivedMail;\r","70","        receivedMail = new ArrayList();\r","114","                    final List msgs = handleTransaction(out, input);\r","165","    private List handleTransaction(final PrintWriter out, final BufferedReader input) throws IOException {\r","177","        final List msgList = new ArrayList();\r"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/JMSTopicTest.java":[{"add":["45","import java.io.Serializable;","103","        final ListAppender<Serializable> listApp = new ListAppender<Serializable>(\"Events\", serverFilters, null, false, false);","106","        final ConsoleAppender<? extends Serializable> console =","107","                ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");"],"delete":["102","        final ListAppender listApp = new ListAppender(\"Events\", serverFilters, null, false, false);","105","        final ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppenderTest.java":[{"add":["43","    private static ListAppender<String> app;","47","    @SuppressWarnings(\"unchecked\")","54","                app = (ListAppender<String>) entry.getValue();"],"delete":["43","    private static ListAppender app;","53","                app = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/TimeFilterTest.java":[{"add":["40","        cal.set(Calendar.HOUR_OF_DAY, 2);","49","        cal.set(Calendar.HOUR_OF_DAY, 4);"],"delete":["40","        cal.set(Calendar.HOUR_OF_DAY, 02);","49","        cal.set(Calendar.HOUR_OF_DAY, 04);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppender.java":[{"add":["31","import java.io.Serializable;","45","public final class ConsoleAppender<T extends Serializable> extends AbstractOutputStreamAppender<T> {","59","    private ConsoleAppender(final String name, final Layout<T> layout, final Filter filter,","77","    public static <S extends Serializable> ConsoleAppender<S> createAppender(@PluginElement(\"layout\") Layout<S> layout,","88","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","89","            Layout<S> l = (Layout<S>)PatternLayout.createLayout(null, null, null, null);","90","            layout = l;","95","        return new ConsoleAppender<S>(name, layout, filter, getManager(isFollow, target), handleExceptions);","229","        @Override"],"delete":["44","public final class ConsoleAppender extends AbstractOutputStreamAppender {","58","    private ConsoleAppender(final String name, final Layout layout, final Filter filter,","76","    public static ConsoleAppender createAppender(@PluginElement(\"layout\") Layout layout,","87","            layout = PatternLayout.createLayout(null, null, null, null);","92","        return new ConsoleAppender(name, layout, filter, getManager(isFollow, target), handleExceptions);"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/impl\/StaticMarkerBinder.java":[{"add":["34","    @Override","39","    @Override"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/XMLConfiguration.java":[{"add":["146","                        @SuppressWarnings(\"unchecked\")","147","                        final PluginType<Advertiser> type = getPluginManager().getPluginType(advertiserString);"],"delete":["146","                        final PluginType type = getPluginManager().getPluginType(advertiserString);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsynchAppender.java":[{"add":["59","    private AppenderControl<?> errorAppender;","76","    @SuppressWarnings(\"unchecked\")","79","        final List<AppenderControl<?>> appenders = new ArrayList<AppenderControl<?>>();","121","    @Override","184","        final boolean isIncludeLocation = includeLocation != null && Boolean.parseBoolean(includeLocation);","198","        private final List<AppenderControl<?>> appenders;","201","        public AsynchThread(final List<AppenderControl<?>> appenders, final BlockingQueue<Serializable> queue) {"],"delete":["59","    private AppenderControl errorAppender;","78","        final List<AppenderControl> appenders = new ArrayList<AppenderControl>();","182","        final boolean isIncludeLocation = includeLocation == null ? false :","183","                Boolean.parseBoolean(includeLocation);","197","        private final List<AppenderControl> appenders;","200","        public AsynchThread(final List<AppenderControl> appenders, final BlockingQueue<Serializable> queue) {"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rewrite\/TestRewritePolicy.java":[{"add":["29","    @Override"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTestDriver.java":[{"add":["18","import org.apache.logging.log4j.core.async.AsyncLoggerContextSelector;","19","","28","import java.util.Collections;","37","    }","94","                Collections.addAll(args, _systemProperties);","168","                    _count += Integer.parseInt(parts[i].split(\"=\")[1]);","176","            _averageOpsPerSec = totalOps \/ _throughputRowCount;","295","            runPerfTest(repeat, x++, config, pb);","319","        printRanking(tests.toArray(new Setup[tests.size()]));","357","            @Override"],"delete":["28","import org.apache.logging.log4j.core.async.AsyncLoggerContextSelector;","29","","36","    };","93","                for (String property : _systemProperties) {","94","                    args.add(property);","95","                }","169","                    _count += Integer.parseInt(parts[i++].split(\"=\")[1]);","177","            _averageOpsPerSec = totalOps \/ (int) _throughputRowCount;","296","            int count = repeat;","297","            runPerfTest(count, x++, config, pb);","321","        printRanking((Setup[]) tests.toArray(new Setup[tests.size()]));"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/PatternParser.java":[{"add":["18","import org.apache.logging.log4j.Logger;","19","import org.apache.logging.log4j.core.config.Configuration;","20","import org.apache.logging.log4j.core.config.plugins.PluginManager;","21","import org.apache.logging.log4j.core.config.plugins.PluginType;","22","import org.apache.logging.log4j.status.StatusLogger;","23","","120","                @SuppressWarnings(\"unchecked\")","121","                final Class<PatternConverter> clazz = (Class<PatternConverter>)type.getPluginClass();"],"delete":["26","import org.apache.logging.log4j.Logger;","27","import org.apache.logging.log4j.core.config.Configuration;","28","import org.apache.logging.log4j.core.config.plugins.PluginManager;","29","import org.apache.logging.log4j.core.config.plugins.PluginType;","30","import org.apache.logging.log4j.status.StatusLogger;","31","","120","                final Class<PatternConverter> clazz = type.getPluginClass();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/FileAppenderTest.java":[{"add":["21","import org.apache.logging.log4j.core.impl.Log4jLogEvent;","27","import org.junit.Test;","139","        final Layout<String> layout = PatternLayout.createLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, null, null, null);","140","        final FileAppender<String> app = FileAppender.createAppender(FILENAME, \"true\", Boolean.toString(lock), \"test\", \"false\",","164","        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));","167","        while (is.ready()) {","196","        @Override"],"delete":["20","import org.apache.logging.log4j.core.impl.Log4jLogEvent;","25","import org.junit.Test;","29","import java.io.BufferedInputStream;","31","import java.io.DataInputStream;","141","        final Layout layout = PatternLayout.createLayout(PatternLayout.SIMPLE_CONVERSION_PATTERN, null, null, null);","142","        final FileAppender app = FileAppender.createAppender(FILENAME, \"true\", Boolean.toString(lock), \"test\", \"false\",","166","        final DataInputStream is = new DataInputStream(new BufferedInputStream(fis));","169","        while (is.available() != 0) {"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/RegexReplacementTest.java":[{"add":["44","    private static ListAppender<String> app;","45","    private static ListAppender<String> app2;","51","    @SuppressWarnings(\"unchecked\")","58","                app = (ListAppender<String>) entry.getValue();","61","                app2 = (ListAppender<String>) entry.getValue();"],"delete":["44","    private static ListAppender app;","45","    private static ListAppender app2;","57","                app = (ListAppender) entry.getValue();","60","                app2 = (ListAppender) entry.getValue();"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/RFC5424LayoutTest.java":[{"add":["84","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);","148","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);","211","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);"],"delete":["84","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);","148","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);","211","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/test\/appender\/AlwaysFailAppender.java":[{"add":["25","import java.io.Serializable;","26","","31","public class AlwaysFailAppender<T extends Serializable> extends AbstractAppender<T> {","37","    @Override","43","    public static <S extends Serializable> AlwaysFailAppender<S> createAppender(@PluginAttr(\"name\") final String name) {","49","        return new AlwaysFailAppender<S>(name);"],"delete":["29","public class AlwaysFailAppender extends AbstractAppender {","40","    public static AlwaysFailAppender createAppender(@PluginAttr(\"name\") final String name) {","46","        return new AlwaysFailAppender(name);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/OutputStreamAppenderTest.java":[{"add":["39","        final Layout<String> layout = PatternLayout.createLayout(null, null, null, null);","40","        final InMemoryAppender<String> app = new InMemoryAppender<String>(\"test\", layout, null, false);"],"delete":["39","        final Layout layout = PatternLayout.createLayout(null, null, null, null);","40","        final InMemoryAppender app = new InMemoryAppender(\"test\", layout, null, false);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/pattern\/ThrowableTest.java":[{"add":["40","    private static ListAppender<String> app;","44","    @SuppressWarnings(\"unchecked\")","51","                app = (ListAppender<String>) entry.getValue();"],"delete":["40","    private static ListAppender app;","50","                app = (ListAppender) entry.getValue();"]}],"api\/pom.xml":[{"add":["152","          <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["152","          <targetJdk>1.5<\/targetJdk>"]}],"slf4j-impl\/src\/main\/java\/org\/slf4j\/helpers\/Log4JLoggerFactory.java":[{"add":["43","    @Override"],"delete":[]}],"taglib\/pom.xml":[{"add":["191","          <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["191","          <targetJdk>1.5<\/targetJdk>"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/filter\/MapFilterTest.java":[{"add":["89","        assertNotNull(\"No Map\", map);","101","        @SuppressWarnings(\"unchecked\")","102","        final List<String> msgs = ((ListAppender<String>) app).getMessages();"],"delete":["89","        assertNotNull(\"No Map\", map == null);","101","        final List<String> msgs = ((ListAppender) app).getMessages();"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/JMSQueueAppender.java":[{"add":["28","import java.io.Serializable;","29","","34","public final class JMSQueueAppender<T extends Serializable> extends AbstractAppender<T> {","38","    private JMSQueueAppender(final String name, final Filter filter, final Layout<T> layout,","39","                             final JMSQueueManager manager, final boolean handleExceptions) {","49","    @Override","78","    public static <S extends Serializable> JMSQueueAppender<S> createAppender(","89","                                                @PluginElement(\"layout\") Layout<S> layout,","103","            @SuppressWarnings({\"unchecked\", \"UnnecessaryLocalVariable\"})","104","            Layout<S> l = (Layout<S>) SerializedLayout.createLayout();","105","            layout = l;","107","        return new JMSQueueAppender<S>(name, filter, layout, manager, handleExceptions);"],"delete":["32","public final class JMSQueueAppender extends AbstractAppender {","36","    private JMSQueueAppender(final String name, final Filter filter, final Layout layout, final JMSQueueManager manager,","37","                            final boolean handleExceptions) {","75","    public static JMSQueueAppender createAppender(","86","                                                @PluginElement(\"layout\") Layout layout,","100","            layout = SerializedLayout.createLayout();","102","        return new JMSQueueAppender(name, filter, layout, manager, handleExceptions);"]}],"core\/build.xml":[{"add":["52","    <property name=\"javac.source\" value=\"1.6\"\/>","53","    <property name=\"javac.target\" value=\"1.6\"\/>"],"delete":["52","    <property name=\"javac.source\" value=\"1.5\"\/>","53","    <property name=\"javac.target\" value=\"1.5\"\/>"]}],"log4j12-api\/pom.xml":[{"add":["160","              <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["160","              <targetJdk>1.5<\/targetJdk>"]}],"src\/changes\/changes.xml":[{"add":["25","      <action issue=\"LOG4J2-221\" dev-\"rgoers\" type=\"fix\" due-to=\"Nick Williams\">","26","        Remove hundreds of compiler warnings.","27","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/impl\/ThrowableProxy.java":[{"add":["513","                return (ThrowableProxy[]) getSuppressed.invoke(this);","514","            } catch (final Exception ignore) {","524","                final Throwable[] array = (Throwable[]) getSuppressed.invoke(throwable);","528","            } catch (final Exception ignore) {"],"delete":["513","                return (ThrowableProxy[]) getSuppressed.invoke(this, null);","514","            } catch (final Exception ex) {","524","                final Throwable[] array = (Throwable[]) getSuppressed.invoke(throwable, null);","528","            } catch (final Exception ex) {"]}],"core\/src\/test\/java\/org\/apache\/logging\/dumbster\/smtp\/SmtpMessage.java":[{"add":["32","    private final Map<String, List<String>> headers;\r","42","        headers = new HashMap<String, List<String>>(10);\r","84","        final List<String> values = headers.get(name);\r","88","            return values.toArray(new String[values.size()]);\r","99","        final List<String> values = headers.get(name);\r","103","            final Iterator<String> iterator = values.iterator();\r","104","            return iterator.hasNext() ? iterator.next() : null;\r","124","        List<String> valueList = headers.get(name);\r","126","            valueList = new ArrayList<String>(1);\r","139","        final StringBuilder msg = new StringBuilder();\r","140","        for (final Map.Entry<String, List<String>> entry : headers.entrySet()) {\r","141","            String name = entry.getKey();\r","142","            List<String> values = entry.getValue();\r","143","            for (String value : values) {\r"],"delete":["32","    private final Map headers;\r","42","        headers = new HashMap(10);\r","84","        final List values = (List) headers.get(name);\r","88","            return (String[]) values.toArray(new String[0]);\r","99","        final List values = (List) headers.get(name);\r","103","            final Iterator iterator = values.iterator();\r","104","            return (String) iterator.next();\r","124","        List valueList = (List) headers.get(name);\r","126","            valueList = new ArrayList(1);\r","139","        final StringBuffer msg = new StringBuffer();\r","140","        for (final Iterator i = headers.keySet().iterator(); i.hasNext(); ) {\r","141","            final String name = (String) i.next();\r","142","            final List values = (List) headers.get(name);\r","143","            for (final Iterator j = values.iterator(); j.hasNext(); ) {\r","144","                final String value = (String) j.next();\r"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayoutTest.java":[{"add":["67","        final ListAppender<String> appender = new ListAppender<String>(\"List\", null, layout, true, false);"],"delete":["67","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);"]}],"slf4j-impl\/pom.xml":[{"add":["168","              <targetJdk>${maven.compile.target}<\/targetJdk>"],"delete":["168","              <targetJdk>1.5<\/targetJdk>"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/DefaultConfiguration.java":[{"add":["25","import java.io.Serializable;","26","","50","        final Layout<? extends Serializable> layout =","51","                PatternLayout.createLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\", null, null, null);","52","        final Appender<? extends Serializable> appender =","53","                ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\", \"true\");"],"delete":["48","        final Layout layout = PatternLayout.createLayout(\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\",","49","            null, null, null);","50","        final Appender appender = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"false\",","51","            \"true\");"]}]}},"11763dee30c14829ac0dac21e0063a90271c1c0e":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Transform.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JSONLayoutTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JSONLayout.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Transform.java":[{"add":["141","            final String escBs = \"\\\\\";"],"delete":["141","            final String escBs = \"\\\\\\\\\";"]}],"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-478\" dev=\"ggregory\" type=\"fix\" due-to=\"Michael Friedmann.\">","24","        The message and ndc fields are not JavaScript escaped in JSONLayout.","25","      <\/action>"],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JSONLayoutTest.java":[{"add":["128","    @Test","129","    public void testEscapeLayout() throws Exception {","130","","131","        \/\/ set up appender","132","        final JSONLayout layout = JSONLayout.createLayout(\"true\", \"true\", \"true\", \"false\", null);","133","        final ListAppender appender = new ListAppender(\"List\", null, layout, true, false);","134","        appender.start();","135","","136","        \/\/ set appender on root and set level to debug","137","        this.root.addAppender(appender);","138","        this.root.setLevel(Level.DEBUG);","139","","140","        \/\/ output starting message","141","        this.root.debug(\"Here is a quote ' and then a double quote \\\"\");","142","","143","        appender.stop();","144","","145","        final List<String> list = appender.getMessages();","146","","147","        this.checkAt(\"[\", 0, list);","148","        this.checkAt(\"{\", 1, list);","149","        this.checkAt(\"\\\"logger\\\":\\\"root\\\",\", 2, list);","150","        this.checkAt(\"\\\"level\\\":\\\"DEBUG\\\",\", 4, list);","151","        this.checkAt(\"\\\"message\\\":\\\"Here is a quote ' and then a double quote \\\\\\\"\\\",\", 6, list);","152","    }","153",""],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/JSONLayout.java":[{"add":["191","                buf.append(Transform.escapeJsonControlCharacters(event.getMessage().getFormattedMessage()));","200","            buf.append(Transform.escapeJsonControlCharacters(event.getContextStack().toString()));"],"delete":["191","                Transform.appendEscapingCDATA(buf, event.getMessage().getFormattedMessage());","200","            Transform.appendEscapingCDATA(buf, event.getContextStack().toString());"]}]}},"6757d39783f62961fe9f520367799f8d6fb30bca":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":"MODIFY","log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/StringBuilders.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/EncodingPatternConverter.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/MapMessageTest.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/message\/MapMessage.java":[{"add":["23","import org.apache.logging.log4j.util.Chars;","347","                    .append(\"\\\">\");","348","            int size = sb.length();","349","            sb.append(data.<Object>getValueAt(i));","350","            StringBuilders.escapeXml(sb, size);","351","            sb.append(\"<\/Entry>\\n\");","405","            sb.append(Chars.DQUOTE);","406","            int start = sb.length();","407","            sb.append(data.getKeyAt(i));","408","            StringBuilders.escapeJson(sb, start);","409","            sb.append(Chars.DQUOTE).append(':').append(Chars.DQUOTE);","410","            start = sb.length();","411","            sb.append(data.<Object>getValueAt(i));","412","            StringBuilders.escapeJson(sb, start);","413","            sb.append(Chars.DQUOTE);"],"delete":["346","                    .append(\"\\\">\")","347","                    .append(data.<Object>getValueAt(i))","348","                    .append(\"<\/Entry>\\n\");","402","            StringBuilders.appendDqValue(sb, data.getKeyAt(i)).append(':');","403","            StringBuilders.appendDqValue(sb, data.getValueAt(i));"]}],"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/util\/StringBuilders.java":[{"add":["160","","161","    public static void escapeJson(final StringBuilder toAppendTo, final int start) {","162","        for (int i = toAppendTo.length() - 1; i >= start; i--) { \/\/ backwards: length may change","163","            final char c = toAppendTo.charAt(i);","164","            if (Character.isISOControl(c)) {","165","                \/\/ all iso control characters are in U+00xx","166","                toAppendTo.setCharAt(i, '\\\\');","167","                toAppendTo.insert(i + 1, \"u0000\");","168","                toAppendTo.setCharAt(i + 4, Chars.getUpperCaseHex((c & 0xF0) >> 4));","169","                toAppendTo.setCharAt(i + 5, Chars.getUpperCaseHex(c & 0xF));","170","            } else if (c == '\"' || c == '\\\\') {","171","                \/\/ only \" and \\ need to be escaped; other escapes are optional","172","                toAppendTo.insert(i, '\\\\');","173","            }","174","        }","175","    }","176","","177","    public static void escapeXml(final StringBuilder toAppendTo, final int start) {","178","        for (int i = toAppendTo.length() - 1; i >= start; i--) { \/\/ backwards: length may change","179","            final char c = toAppendTo.charAt(i);","180","            switch (c) {","181","                case '&':","182","                    toAppendTo.setCharAt(i, '&');","183","                    toAppendTo.insert(i + 1, \"amp;\");","184","                    break;","185","                case '<':","186","                    toAppendTo.setCharAt(i, '&');","187","                    toAppendTo.insert(i + 1, \"lt;\");","188","                    break;","189","                case '>':","190","                    toAppendTo.setCharAt(i, '&');","191","                    toAppendTo.insert(i + 1, \"gt;\");","192","                    break;","193","                case '\"':","194","                    toAppendTo.setCharAt(i, '&');","195","                    toAppendTo.insert(i + 1, \"quot;\");","196","                    break;","197","                case '\\'':","198","                    toAppendTo.setCharAt(i, '&');","199","                    toAppendTo.insert(i + 1, \"apos;\");","200","                    break;","201","            }","202","        }","203","    }"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/pattern\/EncodingPatternConverter.java":[{"add":["27","import org.apache.logging.log4j.util.StringBuilders;","142","                StringBuilders.escapeJson(toAppendTo, start);","173","                StringBuilders.escapeXml(toAppendTo, start);"],"delete":["141","                for (int i = toAppendTo.length() - 1; i >= start; i--) { \/\/ backwards: length may change","142","                    final char c = toAppendTo.charAt(i);","143","                    if (Character.isISOControl(c)) {","144","                        \/\/ all iso control characters are in U+00xx","145","                        toAppendTo.setCharAt(i, '\\\\');","146","                        toAppendTo.insert(i + 1, \"u0000\");","147","                        toAppendTo.setCharAt(i + 4, Chars.getUpperCaseHex((c & 0xF0) >> 4));","148","                        toAppendTo.setCharAt(i + 5, Chars.getUpperCaseHex(c & 0xF));","149","                    } else if (c == '\"' || c == '\\\\') {","150","                        \/\/ only \" and \\ need to be escaped; other escapes are optional","151","                        toAppendTo.insert(i, '\\\\');","152","                    }","153","                }","184","                for (int i = toAppendTo.length() - 1; i >= start; i--) { \/\/ backwards: length may change","185","                    final char c = toAppendTo.charAt(i);","186","                    switch (c) {","187","                        case '&':","188","                            toAppendTo.setCharAt(i, '&');","189","                            toAppendTo.insert(i + 1, \"amp;\");","190","                            break;","191","                        case '<':","192","                            toAppendTo.setCharAt(i, '&');","193","                            toAppendTo.insert(i + 1, \"lt;\");","194","                            break;","195","                        case '>':","196","                            toAppendTo.setCharAt(i, '&');","197","                            toAppendTo.insert(i + 1, \"gt;\");","198","                            break;","199","                        case '\"':","200","                            toAppendTo.setCharAt(i, '&');","201","                            toAppendTo.insert(i + 1, \"quot;\");","202","                            break;","203","                        case '\\'':","204","                            toAppendTo.setCharAt(i, '&');","205","                            toAppendTo.insert(i + 1, \"apos;\");","206","                            break;","207","                    }","208","                }"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/message\/MapMessageTest.java":[{"add":["66","    public void testXMLEscape() {","67","        final String testMsg = \"Test message <foo>\";","68","        final StringMapMessage msg = new StringMapMessage();","69","        msg.put(\"message\", testMsg);","70","        final String result = msg.getFormattedMessage(new String[]{\"XML\"});","71","        final String expected = \"<Map>\\n  <Entry key=\\\"message\\\">Test message &lt;foo&gt;<\/Entry>\\n\" +","72","                \"<\/Map>\";","73","        assertEquals(expected, result);","74","    }","75","","76","    @Test","88","    public void testJSONEscape() {","89","        final String testMsg = \"Test message \\\"Hello, World!\\\"\";","90","        final StringMapMessage msg = new StringMapMessage();","91","        msg.put(\"message\", testMsg);","92","        final String result = msg.getFormattedMessage(new String[]{\"JSON\"});","93","        final String expected = \"{\\\"message\\\":\\\"Test message \\\\\\\"Hello, World!\\\\\\\"\\\"}\";","94","        assertEquals(expected, result);","95","    }","96","","97","    @Test"],"delete":[]}]}},"64c8a69bb83fc84b9505b053e35e16540367c9f8":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/action\/ZipCompressAction.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/action\/ZipCompressAction.java":[{"add":["100","            throws IOException {","102","            try (final FileInputStream fis = new FileInputStream(source);","103","                    final ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(destination))) {","104","                zos.setLevel(level);","106","                final ZipEntry zipEntry = new ZipEntry(source.getName());","107","                zos.putNextEntry(zipEntry);","109","                final byte[] inbuf = new byte[BUF_SIZE];","110","                int n;","112","                while ((n = fis.read(inbuf)) != -1) {","113","                    zos.write(inbuf, 0, n);","114","                }"],"delete":["100","        throws IOException {","102","            final FileInputStream fis = new FileInputStream(source);","103","            final FileOutputStream fos = new FileOutputStream(destination);","104","            final ZipOutputStream zos = new ZipOutputStream(fos);","105","            zos.setLevel(level);","107","            final ZipEntry zipEntry = new ZipEntry(source.getName());","108","            zos.putNextEntry(zipEntry);","110","            final byte[] inbuf = new byte[BUF_SIZE];","111","            int n;","113","            while ((n = fis.read(inbuf)) != -1) {","114","                zos.write(inbuf, 0, n);","117","            zos.close();","118","            fis.close();","119",""]}],"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1019\" dev=\"ggregory\" type=\"fix\">","27","        ZipCompressAction leaves files open when an IO error takes place.","28","      <\/action>"],"delete":[]}]}},"87bd97e48fae2418181f8c6a428e1f5347eccdb1":{"changes":{"src\/changes\/changes.xml":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAvroManager.java":"MODIFY","flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentManager.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["25","      <action issue=\"LOG4J2-275\" dev=\"rgoers\" type=\"fix\">","26","        FlumeAvroManager fails to notify client of failing event if Flume RPCClient cannot be created.","27","      <\/action>"],"delete":[]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumeAvroManager.java":[{"add":["146","        }  else {","147","            String msg = \"Unable to write to \" + getName() + \" at \" + agents[current].getHost() + \":\" +","148","                agents[current].getPort();","149","            LOGGER.warn(msg);","150","            throw new AppenderRuntimeException(\"No Flume agents are available\");","171","        } else {","172","            String msg = \"Unable to write to \" + getName() + \" at \" + agents[current].getHost() + \":\" +","173","                agents[current].getPort();","174","            LOGGER.warn(msg);","175","            throw new AppenderRuntimeException(\"No Flume agents are available\");"],"delete":[]}],"flume-ng\/src\/main\/java\/org\/apache\/logging\/log4j\/flume\/appender\/FlumePersistentManager.java":[{"add":["437","                                        try {","438","                                            cursor.delete();","439","                                        } catch (Exception ex) {","440","                                            LOGGER.error(\"Unable to delete event\", ex);"],"delete":["437","                                        if (!errors) {","438","                                            try {","439","                                                cursor.delete();","440","                                            } catch (Exception ex) {","441","                                                LOGGER.error(\"Unable to delete event\", ex);","442","                                            }"]}]}},"9be7f31d93e0dbdf5a1c603490652e33d01e2115":{"changes":{"src\/changes\/changes.xml":"MODIFY","pom.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["63","      <action issue=\"LOG4J2-1253\" dev=\"ggregory\" type=\"update\">","64","        Update LMAX Disruptor from 3.3.2 to 3.3.4.","65","      <\/action>"],"delete":[]}],"pom.xml":[{"add":["195","    <disruptorVersion>3.3.4<\/disruptorVersion>"],"delete":["195","    <disruptorVersion>3.3.2<\/disruptorVersion>"]}]}},"4c95866dc3fcfa109730c9843da144c5bf4599ae":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/FileConfigurationMonitor.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1048\" dev=\"rpopma\" type=\"fix\" due-to=\"Nikhil\">","27","        FileConfigurationMonitor unnecessarily calls System.currentTimeMillis causing high CPU usage.","28","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/FileConfigurationMonitor.java":[{"add":["75","        final long current;","76","        if (((counter.incrementAndGet() & MASK) == 0) && ((current = System.currentTimeMillis()) >= nextCheck)) {"],"delete":["75","        final long current = System.currentTimeMillis();","76","        if (((counter.incrementAndGet() & MASK) == 0) && (current >= nextCheck)) {"]}]}},"9d1ffa7e4683b16c653a6fe3f2f3093662526cb2":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/PatternProcessorTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/PatternProcessor.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/PatternProcessorTest.java":[{"add":["238","    \/**","239","     * Tests https:\/\/issues.apache.org\/jira\/browse\/LOG4J2-1232","240","     *\/","251","            \/\/ expect Sunday January 3, 2016","253","            expected.set(2016, Calendar.JANUARY, 3, 00, 00, 00);"],"delete":["239","    @Ignore(\"https:\/\/issues.apache.org\/jira\/browse\/LOG4J2-1232\")","249","            \/\/ expect Monday January 4, 2016","251","            expected.set(2016, Calendar.JANUARY, 4, 00, 00, 00);"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/PatternProcessor.java":[{"add":["90","        \/\/\r","91","        \/\/ https:\/\/issues.apache.org\/jira\/browse\/LOG4J2-1232\r","92","        \/\/ Call setMinimalDaysInFirstWeek(7);\r","93","        \/\/\r","103","        currentCal.setMinimalDaysInFirstWeek(7);\r","104","        cal.setMinimalDaysInFirstWeek(7);\r"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["42","      <action issue=\"LOG4J2-1232\" dev=\"ggregory\" type=\"fix\" due-to=\"Nikolai\">","43","        Incorrect log rotation in last week of year.","44","      <\/action>"],"delete":[]}]}},"c29526014207b3937b70a91c6572c40b6704262d":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/StrSubstitutor.java":"MODIFY","log4j-core\/src\/test\/resources\/log4j-loggerprops.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/lookup\/StrSubstitutor.java":[{"add":["187","    private boolean enableSubstitutionInVariables = true;","942","                                final int endPos = pos;","958","                                            varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);","1331","     * <code>${jre-${java.version}}<\/code>. The default value is <b>true<\/b>."],"delete":["187","    private boolean enableSubstitutionInVariables;","942","                                int endPos = pos;","958","                                            varDefaultValue = variableResolver.lookup(varNameExpr.substring(i + valueDelimiterMatchLen));","959","                                            if (varDefaultValue != null) {","960","                                                ++endPos;","961","                                            }","962","                                            if (varDefaultValue == null) {","963","                                                varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);","964","                                            }","1337","     * <code>${jre-${java.version}}<\/code>. The default value is <b>false<\/b>."]}],"log4j-core\/src\/test\/resources\/log4j-loggerprops.xml":[{"add":["22","     <Property name=\"test5\">${sys:test:-${sys:test2}}<\/Property>"],"delete":["22","     <Property name=\"test5\">${sys:test3:-${sys:test}}<\/Property>"]}]}},"67bf1e8ad2987251b13175620e20e68465caca5c":{"changes":{"log4j-core\/src\/test\/resources\/log4j2-272.xml":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderAnsiStyleJira272Main.java":"ADD"},"diff":{"log4j-core\/src\/test\/resources\/log4j2-272.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/ConsoleAppenderAnsiStyleJira272Main.java":[{"add":[],"delete":[]}]}},"2f90f03c9ea7b144be8bf85e94a8d83676e39a9c":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CharsetsTest.java":"ADD","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Charsets.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-255\" dev=\"rpopma\" type=\"fix\">","25","        Multi-byte character strings are now assumed to be in the platform default encoding, not UTF-8.","26","      <\/action>"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/helpers\/CharsetsTest.java":[{"add":[],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/helpers\/Charsets.java":[{"add":["33","     * Returns a Charset, if possible the Charset for the specified {@code charsetName},","34","     * otherwise (if the specified {@code charsetName} is {@code null} or not supported)","35","     * this method returns the platform default Charset.","38","     *            name of the preferred charset or {@code null}","49","            charset = Charset.defaultCharset();"],"delete":["33","     * Gets a Charset, starting with the preferred {@code charsetName} if supported, if not, use UTF-8.","36","     *            the preferred charset name","47","            charset = UTF_8;"]}]}},"e46425617bf9dc7401488f848bdd2936cba2de33":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketServer.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["23","    <release version=\"2.0-beta7\" date=\"2013-??-??\" description=\"Bug fixes and enhancements\">","24","      <action issue=\"LOG4J2-247\" dev=\"ggregory\" type=\"fix\">","25","        SocketServer.isActive should be volatile because it is accessed from different threads.","26","      <\/action>","27","    <\/release>"],"delete":["22",""]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/SocketServer.java":[{"add":["53","    private volatile boolean isActive = true;"],"delete":["53","    private boolean isActive = true;"]}]}},"da0846c8524a33243f23396a23e997fc7806e8c1":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/DatagramSocketManager.java":"MODIFY","\/dev\/null":"DELETE","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/UDPSocketServerTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/DefaultErrorHandler.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/DatagramOutputStream.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/UDPSocketServer.java":"ADD","src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/AbstractSocketServerTest.java":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/TCPSocketServerTest.java":"MODIFY"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/DatagramSocketManager.java":[{"add":["106","            final OutputStream os = new DatagramOutputStream(data.host, data.port, data.layout.getHeader(),","107","                data.layout.getFooter());"],"delete":["106","            final OutputStream os = new DatagramOutputStream(data.host, data.port);"]}],"\/dev\/null":[{"add":[],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/UDPSocketServerTest.java":[{"add":["50","        super(\"udp\", PORT, true);"],"delete":["24","@Ignore","51","        super(\"udp\", PORT);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/DefaultErrorHandler.java":[{"add":["71","        if (!appender.isExceptionSuppressed() && t != null && !(t instanceof AppenderRuntimeException)) {","89","        if (!appender.isExceptionSuppressed() && t != null && !(t instanceof AppenderRuntimeException)) {"],"delete":["71","        if (!appender.isExceptionSuppressed() && t != null) {","89","        if (!appender.isExceptionSuppressed() && t != null) {"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/DatagramOutputStream.java":[{"add":["50","    private final byte[] header;","51","    private final byte[] footer;","52","","58","    public DatagramOutputStream(final String host, final int port, final byte[] header, final byte[] footer) {","60","        this.header = header;","61","        this.footer = footer;","96","        try {","97","            if (this.data != null && this.ds != null && this.address != null) {","98","                if (footer != null) {","99","                    copy(footer, 0, footer.length);","100","                }","101","                final DatagramPacket packet = new DatagramPacket(data, data.length, address, port);","102","                ds.send(packet);","103","            }","104","        } finally {","105","            data = null;","106","            if (header != null) {","107","                copy(header, 0, header.length);","108","            }","127","            System.arraycopy(data, 0, copy, 0, data.length);"],"delete":["55","    public DatagramOutputStream(final String host, final int port) {","91","        if (this.data != null && this.ds != null && this.address != null) {","92","            final DatagramPacket packet = new DatagramPacket(data, data.length, address, port);","93","            ds.send(packet);","95","        data = null;","113","            System.arraycopy(data, 0, copy, 0, index);"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/net\/UDPSocketServer.java":[{"add":[],"delete":[]}],"src\/changes\/changes.xml":[{"add":["24","      <action issue=\"LOG4J2-246\" dev=\"rgoers\" type=\"fix\">","25","        Data buffer is reset in finally clause.","26","      <\/action>","27","      <action issue=\"LOG4J2-228\" dev=\"rgoers\" type=\"fix\">","28","        UDP now sends one event per packet.","29","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SocketAppender.java":[{"add":["100","        boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);","118","        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);","119","        if (p.equals(Protocol.UDP)) {","120","            isFlush = true;","121","        }","123","        final AbstractSocketManager manager = createSocketManager(p, host, port, reconnectDelay, fail, layout);","132","    protected static AbstractSocketManager createSocketManager(final Protocol p, final String host, final int port,"],"delete":["100","        final boolean isFlush = immediateFlush == null ? true : Boolean.valueOf(immediateFlush);","119","        final AbstractSocketManager manager = createSocketManager(prot, host, port, reconnectDelay, fail, layout);","128","    protected static AbstractSocketManager createSocketManager(final String protocol, final String host, final int port,","131","        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/AbstractSocketServerTest.java":[{"add":["25","import org.apache.logging.log4j.core.appender.AppenderRuntimeException;","34","import java.io.IOException;","67","    private final boolean expectLengthException;","71","    protected AbstractSocketServerTest(final String protocol, final String port, final boolean expectLengthException) {","74","        this.expectLengthException = expectLengthException;","93","        if (expectLengthException) {","94","            try {","95","                testServer(m1, m2);","96","","97","            } catch (AppenderRuntimeException are) {","98","                assertTrue(\"\", are.getCause() != null && are.getCause() instanceof IOException);","99","                \/\/ Failure expected.","100","            }","101","        } else {","102","            testServer(m1, m2);","103","        }","110","                \"false\", null, socketFilter, null, null);","116","        final Logger serverLogger = ctx.getLogger(this.getClass().getName());"],"delete":["68","    protected AbstractSocketServerTest(final String protocol, final String port) {","89","        testServer(m1, m2);","96","                null, null, socketFilter, null, null);","102","        final Logger serverLogger = ctx.getLogger(SocketServer.class.getName());"]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/SyslogAppender.java":[{"add":["31","import org.apache.logging.log4j.util.EnglishEnums;","133","        final Protocol p = EnglishEnums.valueOf(Protocol.class, protocol);","134","        final AbstractSocketManager manager = createSocketManager(p, host, port, reconnectDelay, fail, layout);"],"delete":["132","        final AbstractSocketManager manager = createSocketManager(prot, host, port, reconnectDelay, fail, layout);"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/net\/TCPSocketServerTest.java":[{"add":["49","        super(\"tcp\", PORT, false);"],"delete":["49","        super(\"tcp\", PORT);"]}]}},"424068f7e73e35ba2ad10e5087736bbf2dec6333":{"changes":{"log4j-jul\/src\/test\/java\/org\/apache\/logging\/log4j\/jul\/BracketInNotInterpolatedMessageTest.java":"ADD","src\/changes\/changes.xml":"MODIFY","log4j-jul\/src\/main\/java\/org\/apache\/logging\/log4j\/jul\/ApiLogger.java":"MODIFY"},"diff":{"log4j-jul\/src\/test\/java\/org\/apache\/logging\/log4j\/jul\/BracketInNotInterpolatedMessageTest.java":[{"add":[],"delete":[]}],"src\/changes\/changes.xml":[{"add":["78","      <action issue=\"LOG4J2-1251\" dev=\"mattsicker\" type=\"fix\" due-to=\"Romain Manni-Bucau\">","79","        Fix JUL bridge issue where LogRecord.getParameters() is used when null.","80","      <\/action>"],"delete":[]}],"log4j-jul\/src\/main\/java\/org\/apache\/logging\/log4j\/jul\/ApiLogger.java":[{"add":["25","import org.apache.logging.log4j.message.MessageFactory;","39"," *","59","        final Object[] parameters = record.getParameters();","60","        final MessageFactory messageFactory = logger.getMessageFactory();","61","        final Message message = parameters == null ?","62","            messageFactory.newMessage(record.getMessage()) \/* LOG4J2-1251: not formatted case *\/ :","63","            messageFactory.newMessage(record.getMessage(), parameters);","101","     *"],"delete":["38"," * ","58","        final Message message = logger.getMessageFactory().newMessage(record.getMessage(), record.getParameters());"]}]}},"4011f8a4e9bc343869c375600b13583382a200e4":{"changes":{"src\/changes\/changes.xml":"MODIFY","core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["28","      <action issue=\"LOG4J2-273\" dev=\"ggregory\" type=\"update\">","29","        Wasted work in XMLLayout.toSerializable().","30","      <\/action>"],"delete":[]}],"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/XMLLayout.java":[{"add":["127","                        break;"],"delete":[]}]}},"593349407bb063042fe256ddebbd5b78358b2c36":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2791\" dev=\"rgoers\" type=\"fix\" due-to=\"Johan Karlberg\">","33","        Correct JsonLayout timestamp sorting issue.","34","      <\/action>"],"delete":[]}]}},"61ccbb95fecaf12214882fd9c50ac4e90fbcacee":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jmx\/Server.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/jmx\/ServerTest.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/jmx\/Server.java":[{"add":["90","                \/\/ drop \\r characters: \\\\r gives \"invalid escape sequence\"","93","                \/\/ replace \\n characters with \\\\n sequence","95","                needsQuotes = true;","262","        final String safeContextName = escape(contextName);","263","        final String search = String.format(pattern, safeContextName, \"*\");","265","        unregisterLoggerConfigs(safeContextName, mbs);","266","        unregisterAppenders(safeContextName, mbs);","267","        unregisterAsyncAppenders(safeContextName, mbs);","268","        unregisterAsyncLoggerRingBufferAdmins(safeContextName, mbs);","269","        unregisterAsyncLoggerConfigRingBufferAdmins(safeContextName, mbs);"],"delete":["90","                \/\/ replace by \\\\r, no need to quote","91","                sb.append(\"\\\\r\");","94","                \/\/ replace by \\\\n, no need to quote","262","        final String search = String.format(pattern, contextName, \"*\");","264","        unregisterLoggerConfigs(contextName, mbs);","265","        unregisterAppenders(contextName, mbs);","266","        unregisterAsyncAppenders(contextName, mbs);","267","        unregisterAsyncLoggerRingBufferAdmins(contextName, mbs);","268","        unregisterAsyncLoggerConfigRingBufferAdmins(contextName, mbs);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/jmx\/ServerTest.java":[{"add":["106","        assertEquals(\"ac\", ctxName);","115","        assertEquals(\"\\\"a\\\\nc\\\"\", ctxName);"],"delete":["106","        assertEquals(\"a\\\\rc\", ctxName);","115","        assertEquals(\"a\\\\nc\", ctxName);"]}]}},"ed951c76b1c63199176ec82aef001dbf7b9df8e6":{"changes":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfigurationTest.java":"ADD","src\/site\/xdoc\/manual\/configuration.xml.vm":"MODIFY","src\/changes\/changes.xml":"MODIFY","src\/site\/site.xml":"MODIFY","core\/src\/test\/resources\/missingRootLogger.xml":"ADD"},"diff":{"core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfiguration.java":[{"add":["208","            LOGGER.warn(\"No Root logger was configured, creating default ERROR-level Root logger with Console appender\");","210","            \/\/ return; \/\/ LOG4J2-219: creating default root=ok, but don't exclude configured Loggers"],"delete":["208","            LOGGER.warn(\"No Root logger was configured, using default\");","210","            return;"]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/BaseConfigurationTest.java":[{"add":[],"delete":[]}],"src\/site\/xdoc\/manual\/configuration.xml.vm":[{"add":["133","            If no configuration files are present log4j will default to the DefaultConfiguration which","153","<configuration status=\"WARN\">","202","<configuration status=\"WARN\">","234","<configuration status=\"WARN\">","313","        <a name=\"XML\"\/>","495","        <a name=\"JSON\"\/>","608","        <a name=\"Loggers\"\/>","637","            <b><em>Every configuration must have a root logger<\/em><\/b>. If one is not configured the default root LoggerConfig,","638","            which has a level of ERROR and has a Console appender attached, will be used. The main differences","645","        <a name=\"Appenders\"\/>","659","        <a name=\"Filters\"\/>"],"delete":["133","            If no configuration files are present logback will default to the DefaultConfiguration which","153","<configuration status=\"OFF\">","202","<configuration status=\"OFF\">","234","<configuration status=\"OFF\">","634","            Every configuration must have a root logger. If one is not configured the default root LoggerConfig,","635","            which has a level of ERROR but with no appenders attached, will be used. The main differences"]}],"src\/changes\/changes.xml":[{"add":["25","      <action issue=\"LOG4J2-219\" dev=\"rpopma\" type=\"fix\" due-to=\"Peter DePasquale\">","26","        Fix: install default root logger if not configured (this is unchanged), ","27","        but make sure to include configured named loggers. Clarified documentation.","28","      <\/action>"],"delete":[]}],"src\/site\/site.xml":[{"add":["43","        <item name=\"Advertising Appender Config\" href=\"\/manual\/configuration.html#AdvertisingAppenderConfigurations\"\/>","44","        <item name=\"Configuration Syntax\" href=\"\/manual\/configuration.html#ConfigurationSyntax\" \/>","45","        <item name=\"XML Syntax\" href=\"\/manual\/configuration.html#XML\"\/>","46","        <item name=\"JSON Syntax\" href=\"\/manual\/configuration.html#JSON\"\/>","47","        <item name=\"Configuring Loggers\" href=\"\/manual\/configuration.html#Loggers\"\/>","48","        <item name=\"Configuring Appenders\" href=\"\/manual\/configuration.html#Appenders\"\/>","49","        <item name=\"Configuring Filters\" href=\"\/manual\/configuration.html#Filters\"\/>"],"delete":["43","        <item name=\"Configuration Syntax\" href=\"\/manual\/configuration.html#ConfigurationSyntax\"\/>"]}],"core\/src\/test\/resources\/missingRootLogger.xml":[{"add":[],"delete":[]}]}},"83deb4fde5364a8b35302101c5df959d37cbe618":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1221\" dev=\"rpopma\" type=\"update\" due-to=\"Michael Barker\">","30","      <action issue=\"LOG4J2-1080\" dev=\"rpopma\" type=\"update\">"],"delete":["26","      <action issue=\"LOG4J2-1221\" dev=\"rpopma\" type=\"add\" due-to=\"Michael Barker\">","30","      <action issue=\"LOG4J2-1080\" dev=\"rpopma\" type=\"add\">"]}]}},"1060f10953cf54a8d15ce127eb02d72d3673ff88":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["32","      <action issue=\"LOG4J2-2556\" dev=\"rgoers\" type=\"update\">","33","        Make Log4j Core optional for Log4j 1.2 API.","34","      <\/action>"],"delete":[]}]}},"7158716756dd0bdd4598827180bdb621a79d50e2":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["23","      <action issue=\"LOG4J2-278\" dev=\"rgoers\" type=\"fix\">","24","        Filter calls from Avro or Flume to be ignored by the FlumeAppender.","25","      <\/action>","26","      <action issue=\"LOG4J2-279\" dev=\"rgoers\" type=\"fix\">","27","        FlumePersistentManager now calls Berkeley DB from threads to avoid encountering interrupts in the application.","28","      <\/action>"],"delete":[]}]}},"897733640bda49ce065217057c010f4a9204faa0":{"changes":{"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderTimeAndSizeTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderTimeTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderSizeTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderUncompressedTest.java":"MODIFY","core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/AdvertiserTest.java":"MODIFY"},"diff":{"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderTimeAndSizeTest.java":[{"add":["74","                break;"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderTimeTest.java":[{"add":["74","                break;"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderSizeTest.java":[{"add":["71","                break;"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/perftest\/PerfTest.java":[{"add":["73","\t\t\tif (verbose && throughput) { ","74","\t\t\t   break;","75","\t\t\t}"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["25","      <action issue=\"LOG4J2-277\" dev=\"gregory\" type=\"update\">","26","        Wasted work in RollingAppenderSizeTest.testAppender() and others.","27","      <\/action>"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/appender\/rolling\/RollingAppenderUncompressedTest.java":[{"add":["72","                break;"],"delete":[]}],"core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/AdvertiserTest.java":[{"add":["71","            if (foundFile1 && foundFile2 && foundSocket1 && foundSocket2) {","72","               break;","73","            }"],"delete":[]}]}},"8b569ca42da7a39187bc3a7c070408f8b26a36f3":{"changes":{"log4j-1.2-api\/pom.xml":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-flume-ng\/pom.xml":"MODIFY","log4j-jmx-gui\/pom.xml":"MODIFY","log4j-web\/pom.xml":"MODIFY","log4j-jul\/pom.xml":"MODIFY","log4j-nosql\/pom.xml":"MODIFY"},"diff":{"log4j-1.2-api\/pom.xml":[{"add":["110","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}],"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1467\" dev=\"rpopma, ggregory\" type=\"fix\" due-to=\"Ralf, Gary Gregory\">","27","        [OSGi] Missing import package.","28","      <\/action>","29","      <action issue=\"LOG4J2-351\" dev=\"rpopma, ggregory\" type=\"fix\" due-to=\"Roland Weiglhofer\">","30","        [OSGi] wrong Fragment-Host in manifest files.","31","      <\/action>"],"delete":[]}],"log4j-flume-ng\/pom.xml":[{"add":["150","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}],"log4j-jmx-gui\/pom.xml":[{"add":["80","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}],"log4j-web\/pom.xml":[{"add":["85","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}],"log4j-jul\/pom.xml":[{"add":["85","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}],"log4j-nosql\/pom.xml":[{"add":["73","            <Fragment-Host>org.apache.logging.log4j.core<\/Fragment-Host>"],"delete":[]}]}},"59c88823737a824d3aae0f39ad2d5db570250160":{"changes":{"log4j-core\/src\/test\/resources\/logger-config\/AsyncLoggerConfig\/inherit-level.xml":"ADD","log4j-core\/src\/test\/resources\/logger-config\/LoggerConfig\/default-level.xml":"ADD","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/NestedLoggerConfigTest.java":"ADD","log4j-core\/src\/test\/resources\/logger-config\/AsyncLoggerConfig\/default-level.xml":"ADD","log4j-core\/src\/test\/resources\/logger-config\/LoggerConfig\/inherit-level.xml":"ADD","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/resources\/logger-config\/AsyncLoggerConfig\/inherit-level.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/resources\/logger-config\/LoggerConfig\/default-level.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/config\/NestedLoggerConfigTest.java":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/resources\/logger-config\/AsyncLoggerConfig\/default-level.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/test\/resources\/logger-config\/LoggerConfig\/inherit-level.xml":[{"add":[],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":[{"add":["37","import org.apache.logging.log4j.core.config.plugins.validation.constraints.Required;","172","     * @deprecated use {@link #createLogger(boolean, Level, String, String, AppenderRef[], Property[], Configuration, Filter)}","174","    @Deprecated","176","            final String additivity,","177","            final String levelName,","178","            final String loggerName,","179","            final String includeLocation,","180","            final AppenderRef[] refs,","181","            final Property[] properties,","182","            final Configuration config,","183","            final Filter filter) {","206","    \/**","207","     * Factory method to create a LoggerConfig.","208","     *","209","     * @param additivity True if additive, false otherwise.","210","     * @param level The Level to be associated with the Logger.","211","     * @param loggerName The name of the Logger.","212","     * @param includeLocation \"true\" if location should be passed downstream","213","     * @param refs An array of Appender names.","214","     * @param properties Properties to pass to the Logger.","215","     * @param config The Configuration.","216","     * @param filter A Filter.","217","     * @return A new LoggerConfig.","218","     * @since 3.0","219","     *\/","220","    @PluginFactory","221","    public static LoggerConfig createLogger(","222","            @PluginAttribute(value = \"additivity\", defaultBoolean = true) final boolean additivity,","223","            @PluginAttribute(\"level\") final Level level,","224","            @Required(message = \"Loggers cannot be configured without a name\") @PluginAttribute(\"name\") final String loggerName,","225","            @PluginAttribute(\"includeLocation\") final String includeLocation,","226","            @PluginElement(\"AppenderRef\") final AppenderRef[] refs,","227","            @PluginElement(\"Properties\") final Property[] properties,","228","            @PluginConfiguration final Configuration config,","229","            @PluginElement(\"Filter\") final Filter filter) {","230","        final String name = loggerName.equals(ROOT) ? Strings.EMPTY : loggerName;","231","        return new AsyncLoggerConfig(name, Arrays.asList(refs), filter, level, additivity, properties, config,","232","                includeLocation(includeLocation));","233","    }","234","","246","        \/**","247","         * @deprecated use {@link #createLogger(String, Level, String, AppenderRef[], Property[], Configuration, Filter)}","248","         *\/","249","        @Deprecated","250","        public static LoggerConfig createLogger(","251","                final String additivity,","252","                final String levelName,","253","                final String includeLocation,","254","                final AppenderRef[] refs,","255","                final Property[] properties,","256","                final Configuration config,","257","                final Filter filter) {","258","            final List<AppenderRef> appenderRefs = Arrays.asList(refs);","259","            Level level = null;","260","            try {","261","                level = Level.toLevel(levelName, Level.ERROR);","262","            } catch (final Exception ex) {","263","                LOGGER.error(\"Invalid Log level specified: {}. Defaulting to Error\", levelName);","264","                level = Level.ERROR;","265","            }","266","            final boolean additive = Booleans.parseBoolean(additivity, true);","267","            return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME,","268","                    appenderRefs, filter, level, additive, properties, config,","269","                    AsyncLoggerConfig.includeLocation(includeLocation));","270","        }","271","","272","        \/**","273","         * @since 3.0","274","         *\/","278","                @PluginAttribute(\"level\") final Level level,","285","            final Level actualLevel = level == null ? Level.ERROR : level;","287","            return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME, appenderRefs, filter, actualLevel, additive,","288","                    properties, config, AsyncLoggerConfig.includeLocation(includeLocation));"],"delete":["37","import org.apache.logging.log4j.core.impl.Log4jLogEvent;","40","import org.apache.logging.log4j.message.Message;","174","    @PluginFactory","176","            @PluginAttribute(\"additivity\") final String additivity,","177","            @PluginAttribute(\"level\") final String levelName,","178","            @PluginAttribute(\"name\") final String loggerName,","179","            @PluginAttribute(\"includeLocation\") final String includeLocation,","180","            @PluginElement(\"AppenderRef\") final AppenderRef[] refs,","181","            @PluginElement(\"Properties\") final Property[] properties,","182","            @PluginConfiguration final Configuration config,","183","            @PluginElement(\"Filter\") final Filter filter) {","220","                @PluginAttribute(\"level\") final String levelName,","227","            Level level;","228","            try {","229","                level = Level.toLevel(levelName, Level.ERROR);","230","            } catch (final Exception ex) {","231","                LOGGER.error(","232","                        \"Invalid Log level specified: {}. Defaulting to Error\",","233","                        levelName);","234","                level = Level.ERROR;","235","            }","237","","238","            return new AsyncLoggerConfig(LogManager.ROOT_LOGGER_NAME,","239","                    appenderRefs, filter, level, additive, properties, config,","240","                    AsyncLoggerConfig.includeLocation(includeLocation));"]}]}},"ba3070e714172fe587e0bd5e9f8e0b72890a719a":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1049\" dev=\"rpopma\" type=\"fix\" due-to=\"Robert Schaft\">","27","        AsyncAppender now resets the thread interrupted flag after catching InterruptedException.","28","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":[{"add":["152","                final Serializable serialized = Log4jLogEvent.serialize(coreEvent, includeLocation);","155","                    queue.put(serialized);","158","                    \/\/ LOG4J2-1049: Some applications use Thread.interrupt() to send","159","                    \/\/ messages between application threads. This does not necessarily","160","                    \/\/ mean that the queue is full. To prevent dropping a log message,","161","                    \/\/ quickly try to offer the event to the queue again.","162","                    \/\/ (Yes, this means there is a possibility the same event is logged twice.)","163","                    \/\/","164","                    \/\/ Finally, catching the InterruptedException means the","165","                    \/\/ interrupted flag has been cleared on the current thread.","166","                    \/\/ This may interfere with the application's expectation of","167","                    \/\/ being interrupted, so when we are done, we set the interrupted","168","                    \/\/ flag again.","169","                    appendSuccessful = queue.offer(serialized);","170","                    if (!appendSuccessful) {","171","                        LOGGER.warn(\"Interrupted while waiting for a free slot in the AsyncAppender LogEvent-queue {}\",","172","                        getName());","173","                    }","174","                    \/\/ set the interrupted flag again.","175","                    Thread.currentThread().interrupt();"],"delete":["154","                    queue.put(Log4jLogEvent.serialize(coreEvent, includeLocation));","157","                    LOGGER.warn(\"Interrupted while waiting for a free slot in the AsyncAppender LogEvent-queue {}\",","158","                            getName());"]}]}},"19832cf09962a73d1f3541c42719f9d9da1f41e8":{"changes":{"log4j-web\/src\/main\/java\/org\/apache\/logging\/log4j\/web\/Log4jServletContextListener.java":"MODIFY"},"diff":{"log4j-web\/src\/main\/java\/org\/apache\/logging\/log4j\/web\/Log4jServletContextListener.java":[{"add":["18","import java.util.Locale;","19","import java.util.concurrent.TimeUnit;","20","","26","import org.apache.logging.log4j.core.LifeCycle2;","28","import org.apache.logging.log4j.util.Strings;","37","\tprivate static final int DEFAULT_STOP_TIMEOUT = 30;","38","    private static final TimeUnit DEFAULT_STOP_TIMEOUT_TIMEUNIT = TimeUnit.SECONDS;","39","","40","\tprivate static final String KEY_STOP_TIMEOUT = \"log4j.stop.timeout\";","41","\tprivate static final String KEY_STOP_TIMEOUT_TIMEUNIT = \"log4j.stop.timeout.timeunit\";","42","","43","\tprivate static final Logger LOGGER = StatusLogger.getLogger();","63","\tpublic void contextDestroyed(final ServletContextEvent event) {","64","\t\tif (this.servletContext == null || this.initializer == null) {","65","\t\t\tLOGGER.warn(\"Context destroyed before it was initialized.\");","66","\t\t\treturn;","67","\t\t}","68","\t\tLOGGER.debug(\"Log4jServletContextListener ensuring that Log4j shuts down properly.\");","70","\t\tthis.initializer.clearLoggerContext(); \/\/ the application is finished","71","\t\t\/\/ shutting down now","72","\t\tif (initializer instanceof LifeCycle2) {","73","\t\t\tfinal String stopTimeoutStr = servletContext.getInitParameter(KEY_STOP_TIMEOUT);","74","\t\t\tfinal long stopTimeout = Strings.isEmpty(stopTimeoutStr) ? DEFAULT_STOP_TIMEOUT","75","\t\t\t\t\t: Long.parseLong(stopTimeoutStr);","76","\t\t\tfinal String timeoutTimeUnitStr = servletContext.getInitParameter(KEY_STOP_TIMEOUT_TIMEUNIT);","77","\t\t\tfinal TimeUnit timeoutTimeUnit = Strings.isEmpty(timeoutTimeUnitStr) ? DEFAULT_STOP_TIMEOUT_TIMEUNIT","78","\t\t\t\t\t: TimeUnit.valueOf(timeoutTimeUnitStr.toUpperCase(Locale.ROOT));","79","\t\t\t((LifeCycle2) this.initializer).stop(stopTimeout, timeoutTimeUnit);","80","\t\t} else {","81","\t\t\tthis.initializer.stop();","82","\t\t}","83","\t}"],"delete":["32","    private static final Logger LOGGER = StatusLogger.getLogger();","52","    public void contextDestroyed(final ServletContextEvent event) {","53","        if (this.servletContext == null || this.initializer == null) {","54","            LOGGER.warn(\"Context destroyed before it was initialized.\");","55","            return;","56","        }","57","        LOGGER.debug(\"Log4jServletContextListener ensuring that Log4j shuts down properly.\");","59","        this.initializer.clearLoggerContext(); \/\/ the application is finished shutting down now","60","        this.initializer.stop();","61","    }"]}]}},"b7ac37fa7a2090b978020fb15b19328bf5597039":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayoutTest.java":"MODIFY","src\/changes\/changes.xml":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractJacksonLayout.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/layout\/JsonLayoutTest.java":[{"add":["18","import static org.hamcrest.CoreMatchers.containsString;","19","import static org.hamcrest.MatcherAssert.assertThat;","37","import org.apache.logging.log4j.core.async.RingBufferLogEvent;","41","import org.apache.logging.log4j.core.impl.MutableLogEvent;","44","import org.apache.logging.log4j.core.util.DummyNanoClock;","46","import org.apache.logging.log4j.core.util.SystemClock;","47","import org.apache.logging.log4j.message.Message;","49","import org.apache.logging.log4j.message.ReusableMessageFactory;","53","import org.apache.logging.log4j.util.SortedArrayStringMap;","379","    \/\/ Test for LOG4J2-2345","380","    @Test","381","    public void testReusableLayoutMessageWithCurlyBraces() throws Exception {","382","        final boolean propertiesAsList = false;","383","        final AbstractJacksonLayout layout = JsonLayout.newBuilder()","384","                .setLocationInfo(false)","385","                .setProperties(false)","386","                .setPropertiesAsList(propertiesAsList)","387","                .setComplete(false)","388","                .setCompact(true)","389","                .setEventEol(false)","390","                .setCharset(StandardCharsets.UTF_8)","391","                .setIncludeStacktrace(true)","392","                .build();","393","        Message message = ReusableMessageFactory.INSTANCE.newMessage(\"Testing {}\", new TestObj());","394","        try {","395","            final Log4jLogEvent expected = Log4jLogEvent.newBuilder()","396","                    .setLoggerName(\"a.B\")","397","                    .setLoggerFqcn(\"f.q.c.n\")","398","                    .setLevel(Level.DEBUG)","399","                    .setMessage(message)","400","                    .setThreadName(\"threadName\")","401","                    .setTimeMillis(1).build();","402","            MutableLogEvent mutableLogEvent = new MutableLogEvent();","403","            mutableLogEvent.initFrom(expected);","404","            final String str = layout.toSerializable(mutableLogEvent);","405","            final String expectedMessage = \"Testing \" + TestObj.TO_STRING_VALUE;","406","            assertTrue(str, str.contains(\"\\\"message\\\":\\\"\" + expectedMessage + '\"'));","407","            final Log4jLogEvent actual = new Log4jJsonObjectMapper(propertiesAsList, true, false, false).readValue(str, Log4jLogEvent.class);","408","            assertEquals(expectedMessage, actual.getMessage().getFormattedMessage());","409","        } finally {","410","            ReusableMessageFactory.release(message);","411","        }","412","    }","413","","414","    \/\/ Test for LOG4J2-2312 LOG4J2-2341","415","    @Test","416","    public void testLayoutRingBufferEventReusableMessageWithCurlyBraces() throws Exception {","417","        final boolean propertiesAsList = false;","418","        final AbstractJacksonLayout layout = JsonLayout.newBuilder()","419","                .setLocationInfo(false)","420","                .setProperties(false)","421","                .setPropertiesAsList(propertiesAsList)","422","                .setComplete(false)","423","                .setCompact(true)","424","                .setEventEol(false)","425","                .setCharset(StandardCharsets.UTF_8)","426","                .setIncludeStacktrace(true)","427","                .build();","428","        Message message = ReusableMessageFactory.INSTANCE.newMessage(\"Testing {}\", new TestObj());","429","        try {","430","            RingBufferLogEvent ringBufferEvent = new RingBufferLogEvent();","431","            ringBufferEvent.setValues(","432","                    null, \"a.B\", null, \"f.q.c.n\", Level.DEBUG, message,","433","                    null, new SortedArrayStringMap(), ThreadContext.EMPTY_STACK, 1L,","434","                    \"threadName\", 1, null, new SystemClock(), new DummyNanoClock());","435","            final String str = layout.toSerializable(ringBufferEvent);","436","            final String expectedMessage = \"Testing \" + TestObj.TO_STRING_VALUE;","437","            assertThat(str, containsString(\"\\\"message\\\":\\\"\" + expectedMessage + '\"'));","438","            final Log4jLogEvent actual = new Log4jJsonObjectMapper(propertiesAsList, true, false, false).readValue(str, Log4jLogEvent.class);","439","            assertEquals(expectedMessage, actual.getMessage().getFormattedMessage());","440","        } finally {","441","            ReusableMessageFactory.release(message);","442","        }","443","    }","444","","445","    static class TestObj {","446","        static final String TO_STRING_VALUE = \"This is my toString {} with curly braces\";","447","        @Override","448","        public String toString() {","449","            return TO_STRING_VALUE;","450","        }","451","    }","452",""],"delete":[]}],"src\/changes\/changes.xml":[{"add":["138","      <action issue=\"LOG4J2-2312\" dev=\"ckozak\" type=\"fix\">","139","        Jackson layouts used with AsyncLoggerContextSelector output the expected format rather than only a json string of the message text.","140","      <\/action>"],"delete":[]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/layout\/AbstractJacksonLayout.java":[{"add":["28","import org.apache.logging.log4j.core.impl.Log4jLogEvent;","267","        return event instanceof Log4jLogEvent ? event : Log4jLogEvent.createMemento(event);"],"delete":["28","import org.apache.logging.log4j.core.impl.MutableLogEvent;","267","        return event instanceof MutableLogEvent","268","                ? ((MutableLogEvent) event).createMemento()","269","                : event;"]}]}},"c6273ef9e88c7147b91dbbd7a4819559eec5a8bf":{"changes":{"src\/changes\/changes.xml":"MODIFY","log4j-jul\/src\/main\/java\/org\/apache\/logging\/log4j\/jul\/WrappedLogger.java":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["26","      <action issue=\"LOG4J2-1003\" dev=\"ggregory\" type=\"fix\" due-to=\"Dan Armbrust\">","27","        JUL Logger.throwing is mis-mapped to ERROR when it should be TRACE.","28","      <\/action>"],"delete":[]}],"log4j-jul\/src\/main\/java\/org\/apache\/logging\/log4j\/jul\/WrappedLogger.java":[{"add":["74","        return throwing(FQCN, LevelTranslator.toLevel(java.util.logging.Level.FINER), t);"],"delete":["74","        return throwing(FQCN, Level.ERROR, t);"]}]}},"3951869bd57a1051c673b2cc81a76c52a008fbec":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/filter\/DynamicThresholdFilter.java":"MODIFY","src\/changes\/changes.xml":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/filter\/DynamicThresholdFilter.java":[{"add":["117","    private Result filter(final Level level, Map<String, String> contextMap) {","118","        final Object value = contextMap.get(key);","132","        return filter(event.getLevel(), event.getContextMap());","138","        return filter(level, ThreadContext.getContext());","144","        return filter(level, ThreadContext.getContext());","150","        return filter(level, ThreadContext.getContext());"],"delete":["117","    private Result filter(final Level level) {","118","        final Object value = ThreadContext.get(key);","132","        return filter(event.getLevel());","138","        return filter(level);","144","        return filter(level);","150","        return filter(level);"]}],"src\/changes\/changes.xml":[{"add":["46","      <action issue=\"LOG4J2-1258\" dev=\"ggregory\" type=\"fix\" due-to=\"Francis Lalonde\">","47","        Async DynamicThresholdFilter does not use the log event's context map.","48","      <\/action>"],"delete":[]}]}},"3e6503fbdb162e3a3d6e30660363ebed1b5710a9":{"changes":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/AbstractLogger.java":"MODIFY","log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/AbstractLoggerTest.java":"MODIFY"},"diff":{"log4j-api\/src\/main\/java\/org\/apache\/logging\/log4j\/spi\/AbstractLogger.java":[{"add":["2183","        final int formatLength = format == null ? 4 : format.length();","2184","        final StringBuilder sb = new StringBuilder(formatLength + 100);"],"delete":["2183","        final StringBuilder sb = new StringBuilder(format.length() + 100);"]}],"log4j-api\/src\/test\/java\/org\/apache\/logging\/log4j\/AbstractLoggerTest.java":[{"add":["18","import static org.hamcrest.CoreMatchers.containsString;","22","import static org.junit.Assert.assertThat;","26","import org.apache.logging.log4j.junit.StatusLoggerRule;","34","import org.apache.logging.log4j.status.StatusData;","35","import org.apache.logging.log4j.status.StatusLogger;","38","import org.junit.Rule;","41","import java.util.List;","42","","69","    @Rule","70","    public StatusLoggerRule status = new StatusLoggerRule(Level.WARN);","71","","915","    @Test","916","    public void testMessageThrows() {","917","        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);","918","        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {","919","            @Override","920","            public String getFormattedMessage() {","921","                throw new IllegalStateException(\"Oops!\");","922","            }","923","        }, \"Message Format\"));","924","        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();","925","        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);","926","        assertEquals(Level.WARN, mostRecent.getLevel());","927","        assertThat(mostRecent.getFormattedStatus(), containsString(","928","                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +","929","                        \"java.lang.IllegalStateException logging TestMessage: Message Format\"));","930","    }","931","","932","    @Test","933","    public void testMessageThrowsAndNullFormat() {","934","        final ThrowableExpectingLogger logger = new ThrowableExpectingLogger(false);","935","        logger.error(new TestMessage(new TestMessage.FormattedMessageSupplier() {","936","            @Override","937","            public String getFormattedMessage() {","938","                throw new IllegalStateException(\"Oops!\");","939","            }","940","        }, null \/* format *\/));","941","        List<StatusData> statusDatalist = StatusLogger.getLogger().getStatusData();","942","        StatusData mostRecent = statusDatalist.get(statusDatalist.size() - 1);","943","        assertEquals(Level.WARN, mostRecent.getLevel());","944","        assertThat(mostRecent.getFormattedStatus(), containsString(","945","                \"org.apache.logging.log4j.spi.AbstractLogger caught \" +","946","                        \"java.lang.IllegalStateException logging TestMessage: \"));","947","    }","948","","949","    private static final class TestMessage implements Message {","950","        private final FormattedMessageSupplier formattedMessageSupplier;","951","        private final String format;","952","        TestMessage(FormattedMessageSupplier formattedMessageSupplier, String format) {","953","            this.formattedMessageSupplier = formattedMessageSupplier;","954","            this.format = format;","955","        }","956","","957","        @Override","958","        public String getFormattedMessage() {","959","            return formattedMessageSupplier.getFormattedMessage();","960","        }","961","","962","        @Override","963","        public String getFormat() {","964","            return format;","965","        }","966","","967","        @Override","968","        public Object[] getParameters() {","969","            return new Object[0];","970","        }","971","","972","        @Override","973","        public Throwable getThrowable() {","974","            return null;","975","        }","976","","977","        interface FormattedMessageSupplier {","978","            String getFormattedMessage();","979","        }","980","    }","981","","1309","            if (message != null) {","1310","                message.getFormattedMessage();","1311","            }"],"delete":[]}]}},"e228704684b94bbb3d785f4e55753b091eed9548":{"changes":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/QueueFullAsyncLoggerLoggingFromToStringTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLogger.java":"MODIFY","log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/QueueFullAsyncLoggerConfigLoggingFromToStringTest.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":"MODIFY","log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncQueueFullMessageUtil.java":"MODIFY"},"diff":{"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/QueueFullAsyncLoggerLoggingFromToStringTest.java":[{"add":["98","                \"Logging in toString() #127\", actual.pop());","99","        assertEquals(\"Logging in toString() #128\", actual.pop());"],"delete":["98","                \"Logging in toString() #127 (Log4j2 logged this message out of order to prevent deadlock caused by domain objects logging from their toString method when the async queue is full - LOG4J2-2031)\", actual.pop());","99","        assertEquals(\"Logging in toString() #128 (Log4j2 logged this message out of order to prevent deadlock caused by domain objects logging from their toString method when the async queue is full - LOG4J2-2031)\", actual.pop());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLogger.java":[{"add":["172","            AsyncQueueFullMessageUtil.logWarningToStatusLogger();","173","            logMessageInCurrentThread(translator.fqcn, translator.level, translator.marker, translator.message,","323","            AsyncQueueFullMessageUtil.logWarningToStatusLogger();","324","            logMessageInCurrentThread(fqcn, level, marker, msg, thrown);"],"delete":["172","            final Message message = AsyncQueueFullMessageUtil.transform(translator.message);","173","            logMessageInCurrentThread(translator.fqcn, translator.level, translator.marker, message,","323","            final Message message = AsyncQueueFullMessageUtil.transform(msg);","324","            logMessageInCurrentThread(fqcn, level, marker, message, thrown);"]}],"log4j-core\/src\/test\/java\/org\/apache\/logging\/log4j\/core\/async\/QueueFullAsyncLoggerConfigLoggingFromToStringTest.java":[{"add":["18","import java.util.List;","22","import org.apache.logging.log4j.Level;","28","import org.apache.logging.log4j.status.StatusData;","29","import org.apache.logging.log4j.status.StatusLogger;","38","import static org.hamcrest.core.StringContains.containsString;","96","        List<StatusData> statusDataList = StatusLogger.getLogger().getStatusData();","98","                \"Logging in toString() #128\", actual.pop());","99","        StatusData mostRecentStatusData = statusDataList.get(statusDataList.size() - 1);","100","        assertEquals(\"Expected warn level status message\", Level.WARN, mostRecentStatusData.getLevel());","101","        assertThat(mostRecentStatusData.getFormattedStatus(), containsString(","102","                \"Log4j2 logged an event out of order to prevent deadlock caused by domain \" +","103","                        \"objects logging from their toString method when the async queue is full\"));"],"delete":["92","                \"Logging in toString() #128 (Log4j2 logged this message out of order \" +","93","                        \"to prevent deadlock caused by domain objects logging from their toString \" +","94","                        \"method when the async queue is full - LOG4J2-2031)\", actual.pop());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncLoggerConfig.java":[{"add":["104","            AsyncQueueFullMessageUtil.logWarningToStatusLogger();","105","            callAppendersInCurrentThread(event);"],"delete":["104","            final Message message = AsyncQueueFullMessageUtil.transform(event.getMessage());","105","            callAppendersInCurrentThread(new Log4jLogEvent.Builder(event).setMessage(message).build());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/appender\/AsyncAppender.java":[{"add":["164","                    AsyncQueueFullMessageUtil.logWarningToStatusLogger();","165","                    logMessageInCurrentThread(logEvent);"],"delete":["52","import org.apache.logging.log4j.message.Message;","165","                    final Message message = AsyncQueueFullMessageUtil.transform(logEvent.getMessage());","166","                    logMessageInCurrentThread(new Log4jLogEvent.Builder(logEvent).setMessage(message).build());"]}],"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/async\/AsyncQueueFullMessageUtil.java":[{"add":["18","import org.apache.logging.log4j.status.StatusLogger;","23"," * Logs a warning to the {@link StatusLogger} when events are logged out of order to avoid deadlocks.","26","public final class AsyncQueueFullMessageUtil {","27","    private AsyncQueueFullMessageUtil() {","28","        \/\/ Utility Class","29","    }","30","","32","     * Logs a warning to the {@link StatusLogger} explaining why a message appears out of order in the appender.","34","    public static void logWarningToStatusLogger() {","35","        StatusLogger.getLogger()","36","                .warn(\"LOG4J2-2031: Log4j2 logged an event out of order to prevent deadlock caused by domain \" +","37","                        \"objects logging from their toString method when the async queue is full\");"],"delete":["18","import org.apache.logging.log4j.message.Message;","19","import org.apache.logging.log4j.message.SimpleMessage;","24"," * Transforms the specified user message to append an internal Log4j2 message explaining why this message appears out","25"," * of order in the appender.","28","public class AsyncQueueFullMessageUtil {","30","     * Returns a new {@code Message} based on the original message that appends an internal Log4j2 message","31","     * explaining why this message appears out of order in the appender.","32","     * <p>","33","     * Any parameter objects present in the original message are not included in the returned message.","34","     * <\/p>","35","     * @param message the message to replace","36","     * @return a new {@code Message} object","38","    public static Message transform(Message message) {","39","        SimpleMessage result = new SimpleMessage(message.getFormattedMessage() +","40","                \" (Log4j2 logged this message out of order to prevent deadlock caused by domain \" +","41","                \"objects logging from their toString method when the async queue is full - LOG4J2-2031)\");","42","        return result;"]}]}},"4320ef3ae7e77fab85e9db3509075a7362a544dc":{"changes":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/AbstractConfiguration.java":"MODIFY"},"diff":{"log4j-core\/src\/main\/java\/org\/apache\/logging\/log4j\/core\/config\/AbstractConfiguration.java":[{"add":["277","        root.getReliabilityStrategy().beforeStopConfiguration(this);","279","        final String cls = getClass().getSimpleName();","280","        LOGGER.trace(\"{} notified {} ReliabilityStrategies that config will be stopped.\", cls, loggerConfigs.size()","281","                + 1);","282","        ","283","        if (!loggerConfigs.isEmpty()) {","284","            LOGGER.trace(\"{} stopping {} LoggerConfigs.\", cls, loggerConfigs.size());","285","            for (final LoggerConfig logger : loggerConfigs.values()) {","286","                logger.stop();","287","            }","289","        LOGGER.trace(\"{} stopping root LoggerConfig.\", cls);","298","                ","301","        final List<Appender> async = getAsyncAppenders(array);","302","        if (!async.isEmpty()) {","303","            \/\/ LOG4J2-511, LOG4J2-392 stop AsyncAppenders first","304","            LOGGER.trace(\"{} stopping {} AsyncAppenders.\", cls, async.size());","305","            for (Appender appender : async) {","306","                appender.stop();","314","        root.getReliabilityStrategy().beforeStopAppenders();","315","        ","326","        LOGGER.trace(\"{} cleaning Appenders from {} LoggerConfigs.\", cls, loggerConfigs.size() + 1);","336","        root.clearAppenders();","349","    ","350","    private List<Appender> getAsyncAppenders(final Appender[] all) {","351","        final List<Appender> result = new ArrayList<Appender>();","352","        for (int i = all.length - 1; i >= 0; --i) {","353","            if (all[i] instanceof AsyncAppender) {","354","                result.add(all[i]);","355","            }","356","        }","357","        return result;","358","    }"],"delete":["277","        final String cls = getClass().getSimpleName();","278","        LOGGER.trace(\"{} notified {} ReliabilityStrategies that config will be stopped.\", cls, loggerConfigs.size());","280","        LOGGER.trace(\"{} stopping {} LoggerConfigs.\", cls, loggerConfigs.size());","281","        for (final LoggerConfig logger : loggerConfigs.values()) {","282","            logger.stop();","292","        ","293","        LOGGER.trace(\"{} stopping AsyncAppenders.\", cls);","294","","297","","298","        \/\/ LOG4J2-511, LOG4J2-392 stop AsyncAppenders first","299","        int asyncAppenderCount = 0;","300","        for (int i = array.length - 1; i >= 0; --i) {","301","            if (array[i] instanceof AsyncAppender) {","302","                array[i].stop();","303","                asyncAppenderCount++;","306","        LOGGER.trace(\"{} stopped {} AsyncAppenders.\", cls, asyncAppenderCount);","312","","323","        LOGGER.trace(\"{} cleaning Appenders from {} LoggerConfigs.\", cls, loggerConfigs.size());"]}]}},"6fc4414d9341bf2f8eebda548e1a7eea8e8dce8a":{"changes":{"log4j-spring-cloud-config\/log4j-spring-cloud-config-samples\/log4j-spring-cloud-config-sample-application\/README.md":"MODIFY"},"diff":{"log4j-spring-cloud-config\/log4j-spring-cloud-config-samples\/log4j-spring-cloud-config-sample-application\/README.md":[{"add":["0","# Log4j Spring Cloud Sample Application","22","### Starting the Application","31","### Viewing the logs"],"delete":["0","#Log4j Spring Cloud Sample Application","22","###Starting the Application","31","###Viewing the logs"]}]}},"362fe76dff4310836ee3c6d111d895fda97831c1":{"changes":{"src\/changes\/changes.xml":"MODIFY"},"diff":{"src\/changes\/changes.xml":[{"add":["237","      <action issue=\"LOG4J2-3407\" dev=\"ggregory\" type=\"fix\" due-to=\"Kenny MacLeod\">","238","        Log4j 1.2 bridge Check for non-existent appender when parsing properties #761.","239","      <\/action>"],"delete":[]}]}}}